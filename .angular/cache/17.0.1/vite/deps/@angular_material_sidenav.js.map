{
  "version": 3,
  "sources": ["../../../../../../../src/material/sidenav/drawer-animations.ts", "../../../../../../../src/material/sidenav/drawer.ts", "../../../../../../../src/material/sidenav/drawer.html", "../../../../../../../src/material/sidenav/drawer-container.html", "../../../../../../../src/material/sidenav/sidenav.ts", "../../../../../../../src/material/sidenav/sidenav-container.html", "../../../../../../../src/material/sidenav/sidenav-module.ts", "../../../../../../../src/material/sidenav/sidenav_public_index.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material drawers.\n * @docs-private\n */\nexport const matDrawerAnimations: {\n  readonly transformDrawer: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides a drawer in and out. */\n  transformDrawer: trigger('transform', [\n    // We remove the `transform` here completely, rather than setting it to zero, because:\n    // 1. Having a transform can cause elements with ripples or an animated\n    //    transform to shift around in Chrome with an RTL layout (see #10023).\n    // 2. 3d transforms causes text to appear blurry on IE and Edge.\n    state(\n      'open, open-instant',\n      style({\n        'transform': 'none',\n        'visibility': 'visible',\n      }),\n    ),\n    state(\n      'void',\n      style({\n        // Avoids the shadow showing up when closed in SSR.\n        'box-shadow': 'none',\n        'visibility': 'hidden',\n      }),\n    ),\n    transition('void => open-instant', animate('0ms')),\n    transition(\n      'void <=> open, open-instant => void',\n      animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)'),\n    ),\n  ]),\n};\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  FocusMonitor,\n  FocusOrigin,\n  FocusTrap,\n  FocusTrapFactory,\n  InteractivityChecker,\n} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {BooleanInput, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE, hasModifierKey} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {CdkScrollable, ScrollDispatcher, ViewportRuler} from '@angular/cdk/scrolling';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {fromEvent, merge, Observable, Subject} from 'rxjs';\nimport {\n  debounceTime,\n  filter,\n  map,\n  startWith,\n  take,\n  takeUntil,\n  distinctUntilChanged,\n  mapTo,\n} from 'rxjs/operators';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/**\n * Throws an exception when two MatDrawer are matching the same position.\n * @docs-private\n */\nexport function throwMatDuplicatedDrawerError(position: string) {\n  throw Error(`A drawer was already declared for 'position=\"${position}\"'`);\n}\n\n/** Options for where to set focus to automatically on dialog open */\nexport type AutoFocusTarget = 'dialog' | 'first-tabbable' | 'first-heading';\n\n/** Result of the toggle promise that indicates the state of the drawer. */\nexport type MatDrawerToggleResult = 'open' | 'close';\n\n/** Drawer and SideNav display modes. */\nexport type MatDrawerMode = 'over' | 'push' | 'side';\n\n/** Configures whether drawers should use auto sizing by default. */\nexport const MAT_DRAWER_DEFAULT_AUTOSIZE = new InjectionToken<boolean>(\n  'MAT_DRAWER_DEFAULT_AUTOSIZE',\n  {\n    providedIn: 'root',\n    factory: MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY,\n  },\n);\n\n/**\n * Used to provide a drawer container to a drawer while avoiding circular references.\n * @docs-private\n */\nexport const MAT_DRAWER_CONTAINER = new InjectionToken('MAT_DRAWER_CONTAINER');\n\n/** @docs-private */\nexport function MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY(): boolean {\n  return false;\n}\n\n@Component({\n  selector: 'mat-drawer-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content',\n    '[style.margin-left.px]': '_container._contentMargins.left',\n    '[style.margin-right.px]': '_container._contentMargins.right',\n    'ngSkipHydration': '',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  providers: [\n    {\n      provide: CdkScrollable,\n      useExisting: MatDrawerContent,\n    },\n  ],\n})\nexport class MatDrawerContent extends CdkScrollable implements AfterContentInit {\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Inject(forwardRef(() => MatDrawerContainer)) public _container: MatDrawerContainer,\n    elementRef: ElementRef<HTMLElement>,\n    scrollDispatcher: ScrollDispatcher,\n    ngZone: NgZone,\n  ) {\n    super(elementRef, scrollDispatcher, ngZone);\n  }\n\n  ngAfterContentInit() {\n    this._container._contentMarginChanges.subscribe(() => {\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n}\n\n/**\n * This component corresponds to a drawer that can be opened on the drawer container.\n */\n@Component({\n  selector: 'mat-drawer',\n  exportAs: 'matDrawer',\n  templateUrl: 'drawer.html',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    '[class.mat-drawer-opened]': 'opened',\n    'tabIndex': '-1',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_animationStarted.next($event)',\n    '(@transform.done)': '_animationEnd.next($event)',\n    'ngSkipHydration': '',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawer implements AfterViewInit, AfterContentChecked, OnDestroy {\n  private _focusTrap: FocusTrap;\n  private _elementFocusedBeforeDrawerWasOpened: HTMLElement | null = null;\n\n  /** Whether the drawer is initialized. Used for disabling the initial animation. */\n  private _enableAnimations = false;\n\n  /** Whether the view of the component has been attached. */\n  private _isAttached: boolean;\n\n  /** Anchor node used to restore the drawer to its initial position. */\n  private _anchor: Comment | null;\n\n  /** The side that the drawer is attached to. */\n  @Input()\n  get position(): 'start' | 'end' {\n    return this._position;\n  }\n  set position(value: 'start' | 'end') {\n    // Make sure we have a valid value.\n    value = value === 'end' ? 'end' : 'start';\n    if (value !== this._position) {\n      // Static inputs in Ivy are set before the element is in the DOM.\n      if (this._isAttached) {\n        this._updatePositionInParent(value);\n      }\n\n      this._position = value;\n      this.onPositionChanged.emit();\n    }\n  }\n  private _position: 'start' | 'end' = 'start';\n\n  /** Mode of the drawer; one of 'over', 'push' or 'side'. */\n  @Input()\n  get mode(): MatDrawerMode {\n    return this._mode;\n  }\n  set mode(value: MatDrawerMode) {\n    this._mode = value;\n    this._updateFocusTrapState();\n    this._modeChanged.next();\n  }\n  private _mode: MatDrawerMode = 'over';\n\n  /** Whether the drawer can be closed with the escape key or by clicking on the backdrop. */\n  @Input()\n  get disableClose(): boolean {\n    return this._disableClose;\n  }\n  set disableClose(value: BooleanInput) {\n    this._disableClose = coerceBooleanProperty(value);\n  }\n  private _disableClose: boolean = false;\n\n  /**\n   * Whether the drawer should focus the first focusable element automatically when opened.\n   * Defaults to false in when `mode` is set to `side`, otherwise defaults to `true`. If explicitly\n   * enabled, focus will be moved into the sidenav in `side` mode as well.\n   * @breaking-change 14.0.0 Remove boolean option from autoFocus. Use string or AutoFocusTarget\n   * instead.\n   */\n  @Input()\n  get autoFocus(): AutoFocusTarget | string | boolean {\n    const value = this._autoFocus;\n\n    // Note that usually we don't allow autoFocus to be set to `first-tabbable` in `side` mode,\n    // because we don't know how the sidenav is being used, but in some cases it still makes\n    // sense to do it. The consumer can explicitly set `autoFocus`.\n    if (value == null) {\n      if (this.mode === 'side') {\n        return 'dialog';\n      } else {\n        return 'first-tabbable';\n      }\n    }\n    return value;\n  }\n  set autoFocus(value: AutoFocusTarget | string | BooleanInput) {\n    if (value === 'true' || value === 'false' || value == null) {\n      value = coerceBooleanProperty(value);\n    }\n    this._autoFocus = value;\n  }\n  private _autoFocus: AutoFocusTarget | string | boolean | undefined;\n\n  /**\n   * Whether the drawer is opened. We overload this because we trigger an event when it\n   * starts or end.\n   */\n  @Input()\n  get opened(): boolean {\n    return this._opened;\n  }\n  set opened(value: BooleanInput) {\n    this.toggle(coerceBooleanProperty(value));\n  }\n  private _opened: boolean = false;\n\n  /** How the sidenav was opened (keypress, mouse click etc.) */\n  private _openedVia: FocusOrigin | null;\n\n  /** Emits whenever the drawer has started animating. */\n  readonly _animationStarted = new Subject<AnimationEvent>();\n\n  /** Emits whenever the drawer is done animating. */\n  readonly _animationEnd = new Subject<AnimationEvent>();\n\n  /** Current state of the sidenav animation. */\n  _animationState: 'open-instant' | 'open' | 'void' = 'void';\n\n  /** Event emitted when the drawer open state is changed. */\n  @Output() readonly openedChange: EventEmitter<boolean> =\n    // Note this has to be async in order to avoid some issues with two-bindings (see #8872).\n    new EventEmitter<boolean>(/* isAsync */ true);\n\n  /** Event emitted when the drawer has been opened. */\n  @Output('opened')\n  readonly _openedStream = this.openedChange.pipe(\n    filter(o => o),\n    map(() => {}),\n  );\n\n  /** Event emitted when the drawer has started opening. */\n  @Output()\n  readonly openedStart: Observable<void> = this._animationStarted.pipe(\n    filter(e => e.fromState !== e.toState && e.toState.indexOf('open') === 0),\n    mapTo(undefined),\n  );\n\n  /** Event emitted when the drawer has been closed. */\n  @Output('closed')\n  readonly _closedStream = this.openedChange.pipe(\n    filter(o => !o),\n    map(() => {}),\n  );\n\n  /** Event emitted when the drawer has started closing. */\n  @Output()\n  readonly closedStart: Observable<void> = this._animationStarted.pipe(\n    filter(e => e.fromState !== e.toState && e.toState === 'void'),\n    mapTo(undefined),\n  );\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  /** Event emitted when the drawer's position changes. */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output('positionChanged') readonly onPositionChanged = new EventEmitter<void>();\n\n  /** Reference to the inner element that contains all the content. */\n  @ViewChild('content') _content: ElementRef<HTMLElement>;\n\n  /**\n   * An observable that emits when the drawer mode changes. This is used by the drawer container to\n   * to know when to when the mode changes so it can adapt the margins on the content.\n   */\n  readonly _modeChanged = new Subject<void>();\n\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    private _focusTrapFactory: FocusTrapFactory,\n    private _focusMonitor: FocusMonitor,\n    private _platform: Platform,\n    private _ngZone: NgZone,\n    private readonly _interactivityChecker: InteractivityChecker,\n    @Optional() @Inject(DOCUMENT) private _doc: any,\n    @Optional() @Inject(MAT_DRAWER_CONTAINER) public _container?: MatDrawerContainer,\n  ) {\n    this.openedChange.subscribe((opened: boolean) => {\n      if (opened) {\n        if (this._doc) {\n          this._elementFocusedBeforeDrawerWasOpened = this._doc.activeElement as HTMLElement;\n        }\n\n        this._takeFocus();\n      } else if (this._isFocusWithinDrawer()) {\n        this._restoreFocus(this._openedVia || 'program');\n      }\n    });\n\n    /**\n     * Listen to `keydown` events outside the zone so that change detection is not run every\n     * time a key is pressed. Instead we re-enter the zone only if the `ESC` key is pressed\n     * and we don't have close disabled.\n     */\n    this._ngZone.runOutsideAngular(() => {\n      (fromEvent(this._elementRef.nativeElement, 'keydown') as Observable<KeyboardEvent>)\n        .pipe(\n          filter(event => {\n            return event.keyCode === ESCAPE && !this.disableClose && !hasModifierKey(event);\n          }),\n          takeUntil(this._destroyed),\n        )\n        .subscribe(event =>\n          this._ngZone.run(() => {\n            this.close();\n            event.stopPropagation();\n            event.preventDefault();\n          }),\n        );\n    });\n\n    // We need a Subject with distinctUntilChanged, because the `done` event\n    // fires twice on some browsers. See https://github.com/angular/angular/issues/24084\n    this._animationEnd\n      .pipe(\n        distinctUntilChanged((x, y) => {\n          return x.fromState === y.fromState && x.toState === y.toState;\n        }),\n      )\n      .subscribe((event: AnimationEvent) => {\n        const {fromState, toState} = event;\n\n        if (\n          (toState.indexOf('open') === 0 && fromState === 'void') ||\n          (toState === 'void' && fromState.indexOf('open') === 0)\n        ) {\n          this.openedChange.emit(this._opened);\n        }\n      });\n  }\n\n  /**\n   * Focuses the provided element. If the element is not focusable, it will add a tabIndex\n   * attribute to forcefully focus it. The attribute is removed after focus is moved.\n   * @param element The element to focus.\n   */\n  private _forceFocus(element: HTMLElement, options?: FocusOptions) {\n    if (!this._interactivityChecker.isFocusable(element)) {\n      element.tabIndex = -1;\n      // The tabindex attribute should be removed to avoid navigating to that element again\n      this._ngZone.runOutsideAngular(() => {\n        const callback = () => {\n          element.removeEventListener('blur', callback);\n          element.removeEventListener('mousedown', callback);\n          element.removeAttribute('tabindex');\n        };\n\n        element.addEventListener('blur', callback);\n        element.addEventListener('mousedown', callback);\n      });\n    }\n    element.focus(options);\n  }\n\n  /**\n   * Focuses the first element that matches the given selector within the focus trap.\n   * @param selector The CSS selector for the element to set focus to.\n   */\n  private _focusByCssSelector(selector: string, options?: FocusOptions) {\n    let elementToFocus = this._elementRef.nativeElement.querySelector(\n      selector,\n    ) as HTMLElement | null;\n    if (elementToFocus) {\n      this._forceFocus(elementToFocus, options);\n    }\n  }\n\n  /**\n   * Moves focus into the drawer. Note that this works even if\n   * the focus trap is disabled in `side` mode.\n   */\n  private _takeFocus() {\n    if (!this._focusTrap) {\n      return;\n    }\n\n    const element = this._elementRef.nativeElement;\n\n    // When autoFocus is not on the sidenav, if the element cannot be focused or does\n    // not exist, focus the sidenav itself so the keyboard navigation still works.\n    // We need to check that `focus` is a function due to Universal.\n    switch (this.autoFocus) {\n      case false:\n      case 'dialog':\n        return;\n      case true:\n      case 'first-tabbable':\n        this._focusTrap.focusInitialElementWhenReady().then(hasMovedFocus => {\n          if (!hasMovedFocus && typeof this._elementRef.nativeElement.focus === 'function') {\n            element.focus();\n          }\n        });\n        break;\n      case 'first-heading':\n        this._focusByCssSelector('h1, h2, h3, h4, h5, h6, [role=\"heading\"]');\n        break;\n      default:\n        this._focusByCssSelector(this.autoFocus!);\n        break;\n    }\n  }\n\n  /**\n   * Restores focus to the element that was originally focused when the drawer opened.\n   * If no element was focused at that time, the focus will be restored to the drawer.\n   */\n  private _restoreFocus(focusOrigin: Exclude<FocusOrigin, null>) {\n    if (this.autoFocus === 'dialog') {\n      return;\n    }\n\n    if (this._elementFocusedBeforeDrawerWasOpened) {\n      this._focusMonitor.focusVia(this._elementFocusedBeforeDrawerWasOpened, focusOrigin);\n    } else {\n      this._elementRef.nativeElement.blur();\n    }\n\n    this._elementFocusedBeforeDrawerWasOpened = null;\n  }\n\n  /** Whether focus is currently within the drawer. */\n  private _isFocusWithinDrawer(): boolean {\n    const activeEl = this._doc.activeElement;\n    return !!activeEl && this._elementRef.nativeElement.contains(activeEl);\n  }\n\n  ngAfterViewInit() {\n    this._isAttached = true;\n    this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    this._updateFocusTrapState();\n\n    // Only update the DOM position when the sidenav is positioned at\n    // the end since we project the sidenav before the content by default.\n    if (this._position === 'end') {\n      this._updatePositionInParent('end');\n    }\n  }\n\n  ngAfterContentChecked() {\n    // Enable the animations after the lifecycle hooks have run, in order to avoid animating\n    // drawers that are open by default. When we're on the server, we shouldn't enable the\n    // animations, because we don't want the drawer to animate the first time the user sees\n    // the page.\n    if (this._platform.isBrowser) {\n      this._enableAnimations = true;\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n\n    this._anchor?.remove();\n    this._anchor = null;\n    this._animationStarted.complete();\n    this._animationEnd.complete();\n    this._modeChanged.complete();\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /**\n   * Open the drawer.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  open(openedVia?: FocusOrigin): Promise<MatDrawerToggleResult> {\n    return this.toggle(true, openedVia);\n  }\n\n  /** Close the drawer. */\n  close(): Promise<MatDrawerToggleResult> {\n    return this.toggle(false);\n  }\n\n  /** Closes the drawer with context that the backdrop was clicked. */\n  _closeViaBackdropClick(): Promise<MatDrawerToggleResult> {\n    // If the drawer is closed upon a backdrop click, we always want to restore focus. We\n    // don't need to check whether focus is currently in the drawer, as clicking on the\n    // backdrop causes blurs the active element.\n    return this._setOpen(/* isOpen */ false, /* restoreFocus */ true, 'mouse');\n  }\n\n  /**\n   * Toggle this drawer.\n   * @param isOpen Whether the drawer should be open.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  toggle(isOpen: boolean = !this.opened, openedVia?: FocusOrigin): Promise<MatDrawerToggleResult> {\n    // If the focus is currently inside the drawer content and we are closing the drawer,\n    // restore the focus to the initially focused element (when the drawer opened).\n    if (isOpen && openedVia) {\n      this._openedVia = openedVia;\n    }\n\n    const result = this._setOpen(\n      isOpen,\n      /* restoreFocus */ !isOpen && this._isFocusWithinDrawer(),\n      this._openedVia || 'program',\n    );\n\n    if (!isOpen) {\n      this._openedVia = null;\n    }\n\n    return result;\n  }\n\n  /**\n   * Toggles the opened state of the drawer.\n   * @param isOpen Whether the drawer should open or close.\n   * @param restoreFocus Whether focus should be restored on close.\n   * @param focusOrigin Origin to use when restoring focus.\n   */\n  private _setOpen(\n    isOpen: boolean,\n    restoreFocus: boolean,\n    focusOrigin: Exclude<FocusOrigin, null>,\n  ): Promise<MatDrawerToggleResult> {\n    this._opened = isOpen;\n\n    if (isOpen) {\n      this._animationState = this._enableAnimations ? 'open' : 'open-instant';\n    } else {\n      this._animationState = 'void';\n      if (restoreFocus) {\n        this._restoreFocus(focusOrigin);\n      }\n    }\n\n    this._updateFocusTrapState();\n\n    return new Promise<MatDrawerToggleResult>(resolve => {\n      this.openedChange.pipe(take(1)).subscribe(open => resolve(open ? 'open' : 'close'));\n    });\n  }\n\n  _getWidth(): number {\n    return this._elementRef.nativeElement ? this._elementRef.nativeElement.offsetWidth || 0 : 0;\n  }\n\n  /** Updates the enabled state of the focus trap. */\n  private _updateFocusTrapState() {\n    if (this._focusTrap) {\n      // Trap focus only if the backdrop is enabled. Otherwise, allow end user to interact with the\n      // sidenav content.\n      this._focusTrap.enabled = !!this._container?.hasBackdrop;\n    }\n  }\n\n  /**\n   * Updates the position of the drawer in the DOM. We need to move the element around ourselves\n   * when it's in the `end` position so that it comes after the content and the visual order\n   * matches the tab order. We also need to be able to move it back to `start` if the sidenav\n   * started off as `end` and was changed to `start`.\n   */\n  private _updatePositionInParent(newPosition: 'start' | 'end') {\n    const element = this._elementRef.nativeElement;\n    const parent = element.parentNode!;\n\n    if (newPosition === 'end') {\n      if (!this._anchor) {\n        this._anchor = this._doc.createComment('mat-drawer-anchor')!;\n        parent.insertBefore(this._anchor!, element);\n      }\n\n      parent.appendChild(element);\n    } else if (this._anchor) {\n      this._anchor.parentNode!.insertBefore(element, this._anchor);\n    }\n  }\n}\n\n/**\n * `<mat-drawer-container>` component.\n *\n * This is the parent component to one or two `<mat-drawer>`s that validates the state internally\n * and coordinates the backdrop and content styling.\n */\n@Component({\n  selector: 'mat-drawer-container',\n  exportAs: 'matDrawerContainer',\n  templateUrl: 'drawer-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container',\n    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n    'ngSkipHydration': '',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  providers: [\n    {\n      provide: MAT_DRAWER_CONTAINER,\n      useExisting: MatDrawerContainer,\n    },\n  ],\n})\nexport class MatDrawerContainer implements AfterContentInit, DoCheck, OnDestroy {\n  /** All drawers in the container. Includes drawers from inside nested containers. */\n  @ContentChildren(MatDrawer, {\n    // We need to use `descendants: true`, because Ivy will no longer match\n    // indirect descendants if it's left as false.\n    descendants: true,\n  })\n  _allDrawers: QueryList<MatDrawer>;\n\n  /** Drawers that belong to this container. */\n  _drawers = new QueryList<MatDrawer>();\n\n  @ContentChild(MatDrawerContent) _content: MatDrawerContent;\n  @ViewChild(MatDrawerContent) _userContent: MatDrawerContent;\n\n  /** The drawer child with the `start` position. */\n  get start(): MatDrawer | null {\n    return this._start;\n  }\n\n  /** The drawer child with the `end` position. */\n  get end(): MatDrawer | null {\n    return this._end;\n  }\n\n  /**\n   * Whether to automatically resize the container whenever\n   * the size of any of its drawers changes.\n   *\n   * **Use at your own risk!** Enabling this option can cause layout thrashing by measuring\n   * the drawers on every change detection cycle. Can be configured globally via the\n   * `MAT_DRAWER_DEFAULT_AUTOSIZE` token.\n   */\n  @Input()\n  get autosize(): boolean {\n    return this._autosize;\n  }\n  set autosize(value: BooleanInput) {\n    this._autosize = coerceBooleanProperty(value);\n  }\n  private _autosize: boolean;\n\n  /**\n   * Whether the drawer container should have a backdrop while one of the sidenavs is open.\n   * If explicitly set to `true`, the backdrop will be enabled for drawers in the `side`\n   * mode as well.\n   */\n  @Input()\n  get hasBackdrop(): boolean {\n    return this._drawerHasBackdrop(this._start) || this._drawerHasBackdrop(this._end);\n  }\n  set hasBackdrop(value: BooleanInput) {\n    this._backdropOverride = value == null ? null : coerceBooleanProperty(value);\n  }\n  _backdropOverride: boolean | null;\n\n  /** Event emitted when the drawer backdrop is clicked. */\n  @Output() readonly backdropClick: EventEmitter<void> = new EventEmitter<void>();\n\n  /** The drawer at the start/end position, independent of direction. */\n  private _start: MatDrawer | null;\n  private _end: MatDrawer | null;\n\n  /**\n   * The drawer at the left/right. When direction changes, these will change as well.\n   * They're used as aliases for the above to set the left/right style properly.\n   * In LTR, _left == _start and _right == _end.\n   * In RTL, _left == _end and _right == _start.\n   */\n  private _left: MatDrawer | null;\n  private _right: MatDrawer | null;\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  /** Emits on every ngDoCheck. Used for debouncing reflows. */\n  private readonly _doCheckSubject = new Subject<void>();\n\n  /**\n   * Margins to be applied to the content. These are used to push / shrink the drawer content when a\n   * drawer is open. We use margin rather than transform even for push mode because transform breaks\n   * fixed position elements inside of the transformed element.\n   */\n  _contentMargins: {left: number | null; right: number | null} = {left: null, right: null};\n\n  readonly _contentMarginChanges = new Subject<{left: number | null; right: number | null}>();\n\n  /** Reference to the CdkScrollable instance that wraps the scrollable content. */\n  get scrollable(): CdkScrollable {\n    return this._userContent || this._content;\n  }\n\n  constructor(\n    @Optional() private _dir: Directionality,\n    private _element: ElementRef<HTMLElement>,\n    private _ngZone: NgZone,\n    private _changeDetectorRef: ChangeDetectorRef,\n    viewportRuler: ViewportRuler,\n    @Inject(MAT_DRAWER_DEFAULT_AUTOSIZE) defaultAutosize = false,\n    @Optional() @Inject(ANIMATION_MODULE_TYPE) private _animationMode?: string,\n  ) {\n    // If a `Dir` directive exists up the tree, listen direction changes\n    // and update the left/right properties to point to the proper start/end.\n    if (_dir) {\n      _dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => {\n        this._validateDrawers();\n        this.updateContentMargins();\n      });\n    }\n\n    // Since the minimum width of the sidenav depends on the viewport width,\n    // we need to recompute the margins if the viewport changes.\n    viewportRuler\n      .change()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this.updateContentMargins());\n\n    this._autosize = defaultAutosize;\n  }\n\n  ngAfterContentInit() {\n    this._allDrawers.changes\n      .pipe(startWith(this._allDrawers), takeUntil(this._destroyed))\n      .subscribe((drawer: QueryList<MatDrawer>) => {\n        this._drawers.reset(drawer.filter(item => !item._container || item._container === this));\n        this._drawers.notifyOnChanges();\n      });\n\n    this._drawers.changes.pipe(startWith(null)).subscribe(() => {\n      this._validateDrawers();\n\n      this._drawers.forEach((drawer: MatDrawer) => {\n        this._watchDrawerToggle(drawer);\n        this._watchDrawerPosition(drawer);\n        this._watchDrawerMode(drawer);\n      });\n\n      if (\n        !this._drawers.length ||\n        this._isDrawerOpen(this._start) ||\n        this._isDrawerOpen(this._end)\n      ) {\n        this.updateContentMargins();\n      }\n\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Avoid hitting the NgZone through the debounce timeout.\n    this._ngZone.runOutsideAngular(() => {\n      this._doCheckSubject\n        .pipe(\n          debounceTime(10), // Arbitrary debounce time, less than a frame at 60fps\n          takeUntil(this._destroyed),\n        )\n        .subscribe(() => this.updateContentMargins());\n    });\n  }\n\n  ngOnDestroy() {\n    this._contentMarginChanges.complete();\n    this._doCheckSubject.complete();\n    this._drawers.destroy();\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Calls `open` of both start and end drawers */\n  open(): void {\n    this._drawers.forEach(drawer => drawer.open());\n  }\n\n  /** Calls `close` of both start and end drawers */\n  close(): void {\n    this._drawers.forEach(drawer => drawer.close());\n  }\n\n  /**\n   * Recalculates and updates the inline styles for the content. Note that this should be used\n   * sparingly, because it causes a reflow.\n   */\n  updateContentMargins() {\n    // 1. For drawers in `over` mode, they don't affect the content.\n    // 2. For drawers in `side` mode they should shrink the content. We do this by adding to the\n    //    left margin (for left drawer) or right margin (for right the drawer).\n    // 3. For drawers in `push` mode the should shift the content without resizing it. We do this by\n    //    adding to the left or right margin and simultaneously subtracting the same amount of\n    //    margin from the other side.\n    let left = 0;\n    let right = 0;\n\n    if (this._left && this._left.opened) {\n      if (this._left.mode == 'side') {\n        left += this._left._getWidth();\n      } else if (this._left.mode == 'push') {\n        const width = this._left._getWidth();\n        left += width;\n        right -= width;\n      }\n    }\n\n    if (this._right && this._right.opened) {\n      if (this._right.mode == 'side') {\n        right += this._right._getWidth();\n      } else if (this._right.mode == 'push') {\n        const width = this._right._getWidth();\n        right += width;\n        left -= width;\n      }\n    }\n\n    // If either `right` or `left` is zero, don't set a style to the element. This\n    // allows users to specify a custom size via CSS class in SSR scenarios where the\n    // measured widths will always be zero. Note that we reset to `null` here, rather\n    // than below, in order to ensure that the types in the `if` below are consistent.\n    left = left || null!;\n    right = right || null!;\n\n    if (left !== this._contentMargins.left || right !== this._contentMargins.right) {\n      this._contentMargins = {left, right};\n\n      // Pull back into the NgZone since in some cases we could be outside. We need to be careful\n      // to do it only when something changed, otherwise we can end up hitting the zone too often.\n      this._ngZone.run(() => this._contentMarginChanges.next(this._contentMargins));\n    }\n  }\n\n  ngDoCheck() {\n    // If users opted into autosizing, do a check every change detection cycle.\n    if (this._autosize && this._isPushed()) {\n      // Run outside the NgZone, otherwise the debouncer will throw us into an infinite loop.\n      this._ngZone.runOutsideAngular(() => this._doCheckSubject.next());\n    }\n  }\n\n  /**\n   * Subscribes to drawer events in order to set a class on the main container element when the\n   * drawer is open and the backdrop is visible. This ensures any overflow on the container element\n   * is properly hidden.\n   */\n  private _watchDrawerToggle(drawer: MatDrawer): void {\n    drawer._animationStarted\n      .pipe(\n        filter((event: AnimationEvent) => event.fromState !== event.toState),\n        takeUntil(this._drawers.changes),\n      )\n      .subscribe((event: AnimationEvent) => {\n        // Set the transition class on the container so that the animations occur. This should not\n        // be set initially because animations should only be triggered via a change in state.\n        if (event.toState !== 'open-instant' && this._animationMode !== 'NoopAnimations') {\n          this._element.nativeElement.classList.add('mat-drawer-transition');\n        }\n\n        this.updateContentMargins();\n        this._changeDetectorRef.markForCheck();\n      });\n\n    if (drawer.mode !== 'side') {\n      drawer.openedChange\n        .pipe(takeUntil(this._drawers.changes))\n        .subscribe(() => this._setContainerClass(drawer.opened));\n    }\n  }\n\n  /**\n   * Subscribes to drawer onPositionChanged event in order to\n   * re-validate drawers when the position changes.\n   */\n  private _watchDrawerPosition(drawer: MatDrawer): void {\n    if (!drawer) {\n      return;\n    }\n    // NOTE: We need to wait for the microtask queue to be empty before validating,\n    // since both drawers may be swapping positions at the same time.\n    drawer.onPositionChanged.pipe(takeUntil(this._drawers.changes)).subscribe(() => {\n      this._ngZone.onMicrotaskEmpty.pipe(take(1)).subscribe(() => {\n        this._validateDrawers();\n      });\n    });\n  }\n\n  /** Subscribes to changes in drawer mode so we can run change detection. */\n  private _watchDrawerMode(drawer: MatDrawer): void {\n    if (drawer) {\n      drawer._modeChanged\n        .pipe(takeUntil(merge(this._drawers.changes, this._destroyed)))\n        .subscribe(() => {\n          this.updateContentMargins();\n          this._changeDetectorRef.markForCheck();\n        });\n    }\n  }\n\n  /** Toggles the 'mat-drawer-opened' class on the main 'mat-drawer-container' element. */\n  private _setContainerClass(isAdd: boolean): void {\n    const classList = this._element.nativeElement.classList;\n    const className = 'mat-drawer-container-has-open';\n\n    if (isAdd) {\n      classList.add(className);\n    } else {\n      classList.remove(className);\n    }\n  }\n\n  /** Validate the state of the drawer children components. */\n  private _validateDrawers() {\n    this._start = this._end = null;\n\n    // Ensure that we have at most one start and one end drawer.\n    this._drawers.forEach(drawer => {\n      if (drawer.position == 'end') {\n        if (this._end != null && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n          throwMatDuplicatedDrawerError('end');\n        }\n        this._end = drawer;\n      } else {\n        if (this._start != null && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n          throwMatDuplicatedDrawerError('start');\n        }\n        this._start = drawer;\n      }\n    });\n\n    this._right = this._left = null;\n\n    // Detect if we're LTR or RTL.\n    if (this._dir && this._dir.value === 'rtl') {\n      this._left = this._end;\n      this._right = this._start;\n    } else {\n      this._left = this._start;\n      this._right = this._end;\n    }\n  }\n\n  /** Whether the container is being pushed to the side by one of the drawers. */\n  private _isPushed() {\n    return (\n      (this._isDrawerOpen(this._start) && this._start.mode != 'over') ||\n      (this._isDrawerOpen(this._end) && this._end.mode != 'over')\n    );\n  }\n\n  _onBackdropClicked() {\n    this.backdropClick.emit();\n    this._closeModalDrawersViaBackdrop();\n  }\n\n  _closeModalDrawersViaBackdrop() {\n    // Close all open drawers where closing is not disabled and the mode is not `side`.\n    [this._start, this._end]\n      .filter(drawer => drawer && !drawer.disableClose && this._drawerHasBackdrop(drawer))\n      .forEach(drawer => drawer!._closeViaBackdropClick());\n  }\n\n  _isShowingBackdrop(): boolean {\n    return (\n      (this._isDrawerOpen(this._start) && this._drawerHasBackdrop(this._start)) ||\n      (this._isDrawerOpen(this._end) && this._drawerHasBackdrop(this._end))\n    );\n  }\n\n  private _isDrawerOpen(drawer: MatDrawer | null): drawer is MatDrawer {\n    return drawer != null && drawer.opened;\n  }\n\n  // Whether argument drawer should have a backdrop when it opens\n  private _drawerHasBackdrop(drawer: MatDrawer | null) {\n    if (this._backdropOverride == null) {\n      return !!drawer && drawer.mode !== 'side';\n    }\n\n    return this._backdropOverride;\n  }\n}\n", "<div class=\"mat-drawer-inner-container\" cdkScrollable #content>\r\n  <ng-content></ng-content>\r\n</div>\r\n", "@if (hasBackdrop) {\n  <div class=\"mat-drawer-backdrop\" (click)=\"_onBackdropClicked()\"\n       [class.mat-drawer-shown]=\"_isShowingBackdrop()\"></div>\n}\n\n<ng-content select=\"mat-drawer\"></ng-content>\n\n<ng-content select=\"mat-drawer-content\">\n</ng-content>\n\n@if (!_content) {\n  <mat-drawer-content>\n    <ng-content></ng-content>\n  </mat-drawer-content>\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  forwardRef,\n  Inject,\n  Input,\n  ViewEncapsulation,\n  QueryList,\n  ElementRef,\n  NgZone,\n} from '@angular/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent, MAT_DRAWER_CONTAINER} from './drawer';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {\n  BooleanInput,\n  coerceBooleanProperty,\n  coerceNumberProperty,\n  NumberInput,\n} from '@angular/cdk/coercion';\nimport {ScrollDispatcher, CdkScrollable} from '@angular/cdk/scrolling';\n\n@Component({\n  selector: 'mat-sidenav-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content mat-sidenav-content',\n    '[style.margin-left.px]': '_container._contentMargins.left',\n    '[style.margin-right.px]': '_container._contentMargins.right',\n    'ngSkipHydration': '',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  providers: [\n    {\n      provide: CdkScrollable,\n      useExisting: MatSidenavContent,\n    },\n  ],\n})\nexport class MatSidenavContent extends MatDrawerContent {\n  constructor(\n    changeDetectorRef: ChangeDetectorRef,\n    @Inject(forwardRef(() => MatSidenavContainer)) container: MatSidenavContainer,\n    elementRef: ElementRef<HTMLElement>,\n    scrollDispatcher: ScrollDispatcher,\n    ngZone: NgZone,\n  ) {\n    super(changeDetectorRef, container, elementRef, scrollDispatcher, ngZone);\n  }\n}\n\n@Component({\n  selector: 'mat-sidenav',\n  exportAs: 'matSidenav',\n  templateUrl: 'drawer.html',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer mat-sidenav',\n    'tabIndex': '-1',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    '[class.mat-drawer-opened]': 'opened',\n    '[class.mat-sidenav-fixed]': 'fixedInViewport',\n    '[style.top.px]': 'fixedInViewport ? fixedTopGap : null',\n    '[style.bottom.px]': 'fixedInViewport ? fixedBottomGap : null',\n    'ngSkipHydration': '',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenav extends MatDrawer {\n  /** Whether the sidenav is fixed in the viewport. */\n  @Input()\n  get fixedInViewport(): boolean {\n    return this._fixedInViewport;\n  }\n  set fixedInViewport(value: BooleanInput) {\n    this._fixedInViewport = coerceBooleanProperty(value);\n  }\n  private _fixedInViewport = false;\n\n  /**\n   * The gap between the top of the sidenav and the top of the viewport when the sidenav is in fixed\n   * mode.\n   */\n  @Input()\n  get fixedTopGap(): number {\n    return this._fixedTopGap;\n  }\n  set fixedTopGap(value: NumberInput) {\n    this._fixedTopGap = coerceNumberProperty(value);\n  }\n  private _fixedTopGap = 0;\n\n  /**\n   * The gap between the bottom of the sidenav and the bottom of the viewport when the sidenav is in\n   * fixed mode.\n   */\n  @Input()\n  get fixedBottomGap(): number {\n    return this._fixedBottomGap;\n  }\n  set fixedBottomGap(value: NumberInput) {\n    this._fixedBottomGap = coerceNumberProperty(value);\n  }\n  private _fixedBottomGap = 0;\n}\n\n@Component({\n  selector: 'mat-sidenav-container',\n  exportAs: 'matSidenavContainer',\n  templateUrl: 'sidenav-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container mat-sidenav-container',\n    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n    'ngSkipHydration': '',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  providers: [\n    {\n      provide: MAT_DRAWER_CONTAINER,\n      useExisting: MatSidenavContainer,\n    },\n  ],\n})\nexport class MatSidenavContainer extends MatDrawerContainer {\n  @ContentChildren(MatSidenav, {\n    // We need to use `descendants: true`, because Ivy will no longer match\n    // indirect descendants if it's left as false.\n    descendants: true,\n  })\n  // We need an initializer here to avoid a TS error.\n  override _allDrawers: QueryList<MatSidenav> = undefined!;\n\n  // We need an initializer here to avoid a TS error.\n  @ContentChild(MatSidenavContent) override _content: MatSidenavContent = undefined!;\n}\n", "@if (hasBackdrop) {\n  <div class=\"mat-drawer-backdrop\" (click)=\"_onBackdropClicked()\"\n       [class.mat-drawer-shown]=\"_isShowingBackdrop()\"></div>\n}\n\n<ng-content select=\"mat-sidenav\"></ng-content>\n\n<ng-content select=\"mat-sidenav-content\">\n</ng-content>\n\n@if (!_content) {\n  <mat-sidenav-content>\n    <ng-content></ng-content>\n  </mat-sidenav-content>\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CdkScrollableModule} from '@angular/cdk/scrolling';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {MatSidenav, MatSidenavContainer, MatSidenavContent} from './sidenav';\n\n@NgModule({\n  imports: [MatCommonModule, CdkScrollableModule],\n  exports: [\n    CdkScrollableModule,\n    MatCommonModule,\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n  declarations: [\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n})\nexport class MatSidenavModule {}\n", "/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],
  "mappings": "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",
  "names": ["_c0", "_c1", "MatDrawerContainer_Conditional_0_Template", "rf", "ctx", "_r3", "ɵɵgetCurrentView", "i0", "ɵɵelementStart", "ɵɵlistener", "MatDrawerContainer_Conditional_0_Template_div_click_0_listener", "ɵɵrestoreView", "ctx_r2", "ɵɵnextContext", "ɵɵresetView", "_onBackdropClicked", "ɵɵelementEnd", "ctx_r0", "ɵɵclassProp", "_isShowingBackdrop", "MatDrawerContainer_Conditional_3_Template", "ɵɵprojection", "_c2", "_c3", "MatSidenavContainer_Conditional_0_Template", "MatSidenavContainer_Conditional_0_Template_div_click_0_listener", "MatSidenavContainer_Conditional_3_Template", "_c4", "_c5", "_c6", "matDrawerAnimations", "transformDrawer", "trigger", "state", "style", "transition", "animate", "throwMatDuplicatedDrawerError", "position", "Error", "MAT_DRAWER_DEFAULT_AUTOSIZE", "InjectionToken", "providedIn", "factory", "MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY", "MAT_DRAWER_CONTAINER", "MatDrawerContent", "CdkScrollable", "constructor", "_changeDetectorRef", "_container", "elementRef", "scrollDispatcher", "ngZone", "ngAfterContentInit", "_contentMarginChanges", "subscribe", "markForCheck", "ɵfac", "MatDrawerContent_Factory", "t", "ɵɵdirectiveInject", "ChangeDetectorRef", "forwardRef", "MatDrawerContainer", "ElementRef", "ScrollDispatcher", "NgZone", "ɵcmp", "ɵɵdefineComponent", "type", "selectors", "hostAttrs", "hostVars", "hostBindings", "MatDrawerContent_HostBindings", "ɵɵstyleProp", "_contentMargins", "left", "right", "features", "ɵɵProvidersFeature", "provide", "useExisting", "ɵɵInheritDefinitionFeature", "ngContentSelectors", "decls", "vars", "template", "MatDrawerContent_Template", "ɵɵprojectionDef", "encapsulation", "changeDetection", "ɵsetClassMetadata", "Component", "args", "selector", "host", "ChangeDetectionStrategy", "OnPush", "ViewEncapsulation", "None", "providers", "Inject", "MatDrawer", "_position", "value", "_isAttached", "_updatePositionInParent", "onPositionChanged", "emit", "mode", "_mode", "_updateFocusTrapState", "_modeChanged", "next", "disableClose", "_disableClose", "coerceBooleanProperty", "autoFocus", "_autoFocus", "opened", "_opened", "toggle", "_elementRef", "_focusTrapFactory", "_focusMonitor", "_platform", "_ngZone", "_interactivityChecker", "_doc", "_elementFocusedBeforeDrawerWasOpened", "_enableAnimations", "_animationStarted", "Subject", "_animationEnd", "_animationState", "openedChange", "EventEmitter", "_openedStream", "pipe", "filter", "o", "map", "openedStart", "e", "fromState", "toState", "indexOf", "mapTo", "undefined", "_closedStream", "closedStart", "_destroyed", "activeElement", "_takeFocus", "_isFocusWithinDrawer", "_restoreFocus", "_openedVia", "runOutsideAngular", "fromEvent", "nativeElement", "event", "keyCode", "ESCAPE", "hasModifierKey", "takeUntil", "run", "close", "stopPropagation", "preventDefault", "distinctUntilChanged", "x", "y", "_forceFocus", "element", "options", "isFocusable", "tabIndex", "callback", "removeEventListener", "removeAttribute", "addEventListener", "focus", "_focusByCssSelector", "elementToFocus", "querySelector", "_focusTrap", "focusInitialElementWhenReady", "then", "hasMovedFocus", "focusOrigin", "focusVia", "blur", "activeEl", "contains", "ngAfterViewInit", "create", "ngAfterContentChecked", "isBrowser", "ngOnDestroy", "destroy", "_anchor", "remove", "complete", "open", "openedVia", "_closeViaBackdropClick", "_setOpen", "isOpen", "result", "restoreFocus", "Promise", "resolve", "take", "_getWidth", "offsetWidth", "enabled", "hasBackdrop", "newPosition", "parent", "parentNode", "createComment", "insertBefore", "appendChild", "FocusTrapFactory", "FocusMonitor", "Platform", "InteractivityChecker", "DOCUMENT", "viewQuery", "MatDrawer_Query", "ɵɵviewQuery", "_t", "ɵɵqueryRefresh", "ɵɵloadQuery", "_content", "first", "MatDrawer_HostBindings", "ɵɵsyntheticHostListener", "MatDrawer_animation_transform_start_HostBindingHandler", "$event", "MatDrawer_animation_transform_done_HostBindingHandler", "ɵɵattribute", "ɵɵsyntheticHostProperty", "inputs", "outputs", "exportAs", "consts", "MatDrawer_Template", "dependencies", "data", "animation", "animations", "Optional", "Input", "Output", "ViewChild", "start", "_start", "end", "_end", "autosize", "_autosize", "_drawerHasBackdrop", "_backdropOverride", "scrollable", "_userContent", "_dir", "_element", "viewportRuler", "defaultAutosize", "_animationMode", "_drawers", "QueryList", "backdropClick", "_doCheckSubject", "change", "_validateDrawers", "updateContentMargins", "_allDrawers", "changes", "startWith", "drawer", "reset", "item", "notifyOnChanges", "forEach", "_watchDrawerToggle", "_watchDrawerPosition", "_watchDrawerMode", "length", "_isDrawerOpen", "debounceTime", "_left", "width", "_right", "ngDoCheck", "_isPushed", "classList", "add", "_setContainerClass", "onMicrotaskEmpty", "merge", "isAdd", "className", "ngDevMode", "_closeModalDrawersViaBackdrop", "Directionality", "ViewportRuler", "ANIMATION_MODULE_TYPE", "contentQueries", "MatDrawerContainer_ContentQueries", "dirIndex", "ɵɵcontentQuery", "MatDrawerContainer_Query", "MatDrawerContainer_HostBindings", "MatDrawerContainer_Template", "ɵɵtemplate", "ɵɵconditional", "ɵɵadvance", "styles", "ContentChildren", "descendants", "ContentChild", "MatSidenavContent", "changeDetectorRef", "container", "MatSidenavContent_Factory", "MatSidenavContainer", "MatSidenavContent_HostBindings", "MatSidenavContent_Template", "MatSidenav", "_fixedInViewport", "_fixedTopGap", "_fixedBottomGap", "fixedInViewport", "fixedTopGap", "coerceNumberProperty", "fixedBottomGap", "ɵɵgetInheritedFactory", "MatSidenav_HostBindings", "MatSidenav_Template", "MatSidenavContainer_ContentQueries", "MatSidenavContainer_HostBindings", "MatSidenavContainer_Template", "MatSidenavModule", "ɵmod", "ɵɵdefineNgModule", "declarations", "imports", "MatCommonModule", "CdkScrollableModule", "exports", "ɵinj", "ɵɵdefineInjector", "NgModule"]
}
