{
  "version": 3,
  "sources": ["../../../../../../../src/material/card/card.ts", "../../../../../../../src/material/card/card.html", "../../../../../../../src/material/card/card-title-group.html", "../../../../../../../src/material/card/card-header.html", "../../../../../../../src/material/card/module.ts", "../../../../../../../src/material/card/card_public_index.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  Directive,\n  Inject,\n  InjectionToken,\n  Input,\n  Optional,\n  ViewEncapsulation,\n} from '@angular/core';\n\nexport type MatCardAppearance = 'outlined' | 'raised';\n\n/** Object that can be used to configure the default options for the card module. */\nexport interface MatCardConfig {\n  /** Default appearance for cards. */\n  appearance?: MatCardAppearance;\n}\n\n/** Injection token that can be used to provide the default options the card module. */\nexport const MAT_CARD_CONFIG = new InjectionToken<MatCardConfig>('MAT_CARD_CONFIG');\n\n/**\n * Material Design card component. Cards contain content and actions about a single subject.\n * See https://material.io/design/components/cards.html\n *\n * MatCard provides no behaviors, instead serving as a purely visual treatment.\n */\n@Component({\n  selector: 'mat-card',\n  templateUrl: 'card.html',\n  styleUrls: ['card.css'],\n  host: {\n    'class': 'mat-mdc-card mdc-card',\n    '[class.mat-mdc-card-outlined]': 'appearance === \"outlined\"',\n    '[class.mdc-card--outlined]': 'appearance === \"outlined\"',\n  },\n  exportAs: 'matCard',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCard {\n  @Input() appearance: MatCardAppearance;\n\n  constructor(@Inject(MAT_CARD_CONFIG) @Optional() config?: MatCardConfig) {\n    this.appearance = config?.appearance || 'raised';\n  }\n}\n\n// TODO(jelbourn): add `MatActionCard`, which is a card that acts like a button (and has a ripple).\n// Supported in MDC with `.mdc-card__primary-action`. Will require additional a11y docs for users.\n\n/**\n * Title of a card, intended for use within `<mat-card>`. This component is an optional\n * convenience for one variety of card title; any custom title element may be used in its place.\n *\n * MatCardTitle provides no behaviors, instead serving as a purely visual treatment.\n */\n@Directive({\n  selector: `mat-card-title, [mat-card-title], [matCardTitle]`,\n  host: {'class': 'mat-mdc-card-title'},\n})\nexport class MatCardTitle {}\n\n/**\n * Container intended to be used within the `<mat-card>` component. Can contain exactly one\n * `<mat-card-title>`, one `<mat-card-subtitle>` and one content image of any size\n * (e.g. `<img matCardLgImage>`).\n */\n@Component({\n  selector: 'mat-card-title-group',\n  templateUrl: 'card-title-group.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-mdc-card-title-group'},\n})\nexport class MatCardTitleGroup {}\n\n/**\n * Content of a card, intended for use within `<mat-card>`. This component is an optional\n * convenience for use with other convenience elements, such as `<mat-card-title>`; any custom\n * content block element may be used in its place.\n *\n * MatCardContent provides no behaviors, instead serving as a purely visual treatment.\n */\n@Directive({\n  selector: 'mat-card-content',\n  host: {'class': 'mat-mdc-card-content'},\n})\nexport class MatCardContent {}\n\n/**\n * Sub-title of a card, intended for use within `<mat-card>` beneath a `<mat-card-title>`. This\n * component is an optional convenience for use with other convenience elements, such as\n * `<mat-card-title>`.\n *\n * MatCardSubtitle provides no behaviors, instead serving as a purely visual treatment.\n */\n@Directive({\n  selector: `mat-card-subtitle, [mat-card-subtitle], [matCardSubtitle]`,\n  host: {'class': 'mat-mdc-card-subtitle'},\n})\nexport class MatCardSubtitle {}\n\n/**\n * Bottom area of a card that contains action buttons, intended for use within `<mat-card>`.\n * This component is an optional convenience for use with other convenience elements, such as\n * `<mat-card-content>`; any custom action block element may be used in its place.\n *\n * MatCardActions provides no behaviors, instead serving as a purely visual treatment.\n */\n@Directive({\n  selector: 'mat-card-actions',\n  exportAs: 'matCardActions',\n  host: {\n    'class': 'mat-mdc-card-actions mdc-card__actions',\n    '[class.mat-mdc-card-actions-align-end]': 'align === \"end\"',\n  },\n})\nexport class MatCardActions {\n  // TODO(jelbourn): deprecate `align` in favor of `actionPosition` or `actionAlignment`\n  // as to not conflict with the native `align` attribute.\n\n  /** Position of the actions inside the card. */\n  @Input() align: 'start' | 'end' = 'start';\n\n  // TODO(jelbourn): support `.mdc-card__actions--full-bleed`.\n\n  // TODO(jelbourn): support  `.mdc-card__action-buttons` and `.mdc-card__action-icons`.\n\n  // TODO(jelbourn): figure out how to use `.mdc-card__action`, `.mdc-card__action--button`, and\n  // `mdc-card__action--icon`. They're used primarily for positioning, which we might be able to\n  // do implicitly.\n}\n\n/**\n * Header region of a card, intended for use within `<mat-card>`. This header captures\n * a card title, subtitle, and avatar.  This component is an optional convenience for use with\n * other convenience elements, such as `<mat-card-footer>`; any custom header block element may be\n * used in its place.\n *\n * MatCardHeader provides no behaviors, instead serving as a purely visual treatment.\n */\n@Component({\n  selector: 'mat-card-header',\n  templateUrl: 'card-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-mdc-card-header'},\n})\nexport class MatCardHeader {}\n\n/**\n * Footer area a card, intended for use within `<mat-card>`.\n * This component is an optional convenience for use with other convenience elements, such as\n * `<mat-card-content>`; any custom footer block element may be used in its place.\n *\n * MatCardFooter provides no behaviors, instead serving as a purely visual treatment.\n */\n@Directive({\n  selector: 'mat-card-footer',\n  host: {'class': 'mat-mdc-card-footer'},\n})\nexport class MatCardFooter {}\n\n// TODO(jelbourn): deprecate the \"image\" selectors to replace with \"media\".\n\n// TODO(jelbourn): support `.mdc-card__media-content`.\n\n/**\n * Primary image content for a card, intended for use within `<mat-card>`. Can be applied to\n * any media element, such as `<img>` or `<picture>`.\n *\n * This component is an optional convenience for use with other convenience elements, such as\n * `<mat-card-content>`; any custom media element may be used in its place.\n *\n * MatCardImage provides no behaviors, instead serving as a purely visual treatment.\n */\n@Directive({\n  selector: '[mat-card-image], [matCardImage]',\n  host: {'class': 'mat-mdc-card-image mdc-card__media'},\n})\nexport class MatCardImage {\n  // TODO(jelbourn): support `.mdc-card__media--square` and `.mdc-card__media--16-9`.\n}\n\n/** Same as `MatCardImage`, but small. */\n@Directive({\n  selector: '[mat-card-sm-image], [matCardImageSmall]',\n  host: {'class': 'mat-mdc-card-sm-image mdc-card__media'},\n})\nexport class MatCardSmImage {}\n\n/** Same as `MatCardImage`, but medium. */\n@Directive({\n  selector: '[mat-card-md-image], [matCardImageMedium]',\n  host: {'class': 'mat-mdc-card-md-image mdc-card__media'},\n})\nexport class MatCardMdImage {}\n\n/** Same as `MatCardImage`, but large. */\n@Directive({\n  selector: '[mat-card-lg-image], [matCardImageLarge]',\n  host: {'class': 'mat-mdc-card-lg-image mdc-card__media'},\n})\nexport class MatCardLgImage {}\n\n/** Same as `MatCardImage`, but extra-large. */\n@Directive({\n  selector: '[mat-card-xl-image], [matCardImageXLarge]',\n  host: {'class': 'mat-mdc-card-xl-image mdc-card__media'},\n})\nexport class MatCardXlImage {}\n\n/**\n * Avatar image content for a card, intended for use within `<mat-card>`. Can be applied to\n * any media element, such as `<img>` or `<picture>`.\n *\n * This component is an optional convenience for use with other convenience elements, such as\n * `<mat-card-title>`; any custom media element may be used in its place.\n *\n * MatCardAvatar provides no behaviors, instead serving as a purely visual treatment.\n */\n@Directive({\n  selector: '[mat-card-avatar], [matCardAvatar]',\n  host: {'class': 'mat-mdc-card-avatar'},\n})\nexport class MatCardAvatar {}\n", "<ng-content></ng-content>\n", "<div>\n  <ng-content\n      select=\"mat-card-title, mat-card-subtitle,\n      [mat-card-title], [mat-card-subtitle],\n      [matCardTitle], [matCardSubtitle]\"></ng-content>\n</div>\n<ng-content select=\"[mat-card-image], [matCardImage],\n                    [mat-card-sm-image], [matCardImageSmall],\n                    [mat-card-md-image], [matCardImageMedium],\n                    [mat-card-lg-image], [matCardImageLarge],\n                    [mat-card-xl-image], [matCardImageXLarge]\"></ng-content>\n<ng-content></ng-content>\n", "<ng-content select=\"[mat-card-avatar], [matCardAvatar]\"></ng-content>\n<div class=\"mat-mdc-card-header-text\">\n  <ng-content\n      select=\"mat-card-title, mat-card-subtitle,\n      [mat-card-title], [mat-card-subtitle],\n      [matCardTitle], [matCardSubtitle]\"></ng-content>\n</div>\n<ng-content></ng-content>\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {\n  MatCard,\n  MatCardActions,\n  MatCardAvatar,\n  MatCardContent,\n  MatCardFooter,\n  MatCardHeader,\n  MatCardImage,\n  MatCardLgImage,\n  MatCardMdImage,\n  MatCardSmImage,\n  MatCardSubtitle,\n  MatCardTitle,\n  MatCardTitleGroup,\n  MatCardXlImage,\n} from './card';\n\nconst CARD_DIRECTIVES = [\n  MatCard,\n  MatCardActions,\n  MatCardAvatar,\n  MatCardContent,\n  MatCardFooter,\n  MatCardHeader,\n  MatCardImage,\n  MatCardLgImage,\n  MatCardMdImage,\n  MatCardSmImage,\n  MatCardSubtitle,\n  MatCardTitle,\n  MatCardTitleGroup,\n  MatCardXlImage,\n];\n\n@NgModule({\n  imports: [MatCommonModule, CommonModule],\n  exports: [CARD_DIRECTIVES, MatCommonModule],\n  declarations: CARD_DIRECTIVES,\n})\nexport class MatCardModule {}\n", "/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2BA,IAAAA,MAAA,CAAA,GAAA;AAAA,IAAAC,MAAA,CAAA,CAAA,CAAA,gBAAA,GAAA,CAAA,mBAAA,GAAA,CAAA,IAAA,kBAAA,EAAA,GAAA,CAAA,IAAA,qBAAA,EAAA,GAAA,CAAA,IAAA,gBAAA,EAAA,GAAA,CAAA,IAAA,mBAAA,EAAA,CAAA,GAAA,CAAA,CAAA,IAAA,kBAAA,EAAA,GAAA,CAAA,IAAA,gBAAA,EAAA,GAAA,CAAA,IAAA,qBAAA,EAAA,GAAA,CAAA,IAAA,qBAAA,EAAA,GAAA,CAAA,IAAA,qBAAA,EAAA,GAAA,CAAA,IAAA,sBAAA,EAAA,GAAA,CAAA,IAAA,qBAAA,EAAA,GAAA,CAAA,IAAA,qBAAA,EAAA,GAAA,CAAA,IAAA,qBAAA,EAAA,GAAA,CAAA,IAAA,sBAAA,EAAA,CAAA,GAAA,GAAA;AAAA,IAAAC,MAAA,CAAA,6HAAA,kSAAA,GAAA;AAAA,IAAAC,MAAA,CAAA,CAAA,CAAA,IAAA,mBAAA,EAAA,GAAA,CAAA,IAAA,iBAAA,EAAA,CAAA,GAAA,CAAA,CAAA,gBAAA,GAAA,CAAA,mBAAA,GAAA,CAAA,IAAA,kBAAA,EAAA,GAAA,CAAA,IAAA,qBAAA,EAAA,GAAA,CAAA,IAAA,gBAAA,EAAA,GAAA,CAAA,IAAA,mBAAA,EAAA,CAAA,GAAA,GAAA;AAAA,IAAAC,MAAA,CAAA,sCAAA,6HAAA,GAAA;IACaC,kBAAkB,IAAIC,eAA8B,iBAAiB;IAqBrEC,iBAAAA,SAAO;EAGlBC,YAAiDC,QAAsB;AACrE,SAAKC,aAAaD,QAAQC,cAAc;;;AAJ/B,SAAAC,OAAA,SAAAC,gBAAAC,GAAA;AAAA,SAAA,KAAAA,KAAAN,UAAAO,kBAGST,iBAAe,CAAA,CAAA;AAAA;AAHxB,SAAAU,OAAAC,kBAAA;EAAAC,MAAAV;EAAOW,WAAA,CAAA,CAAA,UAAA,CAAA;EAAAC,WAAA,CAAA,GAAA,gBAAA,UAAA;EAAAC,UAAA;EAAAC,cAAA,SAAAC,qBAAAC,IAAAC,KAAA;AAAA,QAAAD,KAAA,GAAA;AAAPE,MAAAC,YAAA,yBAAAF,IAAAd,eAAA,UAAA,EAAA,sBAAAc,IAAAd,eAAA,UAAA;IAAA;EAAA;EAAAiB,QAAA;IAAAjB,YAAA;EAAA;EAAAkB,UAAA,CAAA,SAAA;EAAAC,oBAAA7B;EAAA8B,OAAA;EAAAC,MAAA;EAAAC,UAAA,SAAAC,iBAAAV,IAAAC,KAAA;AAAA,QAAAD,KAAA,GAAA;AAAAE,MAAAS,gBAAA;AAAAT,MAAAU,aAAA,CCjDb;IAAA;EAAA;EAAAC,QAAA,CAAA,wpLAAA;EAAAC,eAAA;EAAAC,iBAAA;AAAA,CAAA;IDiDa/B;;qDAAAgC,iBAAAhC,SAAO,CAAA;UAbnBiC;IACWC,MAAA,CAAA;MAAAC,UAAA;MAGJC,MAAA;QACJ,SAAS;QACT,iCAAiC;QACjC,8BAA8B;;MAEtBf,UAAA;MAASS,eACJO,oBAAkBC;MAChBP,iBAAAQ,wBAAwBC;MAAMf,UAAA;MAAAI,QAAA,CAAA,wpLAAA;IAAA,CAAA;;;;YAKlCY;aAAO3C,eAAe;;YAAG4C;;;IAF7BvC,YAAU,CAAA;YAAlBwC;;;;IAoBUC,sBAAAA,cAAY;;;mBAAZA,eAAY;AAAA;qBArBZC,kBAAA;EAAAnC,MAqBAkC;EAAYjC,WAAA,CAAA,CAAA,gBAAA,GAAA,CAAA,IAAA,kBAAA,EAAA,GAAA,CAAA,IAAA,gBAAA,EAAA,CAAA;EAAAC,WAAA,CAAA,GAAA,oBAAA;AAAA,CAAA;IAAZgC;;qDArBAZ,iBAqBAY,cAAY,CAAA;UAJxBE;IAAUZ,MAAA,CAAA;MACTC,UAA4D;MAC5DC,MAAM;QAAC,SAAS;MAAoB;IACrC,CAAA;;;IAeYW,2BAAAA,mBAAiB;;;mBAAjBA,oBAAiB;AAAA;AAAjB,mBAAAvC,OAnCAC,kBAAA;EAAAC,MAmCAqC;EAAiBpC,WAAA,CAAA,CAAA,sBAAA,CAAA;EAAAC,WAAA,CAAA,GAAA,0BAAA;EAAAU,oBAAA3B;EAAA4B,OAAA;EAAAC,MAAA;EAAAC,UAAA,SAAAuB,2BAAAhC,IAAAC,KAAA;AAAA,QAAAD,KAAA,GAAA;AAnCjBE,MAAAS,gBAAAjC,GAAA;AAAAwB,MAAA+B,eAAA,GAAA,KEjDb;AFiDa/B,MAAAU,aAAA,CEjDb;AFiDaV,MAAAgC,aEjDb;AFiDahC,MAAAU,aAAA,GAAA,CEjDb;AFiDaV,MAAAU,aAAA,GAAA,CEjDb;IAAA;EAAA;EAAAE,eAAA;EAAAC,iBAAA;AAAA,CAAA;IFoFagB;;qDAnCAf,iBAmCAe,mBAAiB,CAAA;UAP7Bd;IACWC,MAAA,CAAA;MAAAC,UAAA;MAEKL,eAAAO,oBAAkBC;MAChBP,iBAAAQ,wBAAwBC;MACnCJ,MAAA;QAAC,SAAS;MAA0B;MAACX,UAAA;IAAA,CAAA;;;IAehC0B,wBAAAA,gBAAc;;;mBAAdA,iBAAc;AAAA;uBAhDdN,kBAAA;EAAAnC,MAgDAyC;EAAcxC,WAAA,CAAA,CAAA,kBAAA,CAAA;EAAAC,WAAA,CAAA,GAAA,sBAAA;AAAA,CAAA;IAAduC;;qDAhDAnB,iBAgDAmB,gBAAc,CAAA;UAJ1BL;IAAUZ,MAAA,CAAA;MACTC,UAAU;MACVC,MAAM;QAAC,SAAS;MAAsB;IACvC,CAAA;;;IAcYgB,yBAAAA,iBAAe;;;mBAAfA,kBAAe;AAAA;wBA7DfP,kBAAA;EAAAnC,MA6DA0C;EAAezC,WAAA,CAAA,CAAA,mBAAA,GAAA,CAAA,IAAA,qBAAA,EAAA,GAAA,CAAA,IAAA,mBAAA,EAAA,CAAA;EAAAC,WAAA,CAAA,GAAA,uBAAA;AAAA,CAAA;IAAfwC;;qDA7DApB,iBA6DAoB,iBAAe,CAAA;UAJ3BN;IAAUZ,MAAA,CAAA;MACTC,UAAqE;MACrEC,MAAM;QAAC,SAAS;MAAuB;IACxC,CAAA;;;IAkBYiB,wBAAAA,gBAAc;EAR3BpD,cAAA;AAaW,SAAKqD,QAAoB;EASnC;;;mBAdYD,iBAAc;AAAA;uBA9EdR,kBAAA;EAAAnC,MA8EA2C;EAAc1C,WAAA,CAAA,CAAA,kBAAA,CAAA;EAAAC,WAAA,CAAA,GAAA,wBAAA,mBAAA;EAAAC,UAAA;EAAAC,cAAA,SAAAyC,4BAAAvC,IAAAC,KAAA;AAAA,QAAAD,KAAA,GAAA;AA9EdE,MAAAC,YAAA,kCAAAF,IAAAqC,UAAA,KAAA;IAAA;EAAA;EAAAlC,QAAA;IAAAkC,OAAA;EAAA;EAAAjC,UAAA,CAAA,gBAAA;AAAA,CAAA;IA8EAgC;;qDA9EArB,iBA8EAqB,gBAAc,CAAA;UAR1BP;IAAUZ,MAAA,CAAA;MACTC,UAAU;MACVd,UAAU;MACVe,MAAM;QACJ,SAAS;QACT,0CAA0C;MAC3C;IACF,CAAA;;IAMUkB,OAAK,CAAA;YAAbX;;;;IA0BUa,uBAAAA,eAAa;;;mBAAbA,gBAAa;AAAA;AAAb,eAAAhD,OA7GAC,kBAAA;EAAAC,MA6GA8C;EAAa7C,WAAA,CAAA,CAAA,iBAAA,CAAA;EAAAC,WAAA,CAAA,GAAA,qBAAA;EAAAU,oBAAAzB;EAAA0B,OAAA;EAAAC,MAAA;EAAAiC,QAAA,CAAA,CAAA,GAAA,0BAAA,CAAA;EAAAhC,UAAA,SAAAiC,uBAAA1C,IAAAC,KAAA;AAAA,QAAAD,KAAA,GAAA;AA7GbE,MAAAS,gBAAA/B,GAAA;AAAAsB,MAAAU,aAAA,CGjDb;AHiDaV,MAAA+B,eAAA,GAAA,OAAA,CGjDb;AHiDa/B,MAAAU,aAAA,GAAA,CGjDb;AHiDaV,MAAAgC,aGjDb;AHiDahC,MAAAU,aAAA,GAAA,CGjDb;IAAA;EAAA;EAAAE,eAAA;EAAAC,iBAAA;AAAA,CAAA;IH8JayB;;qDA7GAxB,iBA6GAwB,eAAa,CAAA;UAPzBvB;IACWC,MAAA,CAAA;MAAAC,UAAA;MAEKL,eAAAO,oBAAkBC;MAChBP,iBAAAQ,wBAAwBC;MACnCJ,MAAA;QAAC,SAAS;MAAqB;MAACX,UAAA;IAAA,CAAA;;;IAe3BkC,uBAAAA,eAAa;;;mBAAbA,gBAAa;AAAA;sBA1Hbd,kBAAA;EAAAnC,MA0HAiD;EAAahD,WAAA,CAAA,CAAA,iBAAA,CAAA;EAAAC,WAAA,CAAA,GAAA,qBAAA;AAAA,CAAA;IAAb+C;;qDA1HA3B,iBA0HA2B,eAAa,CAAA;UAJzBb;IAAUZ,MAAA,CAAA;MACTC,UAAU;MACVC,MAAM;QAAC,SAAS;MAAqB;IACtC,CAAA;;;IAoBYwB,sBAAAA,cAAY;;;mBAAZA,eAAY;AAAA;qBA7IZf,kBAAA;EAAAnC,MA6IAkD;EAAYjD,WAAA,CAAA,CAAA,IAAA,kBAAA,EAAA,GAAA,CAAA,IAAA,gBAAA,EAAA,CAAA;EAAAC,WAAA,CAAA,GAAA,sBAAA,iBAAA;AAAA,CAAA;IAAZgD;;qDA7IA5B,iBA6IA4B,cAAY,CAAA;UAJxBd;IAAUZ,MAAA,CAAA;MACTC,UAAU;MACVC,MAAM;QAAC,SAAS;MAAoC;IACrD,CAAA;;;IAUYyB,wBAAAA,gBAAc;;;mBAAdA,iBAAc;AAAA;uBAtJdhB,kBAAA;EAAAnC,MAsJAmD;EAAclD,WAAA,CAAA,CAAA,IAAA,qBAAA,EAAA,GAAA,CAAA,IAAA,qBAAA,EAAA,CAAA;EAAAC,WAAA,CAAA,GAAA,yBAAA,iBAAA;AAAA,CAAA;IAAdiD;;qDAtJA7B,iBAsJA6B,gBAAc,CAAA;UAJ1Bf;IAAUZ,MAAA,CAAA;MACTC,UAAU;MACVC,MAAM;QAAC,SAAS;MAAuC;IACxD,CAAA;;;IAQY0B,wBAAAA,gBAAc;;;mBAAdA,iBAAc;AAAA;uBA7JdjB,kBAAA;EAAAnC,MA6JAoD;EAAcnD,WAAA,CAAA,CAAA,IAAA,qBAAA,EAAA,GAAA,CAAA,IAAA,sBAAA,EAAA,CAAA;EAAAC,WAAA,CAAA,GAAA,yBAAA,iBAAA;AAAA,CAAA;IAAdkD;;qDA7JA9B,iBA6JA8B,gBAAc,CAAA;UAJ1BhB;IAAUZ,MAAA,CAAA;MACTC,UAAU;MACVC,MAAM;QAAC,SAAS;MAAuC;IACxD,CAAA;;;IAQY2B,wBAAAA,gBAAc;;;mBAAdA,iBAAc;AAAA;uBApKdlB,kBAAA;EAAAnC,MAoKAqD;EAAcpD,WAAA,CAAA,CAAA,IAAA,qBAAA,EAAA,GAAA,CAAA,IAAA,qBAAA,EAAA,CAAA;EAAAC,WAAA,CAAA,GAAA,yBAAA,iBAAA;AAAA,CAAA;IAAdmD;;qDApKA/B,iBAoKA+B,gBAAc,CAAA;UAJ1BjB;IAAUZ,MAAA,CAAA;MACTC,UAAU;MACVC,MAAM;QAAC,SAAS;MAAuC;IACxD,CAAA;;;IAQY4B,wBAAAA,gBAAc;;;mBAAdA,iBAAc;AAAA;uBA3KdnB,kBAAA;EAAAnC,MA2KAsD;EAAcrD,WAAA,CAAA,CAAA,IAAA,qBAAA,EAAA,GAAA,CAAA,IAAA,sBAAA,EAAA,CAAA;EAAAC,WAAA,CAAA,GAAA,yBAAA,iBAAA;AAAA,CAAA;IAAdoD;;qDA3KAhC,iBA2KAgC,gBAAc,CAAA;UAJ1BlB;IAAUZ,MAAA,CAAA;MACTC,UAAU;MACVC,MAAM;QAAC,SAAS;MAAuC;IACxD,CAAA;;;IAgBY6B,uBAAAA,eAAa;;;mBAAbA,gBAAa;AAAA;sBA1LbpB,kBAAA;EAAAnC,MA0LAuD;EAAatD,WAAA,CAAA,CAAA,IAAA,mBAAA,EAAA,GAAA,CAAA,IAAA,iBAAA,EAAA,CAAA;EAAAC,WAAA,CAAA,GAAA,qBAAA;AAAA,CAAA;IAAbqD;;qDA1LAjC,iBA0LAiC,eAAa,CAAA;UAJzBnB;IAAUZ,MAAA,CAAA;MACTC,UAAU;MACVC,MAAM;QAAC,SAAS;MAAqB;IACtC,CAAA;;;AI9MD,IAAM8B,kBAAkB,CACtBlE,SACAqD,gBACAY,eACAd,gBACAQ,eACAH,eACAI,cACAG,gBACAD,gBACAD,gBACAT,iBACAR,cACAG,mBACAiB,cAAc;IAQHG,uBAAAA,eAAa;;;mBAAbA,gBAAa;AAAA;AAAb,eAAAC,OJDAC,iBAAA;EAAA3D,MICAyD;EAAaG,cAAA,CArBxBtE,SACAqD,gBACAY,eACAd,gBACAQ,eACAH,eACAI,cACAG,gBACAD,gBACAD,gBACAT,iBACAR,cACAG,mBACAiB,cAAc;EAAAO,SAAA,CAIJC,iBAAiBC,YAAY;EAAAC,SAAA,CAjBvC1E,SACAqD,gBACAY,eACAd,gBACAQ,eACAH,eACAI,cACAG,gBACAD,gBACAD,gBACAT,iBACAR,cACAG,mBACAiB,gBAK2BQ,eAAe;AAAA,CAAA;AAG/B,eAAAG,OJDAC,iBAAA;EAAAL,SAAA,CIHDC,iBAAiBC,cACAD,eAAe;AAAA,CAAA;IAG/BL;;qDJDAnC,iBICAmC,eAAa,CAAA;UALzBU;IAAS3C,MAAA,CAAA;MACRqC,SAAS,CAACC,iBAAiBC,YAAY;MACvCC,SAAS,CAACR,iBAAiBM,eAAe;MAC1CF,cAAcJ;IACf,CAAA;;;",
  "names": ["_c0", "_c1", "_c2", "_c3", "_c4", "MAT_CARD_CONFIG", "InjectionToken", "MatCard", "constructor", "config", "appearance", "ɵfac", "MatCard_Factory", "t", "ɵɵdirectiveInject", "ɵcmp", "ɵɵdefineComponent", "type", "selectors", "hostAttrs", "hostVars", "hostBindings", "MatCard_HostBindings", "rf", "ctx", "i0", "ɵɵclassProp", "inputs", "exportAs", "ngContentSelectors", "decls", "vars", "template", "MatCard_Template", "ɵɵprojectionDef", "ɵɵprojection", "styles", "encapsulation", "changeDetection", "ɵsetClassMetadata", "Component", "args", "selector", "host", "ViewEncapsulation", "None", "ChangeDetectionStrategy", "OnPush", "Inject", "Optional", "Input", "MatCardTitle", "ɵɵdefineDirective", "Directive", "MatCardTitleGroup", "MatCardTitleGroup_Template", "ɵɵelementStart", "ɵɵelementEnd", "MatCardContent", "MatCardSubtitle", "MatCardActions", "align", "MatCardActions_HostBindings", "MatCardHeader", "consts", "MatCardHeader_Template", "MatCardFooter", "MatCardImage", "MatCardSmImage", "MatCardMdImage", "MatCardLgImage", "MatCardXlImage", "MatCardAvatar", "CARD_DIRECTIVES", "MatCardModule", "ɵmod", "ɵɵdefineNgModule", "declarations", "imports", "MatCommonModule", "CommonModule", "exports", "ɵinj", "ɵɵdefineInjector", "NgModule"]
}
