{
  "version": 3,
  "sources": ["../../../../../../../src/cdk/accordion/accordion.ts", "../../../../../../../src/cdk/accordion/accordion-item.ts", "../../../../../../../src/cdk/accordion/accordion-module.ts", "../../../../../../../src/cdk/accordion/accordion_public_index.ts", "../../../../../../../src/material/expansion/accordion-base.ts", "../../../../../../../src/material/expansion/expansion-animations.ts", "../../../../../../../src/material/expansion/expansion-panel-base.ts", "../../../../../../../src/material/expansion/expansion-panel-content.ts", "../../../../../../../src/material/expansion/expansion-panel.ts", "../../../../../../../src/material/expansion/expansion-panel.html", "../../../../../../../src/material/expansion/expansion-panel-header.ts", "../../../../../../../src/material/expansion/expansion-panel-header.html", "../../../../../../../src/material/expansion/accordion.ts", "../../../../../../../src/material/expansion/expansion-module.ts", "../../../../../../../src/material/expansion/expansion_public_index.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  InjectionToken,\n  Input,\n  OnChanges,\n  OnDestroy,\n  SimpleChanges,\n  booleanAttribute,\n} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n/** Used to generate unique ID for each accordion. */\nlet nextId = 0;\n\n/**\n * Injection token that can be used to reference instances of `CdkAccordion`. It serves\n * as alternative token to the actual `CdkAccordion` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nexport const CDK_ACCORDION = new InjectionToken<CdkAccordion>('CdkAccordion');\n\n/**\n * Directive whose purpose is to manage the expanded state of CdkAccordionItem children.\n */\n@Directive({\n  selector: 'cdk-accordion, [cdkAccordion]',\n  exportAs: 'cdkAccordion',\n  providers: [{provide: CDK_ACCORDION, useExisting: CdkAccordion}],\n})\nexport class CdkAccordion implements OnDestroy, OnChanges {\n  /** Emits when the state of the accordion changes */\n  readonly _stateChanges = new Subject<SimpleChanges>();\n\n  /** Stream that emits true/false when openAll/closeAll is triggered. */\n  readonly _openCloseAllActions: Subject<boolean> = new Subject<boolean>();\n\n  /** A readonly id value to use for unique selection coordination. */\n  readonly id: string = `cdk-accordion-${nextId++}`;\n\n  /** Whether the accordion should allow multiple expanded accordion items simultaneously. */\n  @Input({transform: booleanAttribute}) multi: boolean = false;\n\n  /** Opens all enabled accordion items in an accordion where multi is enabled. */\n  openAll(): void {\n    if (this.multi) {\n      this._openCloseAllActions.next(true);\n    }\n  }\n\n  /** Closes all enabled accordion items. */\n  closeAll(): void {\n    this._openCloseAllActions.next(false);\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    this._stateChanges.next(changes);\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n    this._openCloseAllActions.complete();\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Output,\n  Directive,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Optional,\n  ChangeDetectorRef,\n  SkipSelf,\n  Inject,\n  booleanAttribute,\n} from '@angular/core';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {CDK_ACCORDION, CdkAccordion} from './accordion';\nimport {Subscription} from 'rxjs';\n\n/** Used to generate unique ID for each accordion item. */\nlet nextId = 0;\n\n/**\n * An basic directive expected to be extended and decorated as a component.  Sets up all\n * events and attributes needed to be managed by a CdkAccordion parent.\n */\n@Directive({\n  selector: 'cdk-accordion-item, [cdkAccordionItem]',\n  exportAs: 'cdkAccordionItem',\n  providers: [\n    // Provide `CDK_ACCORDION` as undefined to prevent nested accordion items from\n    // registering to the same accordion.\n    {provide: CDK_ACCORDION, useValue: undefined},\n  ],\n})\nexport class CdkAccordionItem implements OnDestroy {\n  /** Subscription to openAll/closeAll events. */\n  private _openCloseAllSubscription = Subscription.EMPTY;\n  /** Event emitted every time the AccordionItem is closed. */\n  @Output() readonly closed: EventEmitter<void> = new EventEmitter<void>();\n  /** Event emitted every time the AccordionItem is opened. */\n  @Output() readonly opened: EventEmitter<void> = new EventEmitter<void>();\n  /** Event emitted when the AccordionItem is destroyed. */\n  @Output() readonly destroyed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Emits whenever the expanded state of the accordion changes.\n   * Primarily used to facilitate two-way binding.\n   * @docs-private\n   */\n  @Output() readonly expandedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** The unique AccordionItem id. */\n  readonly id: string = `cdk-accordion-child-${nextId++}`;\n\n  /** Whether the AccordionItem is expanded. */\n  @Input({transform: booleanAttribute})\n  get expanded(): boolean {\n    return this._expanded;\n  }\n  set expanded(expanded: boolean) {\n    // Only emit events and update the internal value if the value changes.\n    if (this._expanded !== expanded) {\n      this._expanded = expanded;\n      this.expandedChange.emit(expanded);\n\n      if (expanded) {\n        this.opened.emit();\n        /**\n         * In the unique selection dispatcher, the id parameter is the id of the CdkAccordionItem,\n         * the name value is the id of the accordion.\n         */\n        const accordionId = this.accordion ? this.accordion.id : this.id;\n        this._expansionDispatcher.notify(this.id, accordionId);\n      } else {\n        this.closed.emit();\n      }\n\n      // Ensures that the animation will run when the value is set outside of an `@Input`.\n      // This includes cases like the open, close and toggle methods.\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _expanded = false;\n\n  /** Whether the AccordionItem is disabled. */\n  @Input({transform: booleanAttribute}) disabled: boolean = false;\n\n  /** Unregister function for _expansionDispatcher. */\n  private _removeUniqueSelectionListener: () => void = () => {};\n\n  constructor(\n    @Optional() @Inject(CDK_ACCORDION) @SkipSelf() public accordion: CdkAccordion,\n    private _changeDetectorRef: ChangeDetectorRef,\n    protected _expansionDispatcher: UniqueSelectionDispatcher,\n  ) {\n    this._removeUniqueSelectionListener = _expansionDispatcher.listen(\n      (id: string, accordionId: string) => {\n        if (\n          this.accordion &&\n          !this.accordion.multi &&\n          this.accordion.id === accordionId &&\n          this.id !== id\n        ) {\n          this.expanded = false;\n        }\n      },\n    );\n\n    // When an accordion item is hosted in an accordion, subscribe to open/close events.\n    if (this.accordion) {\n      this._openCloseAllSubscription = this._subscribeToOpenCloseAllActions();\n    }\n  }\n\n  /** Emits an event for the accordion item being destroyed. */\n  ngOnDestroy() {\n    this.opened.complete();\n    this.closed.complete();\n    this.destroyed.emit();\n    this.destroyed.complete();\n    this._removeUniqueSelectionListener();\n    this._openCloseAllSubscription.unsubscribe();\n  }\n\n  /** Toggles the expanded state of the accordion item. */\n  toggle(): void {\n    if (!this.disabled) {\n      this.expanded = !this.expanded;\n    }\n  }\n\n  /** Sets the expanded state of the accordion item to false. */\n  close(): void {\n    if (!this.disabled) {\n      this.expanded = false;\n    }\n  }\n\n  /** Sets the expanded state of the accordion item to true. */\n  open(): void {\n    if (!this.disabled) {\n      this.expanded = true;\n    }\n  }\n\n  private _subscribeToOpenCloseAllActions(): Subscription {\n    return this.accordion._openCloseAllActions.subscribe(expanded => {\n      // Only change expanded state if item is enabled\n      if (!this.disabled) {\n        this.expanded = expanded;\n      }\n    });\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CdkAccordion} from './accordion';\nimport {CdkAccordionItem} from './accordion-item';\n\n@NgModule({\n  exports: [CdkAccordion, CdkAccordionItem],\n  declarations: [CdkAccordion, CdkAccordionItem],\n})\nexport class CdkAccordionModule {}\n", "/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\nimport {CdkAccordion} from '@angular/cdk/accordion';\n\n/** MatAccordion's display modes. */\nexport type MatAccordionDisplayMode = 'default' | 'flat';\n\n/** MatAccordion's toggle positions. */\nexport type MatAccordionTogglePosition = 'before' | 'after';\n\n/**\n * Base interface for a `MatAccordion`.\n * @docs-private\n */\nexport interface MatAccordionBase extends CdkAccordion {\n  /** Whether the expansion indicator should be hidden. */\n  hideToggle: boolean;\n\n  /** Display mode used for all expansion panels in the accordion. */\n  displayMode: MatAccordionDisplayMode;\n\n  /** The position of the expansion indicator. */\n  togglePosition: MatAccordionTogglePosition;\n\n  /** Handles keyboard events coming in from the panel headers. */\n  _handleHeaderKeydown: (event: KeyboardEvent) => void;\n\n  /** Handles focus events on the panel headers. */\n  _handleHeaderFocus: (header: any) => void;\n}\n\n/**\n * Token used to provide a `MatAccordion` to `MatExpansionPanel`.\n * Used primarily to avoid circular imports between `MatAccordion` and `MatExpansionPanel`.\n */\nexport const MAT_ACCORDION = new InjectionToken<MatAccordionBase>('MAT_ACCORDION');\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  AnimationTriggerMetadata,\n  state,\n  style,\n  transition,\n  trigger,\n} from '@angular/animations';\n\n/** Time and timing curve for expansion panel animations. */\n// Note: Keep this in sync with the Sass variable for the panel header animation.\nexport const EXPANSION_PANEL_ANIMATION_TIMING = '225ms cubic-bezier(0.4,0.0,0.2,1)';\n\n/**\n * Animations used by the Material expansion panel.\n *\n * A bug in angular animation's `state` when ViewContainers are moved using ViewContainerRef.move()\n * causes the animation state of moved components to become `void` upon exit, and not update again\n * upon reentry into the DOM.  This can lead a to situation for the expansion panel where the state\n * of the panel is `expanded` or `collapsed` but the animation state is `void`.\n *\n * To correctly handle animating to the next state, we animate between `void` and `collapsed` which\n * are defined to have the same styles. Since angular animates from the current styles to the\n * destination state's style definition, in situations where we are moving from `void`'s styles to\n * `collapsed` this acts a noop since no style values change.\n *\n * In the case where angular's animation state is out of sync with the expansion panel's state, the\n * expansion panel being `expanded` and angular animations being `void`, the animation from the\n * `expanded`'s effective styles (though in a `void` animation state) to the collapsed state will\n * occur as expected.\n *\n * Angular Bug: https://github.com/angular/angular/issues/18847\n *\n * @docs-private\n */\nexport const matExpansionAnimations: {\n  readonly indicatorRotate: AnimationTriggerMetadata;\n  readonly bodyExpansion: AnimationTriggerMetadata;\n} = {\n  /** Animation that rotates the indicator arrow. */\n  indicatorRotate: trigger('indicatorRotate', [\n    state('collapsed, void', style({transform: 'rotate(0deg)'})),\n    state('expanded', style({transform: 'rotate(180deg)'})),\n    transition(\n      'expanded <=> collapsed, void => collapsed',\n      animate(EXPANSION_PANEL_ANIMATION_TIMING),\n    ),\n  ]),\n  /** Animation that expands and collapses the panel content. */\n  bodyExpansion: trigger('bodyExpansion', [\n    state('collapsed, void', style({height: '0px', visibility: 'hidden'})),\n    // Clear the `visibility` while open, otherwise the content will be visible when placed in\n    // a parent that's `visibility: hidden`, because `visibility` doesn't apply to descendants\n    // that have a `visibility` of their own (see #27436).\n    state('expanded', style({height: '*', visibility: ''})),\n    transition(\n      'expanded <=> collapsed, void => collapsed',\n      animate(EXPANSION_PANEL_ANIMATION_TIMING),\n    ),\n  ]),\n};\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\nimport {CdkAccordionItem} from '@angular/cdk/accordion';\n\n/**\n * Base interface for a `MatExpansionPanel`.\n * @docs-private\n */\nexport interface MatExpansionPanelBase extends CdkAccordionItem {\n  /** Whether the toggle indicator should be hidden. */\n  hideToggle: boolean;\n}\n\n/**\n * Token used to provide a `MatExpansionPanel` to `MatExpansionPanelContent`.\n * Used to avoid circular imports between `MatExpansionPanel` and `MatExpansionPanelContent`.\n */\nexport const MAT_EXPANSION_PANEL = new InjectionToken<MatExpansionPanelBase>('MAT_EXPANSION_PANEL');\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef, Inject, Optional} from '@angular/core';\nimport {MAT_EXPANSION_PANEL, MatExpansionPanelBase} from './expansion-panel-base';\n\n/**\n * Expansion panel content that will be rendered lazily\n * after the panel is opened for the first time.\n */\n@Directive({\n  selector: 'ng-template[matExpansionPanelContent]',\n})\nexport class MatExpansionPanelContent {\n  constructor(\n    public _template: TemplateRef<any>,\n    @Inject(MAT_EXPANSION_PANEL) @Optional() public _expansionPanel?: MatExpansionPanelBase,\n  ) {}\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {CdkAccordionItem} from '@angular/cdk/accordion';\nimport {BooleanInput, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  SkipSelf,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {Subject} from 'rxjs';\nimport {distinctUntilChanged, filter, startWith, take} from 'rxjs/operators';\nimport {MatAccordionBase, MatAccordionTogglePosition, MAT_ACCORDION} from './accordion-base';\nimport {matExpansionAnimations} from './expansion-animations';\nimport {MAT_EXPANSION_PANEL} from './expansion-panel-base';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\n\n/** MatExpansionPanel's states. */\nexport type MatExpansionPanelState = 'expanded' | 'collapsed';\n\n/** Counter for generating unique element ids. */\nlet uniqueId = 0;\n\n/**\n * Object that can be used to override the default options\n * for all of the expansion panels in a module.\n */\nexport interface MatExpansionPanelDefaultOptions {\n  /** Height of the header while the panel is expanded. */\n  expandedHeight: string;\n\n  /** Height of the header while the panel is collapsed. */\n  collapsedHeight: string;\n\n  /** Whether the toggle indicator should be hidden. */\n  hideToggle: boolean;\n}\n\n/**\n * Injection token that can be used to configure the default\n * options for the expansion panel component.\n */\nexport const MAT_EXPANSION_PANEL_DEFAULT_OPTIONS =\n  new InjectionToken<MatExpansionPanelDefaultOptions>('MAT_EXPANSION_PANEL_DEFAULT_OPTIONS');\n\n/**\n * This component can be used as a single element to show expandable content, or as one of\n * multiple children of an element with the MatAccordion directive attached.\n */\n@Component({\n  styleUrls: ['expansion-panel.css'],\n  selector: 'mat-expansion-panel',\n  exportAs: 'matExpansionPanel',\n  templateUrl: 'expansion-panel.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled', 'expanded'],\n  outputs: ['opened', 'closed', 'expandedChange'],\n  animations: [matExpansionAnimations.bodyExpansion],\n  providers: [\n    // Provide MatAccordion as undefined to prevent nested expansion panels from registering\n    // to the same accordion.\n    {provide: MAT_ACCORDION, useValue: undefined},\n    {provide: MAT_EXPANSION_PANEL, useExisting: MatExpansionPanel},\n  ],\n  host: {\n    'class': 'mat-expansion-panel',\n    '[class.mat-expanded]': 'expanded',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    '[class.mat-expansion-panel-spacing]': '_hasSpacing()',\n  },\n})\nexport class MatExpansionPanel\n  extends CdkAccordionItem\n  implements AfterContentInit, OnChanges, OnDestroy\n{\n  private _document: Document;\n  private _hideToggle = false;\n  private _togglePosition: MatAccordionTogglePosition;\n\n  /** Whether the toggle indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean {\n    return this._hideToggle || (this.accordion && this.accordion.hideToggle);\n  }\n  set hideToggle(value: BooleanInput) {\n    this._hideToggle = coerceBooleanProperty(value);\n  }\n\n  /** The position of the expansion indicator. */\n  @Input()\n  get togglePosition(): MatAccordionTogglePosition {\n    return this._togglePosition || (this.accordion && this.accordion.togglePosition);\n  }\n  set togglePosition(value: MatAccordionTogglePosition) {\n    this._togglePosition = value;\n  }\n\n  /** An event emitted after the body's expansion animation happens. */\n  @Output() readonly afterExpand = new EventEmitter<void>();\n\n  /** An event emitted after the body's collapse animation happens. */\n  @Output() readonly afterCollapse = new EventEmitter<void>();\n\n  /** Stream that emits for changes in `@Input` properties. */\n  readonly _inputChanges = new Subject<SimpleChanges>();\n\n  /** Optionally defined accordion the expansion panel belongs to. */\n  override accordion: MatAccordionBase;\n\n  /** Content that will be rendered lazily. */\n  @ContentChild(MatExpansionPanelContent) _lazyContent: MatExpansionPanelContent;\n\n  /** Element containing the panel's user-provided content. */\n  @ViewChild('body') _body: ElementRef<HTMLElement>;\n\n  /** Portal holding the user's content. */\n  _portal: TemplatePortal;\n\n  /** ID for the associated header element. Used for a11y labelling. */\n  _headerId = `mat-expansion-panel-header-${uniqueId++}`;\n\n  /** Stream of body animation done events. */\n  readonly _bodyAnimationDone = new Subject<AnimationEvent>();\n\n  constructor(\n    @Optional() @SkipSelf() @Inject(MAT_ACCORDION) accordion: MatAccordionBase,\n    _changeDetectorRef: ChangeDetectorRef,\n    _uniqueSelectionDispatcher: UniqueSelectionDispatcher,\n    private _viewContainerRef: ViewContainerRef,\n    @Inject(DOCUMENT) _document: any,\n    @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode: string,\n    @Inject(MAT_EXPANSION_PANEL_DEFAULT_OPTIONS)\n    @Optional()\n    defaultOptions?: MatExpansionPanelDefaultOptions,\n  ) {\n    super(accordion, _changeDetectorRef, _uniqueSelectionDispatcher);\n    this.accordion = accordion;\n    this._document = _document;\n\n    // We need a Subject with distinctUntilChanged, because the `done` event\n    // fires twice on some browsers. See https://github.com/angular/angular/issues/24084\n    this._bodyAnimationDone\n      .pipe(\n        distinctUntilChanged((x, y) => {\n          return x.fromState === y.fromState && x.toState === y.toState;\n        }),\n      )\n      .subscribe(event => {\n        if (event.fromState !== 'void') {\n          if (event.toState === 'expanded') {\n            this.afterExpand.emit();\n          } else if (event.toState === 'collapsed') {\n            this.afterCollapse.emit();\n          }\n        }\n      });\n\n    if (defaultOptions) {\n      this.hideToggle = defaultOptions.hideToggle;\n    }\n  }\n\n  /** Determines whether the expansion panel should have spacing between it and its siblings. */\n  _hasSpacing(): boolean {\n    if (this.accordion) {\n      return this.expanded && this.accordion.displayMode === 'default';\n    }\n    return false;\n  }\n\n  /** Gets the expanded state string. */\n  _getExpandedState(): MatExpansionPanelState {\n    return this.expanded ? 'expanded' : 'collapsed';\n  }\n\n  /** Toggles the expanded state of the expansion panel. */\n  override toggle(): void {\n    this.expanded = !this.expanded;\n  }\n\n  /** Sets the expanded state of the expansion panel to false. */\n  override close(): void {\n    this.expanded = false;\n  }\n\n  /** Sets the expanded state of the expansion panel to true. */\n  override open(): void {\n    this.expanded = true;\n  }\n\n  ngAfterContentInit() {\n    if (this._lazyContent && this._lazyContent._expansionPanel === this) {\n      // Render the content as soon as the panel becomes open.\n      this.opened\n        .pipe(\n          startWith(null),\n          filter(() => this.expanded && !this._portal),\n          take(1),\n        )\n        .subscribe(() => {\n          this._portal = new TemplatePortal(this._lazyContent._template, this._viewContainerRef);\n        });\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    this._inputChanges.next(changes);\n  }\n\n  override ngOnDestroy() {\n    super.ngOnDestroy();\n    this._bodyAnimationDone.complete();\n    this._inputChanges.complete();\n  }\n\n  /** Checks whether the expansion panel's content contains the currently-focused element. */\n  _containsFocus(): boolean {\n    if (this._body) {\n      const focusedElement = this._document.activeElement;\n      const bodyElement = this._body.nativeElement;\n      return focusedElement === bodyElement || bodyElement.contains(focusedElement);\n    }\n\n    return false;\n  }\n}\n\n/**\n * Actions of a `<mat-expansion-panel>`.\n */\n@Directive({\n  selector: 'mat-action-row',\n  host: {\n    class: 'mat-action-row',\n  },\n})\nexport class MatExpansionPanelActionRow {}\n", "<ng-content select=\"mat-expansion-panel-header\"></ng-content>\n<div class=\"mat-expansion-panel-content\"\n     role=\"region\"\n     [@bodyExpansion]=\"_getExpandedState()\"\n     (@bodyExpansion.done)=\"_bodyAnimationDone.next($event)\"\n     [attr.aria-labelledby]=\"_headerId\"\n     [id]=\"id\"\n     #body>\n  <div class=\"mat-expansion-panel-body\">\n    <ng-content></ng-content>\n    <ng-template [cdkPortalOutlet]=\"_portal\"></ng-template>\n  </div>\n  <ng-content select=\"mat-action-row\"></ng-content>\n</div>\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {ENTER, hasModifierKey, SPACE} from '@angular/cdk/keycodes';\nimport {\n  AfterViewInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Host,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {HasTabIndex, mixinTabIndex} from '@angular/material/core';\nimport {EMPTY, merge, Subscription} from 'rxjs';\nimport {filter} from 'rxjs/operators';\nimport {MatAccordionTogglePosition} from './accordion-base';\nimport {matExpansionAnimations} from './expansion-animations';\nimport {\n  MatExpansionPanel,\n  MatExpansionPanelDefaultOptions,\n  MAT_EXPANSION_PANEL_DEFAULT_OPTIONS,\n} from './expansion-panel';\n\n// Boilerplate for applying mixins to MatExpansionPanelHeader.\n/** @docs-private */\nabstract class MatExpansionPanelHeaderBase {\n  abstract readonly disabled: boolean;\n}\nconst _MatExpansionPanelHeaderMixinBase = mixinTabIndex(MatExpansionPanelHeaderBase);\n\n/**\n * Header element of a `<mat-expansion-panel>`.\n */\n@Component({\n  selector: 'mat-expansion-panel-header',\n  styleUrls: ['expansion-panel-header.css'],\n  templateUrl: 'expansion-panel-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['tabIndex'],\n  animations: [matExpansionAnimations.indicatorRotate],\n  host: {\n    'class': 'mat-expansion-panel-header mat-focus-indicator',\n    'role': 'button',\n    '[attr.id]': 'panel._headerId',\n    '[attr.tabindex]': 'tabIndex',\n    '[attr.aria-controls]': '_getPanelId()',\n    '[attr.aria-expanded]': '_isExpanded()',\n    '[attr.aria-disabled]': 'panel.disabled',\n    '[class.mat-expanded]': '_isExpanded()',\n    '[class.mat-expansion-toggle-indicator-after]': `_getTogglePosition() === 'after'`,\n    '[class.mat-expansion-toggle-indicator-before]': `_getTogglePosition() === 'before'`,\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    '[style.height]': '_getHeaderHeight()',\n    '(click)': '_toggle()',\n    '(keydown)': '_keydown($event)',\n  },\n})\nexport class MatExpansionPanelHeader\n  extends _MatExpansionPanelHeaderMixinBase\n  implements AfterViewInit, OnDestroy, FocusableOption, HasTabIndex\n{\n  private _parentChangeSubscription = Subscription.EMPTY;\n\n  constructor(\n    @Host() public panel: MatExpansionPanel,\n    private _element: ElementRef,\n    private _focusMonitor: FocusMonitor,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Inject(MAT_EXPANSION_PANEL_DEFAULT_OPTIONS)\n    @Optional()\n    defaultOptions?: MatExpansionPanelDefaultOptions,\n    @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\n    @Attribute('tabindex') tabIndex?: string,\n  ) {\n    super();\n    const accordionHideToggleChange = panel.accordion\n      ? panel.accordion._stateChanges.pipe(\n          filter(changes => !!(changes['hideToggle'] || changes['togglePosition'])),\n        )\n      : EMPTY;\n    this.tabIndex = parseInt(tabIndex || '') || 0;\n\n    // Since the toggle state depends on an @Input on the panel, we\n    // need to subscribe and trigger change detection manually.\n    this._parentChangeSubscription = merge(\n      panel.opened,\n      panel.closed,\n      accordionHideToggleChange,\n      panel._inputChanges.pipe(\n        filter(changes => {\n          return !!(changes['hideToggle'] || changes['disabled'] || changes['togglePosition']);\n        }),\n      ),\n    ).subscribe(() => this._changeDetectorRef.markForCheck());\n\n    // Avoids focus being lost if the panel contained the focused element and was closed.\n    panel.closed\n      .pipe(filter(() => panel._containsFocus()))\n      .subscribe(() => _focusMonitor.focusVia(_element, 'program'));\n\n    if (defaultOptions) {\n      this.expandedHeight = defaultOptions.expandedHeight;\n      this.collapsedHeight = defaultOptions.collapsedHeight;\n    }\n  }\n\n  /** Height of the header while the panel is expanded. */\n  @Input() expandedHeight: string;\n\n  /** Height of the header while the panel is collapsed. */\n  @Input() collapsedHeight: string;\n\n  /**\n   * Whether the associated panel is disabled. Implemented as a part of `FocusableOption`.\n   * @docs-private\n   */\n  get disabled(): boolean {\n    return this.panel.disabled;\n  }\n\n  /** Toggles the expanded state of the panel. */\n  _toggle(): void {\n    if (!this.disabled) {\n      this.panel.toggle();\n    }\n  }\n\n  /** Gets whether the panel is expanded. */\n  _isExpanded(): boolean {\n    return this.panel.expanded;\n  }\n\n  /** Gets the expanded state string of the panel. */\n  _getExpandedState(): string {\n    return this.panel._getExpandedState();\n  }\n\n  /** Gets the panel id. */\n  _getPanelId(): string {\n    return this.panel.id;\n  }\n\n  /** Gets the toggle position for the header. */\n  _getTogglePosition(): MatAccordionTogglePosition {\n    return this.panel.togglePosition;\n  }\n\n  /** Gets whether the expand indicator should be shown. */\n  _showToggle(): boolean {\n    return !this.panel.hideToggle && !this.panel.disabled;\n  }\n\n  /**\n   * Gets the current height of the header. Null if no custom height has been\n   * specified, and if the default height from the stylesheet should be used.\n   */\n  _getHeaderHeight(): string | null {\n    const isExpanded = this._isExpanded();\n    if (isExpanded && this.expandedHeight) {\n      return this.expandedHeight;\n    } else if (!isExpanded && this.collapsedHeight) {\n      return this.collapsedHeight;\n    }\n    return null;\n  }\n\n  /** Handle keydown event calling to toggle() if appropriate. */\n  _keydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      // Toggle for space and enter keys.\n      case SPACE:\n      case ENTER:\n        if (!hasModifierKey(event)) {\n          event.preventDefault();\n          this._toggle();\n        }\n\n        break;\n      default:\n        if (this.panel.accordion) {\n          this.panel.accordion._handleHeaderKeydown(event);\n        }\n\n        return;\n    }\n  }\n\n  /**\n   * Focuses the panel header. Implemented as a part of `FocusableOption`.\n   * @param origin Origin of the action that triggered the focus.\n   * @docs-private\n   */\n  focus(origin?: FocusOrigin, options?: FocusOptions) {\n    if (origin) {\n      this._focusMonitor.focusVia(this._element, origin, options);\n    } else {\n      this._element.nativeElement.focus(options);\n    }\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor.monitor(this._element).subscribe(origin => {\n      if (origin && this.panel.accordion) {\n        this.panel.accordion._handleHeaderFocus(this);\n      }\n    });\n  }\n\n  ngOnDestroy() {\n    this._parentChangeSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element);\n  }\n}\n\n/**\n * Description element of a `<mat-expansion-panel-header>`.\n */\n@Directive({\n  selector: 'mat-panel-description',\n  host: {\n    class: 'mat-expansion-panel-header-description',\n  },\n})\nexport class MatExpansionPanelDescription {}\n\n/**\n * Title element of a `<mat-expansion-panel-header>`.\n */\n@Directive({\n  selector: 'mat-panel-title',\n  host: {\n    class: 'mat-expansion-panel-header-title',\n  },\n})\nexport class MatExpansionPanelTitle {}\n", "<span class=\"mat-content\" [class.mat-content-hide-toggle]=\"!_showToggle()\">\n  <ng-content select=\"mat-panel-title\"></ng-content>\n  <ng-content select=\"mat-panel-description\"></ng-content>\n  <ng-content></ng-content>\n</span>\n\n@if (_showToggle()) {\n  <span [@indicatorRotate]=\"_getExpandedState()\" class=\"mat-expansion-indicator\"></span>\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  Input,\n  ContentChildren,\n  QueryList,\n  AfterContentInit,\n  OnDestroy,\n} from '@angular/core';\nimport {BooleanInput, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CdkAccordion} from '@angular/cdk/accordion';\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {startWith} from 'rxjs/operators';\nimport {\n  MAT_ACCORDION,\n  MatAccordionBase,\n  MatAccordionDisplayMode,\n  MatAccordionTogglePosition,\n} from './accordion-base';\nimport {MatExpansionPanelHeader} from './expansion-panel-header';\n\n/**\n * Directive for a Material Design Accordion.\n */\n@Directive({\n  selector: 'mat-accordion',\n  exportAs: 'matAccordion',\n  inputs: ['multi'],\n  providers: [\n    {\n      provide: MAT_ACCORDION,\n      useExisting: MatAccordion,\n    },\n  ],\n  host: {\n    class: 'mat-accordion',\n    // Class binding which is only used by the test harness as there is no other\n    // way for the harness to detect if multiple panel support is enabled.\n    '[class.mat-accordion-multi]': 'this.multi',\n  },\n})\nexport class MatAccordion\n  extends CdkAccordion\n  implements MatAccordionBase, AfterContentInit, OnDestroy\n{\n  private _keyManager: FocusKeyManager<MatExpansionPanelHeader>;\n\n  /** Headers belonging to this accordion. */\n  private _ownHeaders = new QueryList<MatExpansionPanelHeader>();\n\n  /** All headers inside the accordion. Includes headers inside nested accordions. */\n  @ContentChildren(MatExpansionPanelHeader, {descendants: true})\n  _headers: QueryList<MatExpansionPanelHeader>;\n\n  /** Whether the expansion indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean {\n    return this._hideToggle;\n  }\n  set hideToggle(show: BooleanInput) {\n    this._hideToggle = coerceBooleanProperty(show);\n  }\n  private _hideToggle: boolean = false;\n\n  /**\n   * Display mode used for all expansion panels in the accordion. Currently two display\n   * modes exist:\n   *  default - a gutter-like spacing is placed around any expanded panel, placing the expanded\n   *     panel at a different elevation from the rest of the accordion.\n   *  flat - no spacing is placed around expanded panels, showing all panels at the same\n   *     elevation.\n   */\n  @Input() displayMode: MatAccordionDisplayMode = 'default';\n\n  /** The position of the expansion indicator. */\n  @Input() togglePosition: MatAccordionTogglePosition = 'after';\n\n  ngAfterContentInit() {\n    this._headers.changes\n      .pipe(startWith(this._headers))\n      .subscribe((headers: QueryList<MatExpansionPanelHeader>) => {\n        this._ownHeaders.reset(headers.filter(header => header.panel.accordion === this));\n        this._ownHeaders.notifyOnChanges();\n      });\n\n    this._keyManager = new FocusKeyManager(this._ownHeaders).withWrap().withHomeAndEnd();\n  }\n\n  /** Handles keyboard events coming in from the panel headers. */\n  _handleHeaderKeydown(event: KeyboardEvent) {\n    this._keyManager.onKeydown(event);\n  }\n\n  _handleHeaderFocus(header: MatExpansionPanelHeader) {\n    this._keyManager.updateActiveItem(header);\n  }\n\n  override ngOnDestroy() {\n    super.ngOnDestroy();\n    this._keyManager?.destroy();\n    this._ownHeaders.destroy();\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkAccordionModule} from '@angular/cdk/accordion';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatAccordion} from './accordion';\nimport {MatExpansionPanel, MatExpansionPanelActionRow} from './expansion-panel';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {\n  MatExpansionPanelDescription,\n  MatExpansionPanelHeader,\n  MatExpansionPanelTitle,\n} from './expansion-panel-header';\n\n@NgModule({\n  imports: [MatCommonModule, CdkAccordionModule, PortalModule],\n  exports: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n  declarations: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n})\nexport class MatExpansionModule {}\n", "/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],
  "mappings": "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",
  "names": ["nextId$1", "CDK_ACCORDION", "InjectionToken", "CdkAccordion", "constructor", "_stateChanges", "Subject", "_openCloseAllActions", "id", "multi", "openAll", "next", "closeAll", "ngOnChanges", "changes", "ngOnDestroy", "complete", "ɵdir", "selectors", "inputs", "booleanAttribute", "exportAs", "features", "provide", "useExisting", "Directive", "args", "selector", "providers", "Input", "transform", "nextId", "CdkAccordionItem", "expanded", "_expanded", "expandedChange", "emit", "opened", "accordionId", "accordion", "_expansionDispatcher", "notify", "closed", "_changeDetectorRef", "markForCheck", "_openCloseAllSubscription", "Subscription", "EMPTY", "EventEmitter", "destroyed", "disabled", "_removeUniqueSelectionListener", "listen", "_subscribeToOpenCloseAllActions", "unsubscribe", "toggle", "close", "open", "subscribe", "ɵfac", "CdkAccordionItem_Factory", "t", "ChangeDetectorRef", "UniqueSelectionDispatcher", "outputs", "useValue", "undefined", "Optional", "Inject", "SkipSelf", "Output", "CdkAccordionModule", "ɵmod", "declarations", "exports", "NgModule", "_c0", "MatExpansionPanel_ng_template_5_Template", "rf", "ctx", "_c1", "_c2", "MatExpansionPanelHeader_Conditional_4_Template", "i0", "ɵɵelement", "ctx_r0", "ɵɵnextContext", "ɵɵproperty", "_getExpandedState", "_c3", "_c4", "MAT_ACCORDION", "InjectionToken", "EXPANSION_PANEL_ANIMATION_TIMING", "matExpansionAnimations", "indicatorRotate", "trigger", "state", "style", "transform", "transition", "animate", "bodyExpansion", "height", "visibility", "MAT_EXPANSION_PANEL", "MatExpansionPanelContent", "constructor", "_template", "_expansionPanel", "ɵfac", "MatExpansionPanelContent_Factory", "t", "ɵɵdirectiveInject", "TemplateRef", "ɵɵdefineDirective", "type", "selectors", "ɵsetClassMetadata", "Directive", "args", "selector", "Inject", "Optional", "uniqueId", "MAT_EXPANSION_PANEL_DEFAULT_OPTIONS", "MatExpansionPanel", "CdkAccordionItem", "hideToggle", "_hideToggle", "accordion", "value", "coerceBooleanProperty", "togglePosition", "_togglePosition", "_changeDetectorRef", "_uniqueSelectionDispatcher", "_viewContainerRef", "_document", "_animationMode", "defaultOptions", "afterExpand", "EventEmitter", "afterCollapse", "_inputChanges", "Subject", "_headerId", "_bodyAnimationDone", "pipe", "distinctUntilChanged", "x", "y", "fromState", "toState", "subscribe", "event", "emit", "_hasSpacing", "expanded", "displayMode", "toggle", "close", "open", "ngAfterContentInit", "_lazyContent", "opened", "startWith", "filter", "_portal", "take", "TemplatePortal", "ngOnChanges", "changes", "next", "ngOnDestroy", "complete", "_containsFocus", "_body", "focusedElement", "activeElement", "bodyElement", "nativeElement", "contains", "MatExpansionPanel_Factory", "ChangeDetectorRef", "UniqueSelectionDispatcher", "ViewContainerRef", "DOCUMENT", "ANIMATION_MODULE_TYPE", "ɵcmp", "ɵɵdefineComponent", "contentQueries", "MatExpansionPanel_ContentQueries", "dirIndex", "ɵɵcontentQuery", "_t", "ɵɵqueryRefresh", "ɵɵloadQuery", "first", "viewQuery", "MatExpansionPanel_Query", "ɵɵviewQuery", "hostAttrs", "hostVars", "hostBindings", "MatExpansionPanel_HostBindings", "ɵɵclassProp", "inputs", "disabled", "outputs", "closed", "expandedChange", "exportAs", "features", "ɵɵProvidersFeature", "provide", "useValue", "undefined", "useExisting", "ɵɵInheritDefinitionFeature", "ɵɵNgOnChangesFeature", "ngContentSelectors", "decls", "vars", "consts", "template", "MatExpansionPanel_Template", "ɵɵprojectionDef", "ɵɵprojection", "ɵɵelementStart", "ɵɵlistener", "MatExpansionPanel_Template_div_animation_bodyExpansion_done_1_listener", "$event", "ɵɵtemplate", "ɵɵelementEnd", "ɵɵadvance", "id", "ɵɵattribute", "dependencies", "CdkPortalOutlet", "styles", "encapsulation", "data", "animation", "changeDetection", "Component", "ViewEncapsulation", "None", "ChangeDetectionStrategy", "OnPush", "animations", "providers", "host", "SkipSelf", "Input", "Output", "ContentChild", "ViewChild", "MatExpansionPanelActionRow", "class", "MatExpansionPanelHeaderBase", "_MatExpansionPanelHeaderMixinBase", "mixinTabIndex", "MatExpansionPanelHeader", "panel", "_element", "_focusMonitor", "tabIndex", "_parentChangeSubscription", "Subscription", "EMPTY", "accordionHideToggleChange", "_stateChanges", "parseInt", "merge", "markForCheck", "focusVia", "expandedHeight", "collapsedHeight", "_toggle", "_isExpanded", "_getPanelId", "_getTogglePosition", "_showToggle", "_getHeaderHeight", "isExpanded", "_keydown", "keyCode", "SPACE", "ENTER", "hasModifierKey", "preventDefault", "_handleHeaderKeydown", "focus", "origin", "options", "ngAfterViewInit", "monitor", "_handleHeaderFocus", "unsubscribe", "stopMonitoring", "MatExpansionPanelHeader_Factory", "ElementRef", "FocusMonitor", "ɵɵinjectAttribute", "MatExpansionPanelHeader_HostBindings", "MatExpansionPanelHeader_click_HostBindingHandler", "MatExpansionPanelHeader_keydown_HostBindingHandler", "ɵɵstyleProp", "MatExpansionPanelHeader_Template", "ɵɵconditional", "Host", "Attribute", "MatExpansionPanelDescription", "MatExpansionPanelTitle", "MatAccordion", "CdkAccordion", "_ownHeaders", "QueryList", "show", "_headers", "headers", "reset", "header", "notifyOnChanges", "_keyManager", "FocusKeyManager", "withWrap", "withHomeAndEnd", "onKeydown", "updateActiveItem", "destroy", "ɵɵgetInheritedFactory", "ɵdir", "MatAccordion_ContentQueries", "MatAccordion_HostBindings", "multi", "ContentChildren", "descendants", "MatExpansionModule", "ɵmod", "ɵɵdefineNgModule", "declarations", "imports", "MatCommonModule", "CdkAccordionModule", "PortalModule", "exports", "ɵinj", "ɵɵdefineInjector", "NgModule"]
}
