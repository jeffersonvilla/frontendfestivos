{
  "version": 3,
  "sources": ["../../../../../../../src/material/checkbox/checkbox-config.ts", "../../../../../../../src/material/checkbox/checkbox.ts", "../../../../../../../src/material/checkbox/checkbox.html", "../../../../../../../src/material/checkbox/checkbox-required-validator.ts", "../../../../../../../src/material/checkbox/module.ts", "../../../../../../../src/material/checkbox/checkbox_public_index.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\nimport {ThemePalette} from '@angular/material/core';\n\n/** Default `mat-checkbox` options that can be overridden. */\nexport interface MatCheckboxDefaultOptions {\n  /** Default theme color palette to be used for checkboxes. */\n  color?: ThemePalette;\n  /** Default checkbox click action for checkboxes. */\n  clickAction?: MatCheckboxClickAction;\n}\n\n/** Injection token to be used to override the default options for `mat-checkbox`. */\nexport const MAT_CHECKBOX_DEFAULT_OPTIONS = new InjectionToken<MatCheckboxDefaultOptions>(\n  'mat-checkbox-default-options',\n  {\n    providedIn: 'root',\n    factory: MAT_CHECKBOX_DEFAULT_OPTIONS_FACTORY,\n  },\n);\n\n/** @docs-private */\nexport function MAT_CHECKBOX_DEFAULT_OPTIONS_FACTORY(): MatCheckboxDefaultOptions {\n  return {\n    color: 'accent',\n    clickAction: 'check-indeterminate',\n  };\n}\n\n/**\n * Checkbox click action when user click on input element.\n * noop: Do not toggle checked or indeterminate.\n * check: Only toggle checked status, ignore indeterminate.\n * check-indeterminate: Toggle checked status, set indeterminate to false. Default behavior.\n * undefined: Same as `check-indeterminate`.\n */\nexport type MatCheckboxClickAction = 'noop' | 'check' | 'check-indeterminate' | undefined;\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterViewInit,\n  Attribute,\n  booleanAttribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  numberAttribute,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {MatRipple} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {FocusableOption} from '@angular/cdk/a11y';\nimport {\n  MAT_CHECKBOX_DEFAULT_OPTIONS,\n  MAT_CHECKBOX_DEFAULT_OPTIONS_FACTORY,\n  MatCheckboxDefaultOptions,\n} from './checkbox-config';\n\n/**\n * Represents the different states that require custom transitions between them.\n * @docs-private\n */\nexport const enum TransitionCheckState {\n  /** The initial state of the component before any user interaction. */\n  Init,\n  /** The state representing the component when it's becoming checked. */\n  Checked,\n  /** The state representing the component when it's becoming unchecked. */\n  Unchecked,\n  /** The state representing the component when it's becoming indeterminate. */\n  Indeterminate,\n}\n\nexport const MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatCheckbox),\n  multi: true,\n};\n\n/** Change event object emitted by checkbox. */\nexport class MatCheckboxChange {\n  /** The source checkbox of the event. */\n  source: MatCheckbox;\n  /** The new `checked` value of the checkbox. */\n  checked: boolean;\n}\n\n// Increasing integer for generating unique ids for checkbox components.\nlet nextUniqueId = 0;\n\n// Default checkbox configuration.\nconst defaults = MAT_CHECKBOX_DEFAULT_OPTIONS_FACTORY();\n\n@Component({\n  selector: 'mat-checkbox',\n  templateUrl: 'checkbox.html',\n  styleUrls: ['checkbox.css'],\n  host: {\n    'class': 'mat-mdc-checkbox',\n    '[attr.tabindex]': 'null',\n    '[attr.aria-label]': 'null',\n    '[attr.aria-labelledby]': 'null',\n    '[class._mat-animation-noopable]': `_animationMode === 'NoopAnimations'`,\n    '[class.mdc-checkbox--disabled]': 'disabled',\n    '[id]': 'id',\n    // Add classes that users can use to more easily target disabled or checked checkboxes.\n    '[class.mat-mdc-checkbox-disabled]': 'disabled',\n    '[class.mat-mdc-checkbox-checked]': 'checked',\n    '[class]': 'color ? \"mat-\" + color : \"mat-accent\"',\n  },\n  providers: [MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR],\n  exportAs: 'matCheckbox',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCheckbox implements AfterViewInit, ControlValueAccessor, FocusableOption {\n  /** Focuses the checkbox. */\n  focus() {\n    this._inputElement.nativeElement.focus();\n  }\n\n  /** Creates the change event that will be emitted by the checkbox. */\n  protected _createChangeEvent(isChecked: boolean) {\n    const event = new MatCheckboxChange();\n    event.source = this;\n    event.checked = isChecked;\n    return event;\n  }\n\n  /** Gets the element on which to add the animation CSS classes. */\n  protected _getAnimationTargetElement() {\n    return this._inputElement?.nativeElement;\n  }\n\n  /** CSS classes to add when transitioning between the different checkbox states. */\n  protected _animationClasses = {\n    uncheckedToChecked: 'mdc-checkbox--anim-unchecked-checked',\n    uncheckedToIndeterminate: 'mdc-checkbox--anim-unchecked-indeterminate',\n    checkedToUnchecked: 'mdc-checkbox--anim-checked-unchecked',\n    checkedToIndeterminate: 'mdc-checkbox--anim-checked-indeterminate',\n    indeterminateToChecked: 'mdc-checkbox--anim-indeterminate-checked',\n    indeterminateToUnchecked: 'mdc-checkbox--anim-indeterminate-unchecked',\n  };\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, aria-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** The 'aria-describedby' attribute is read after the element's label and field type. */\n  @Input('aria-describedby') ariaDescribedby: string;\n\n  private _uniqueId: string;\n\n  /** A unique id for the checkbox input. If none is supplied, it will be auto-generated. */\n  @Input() id: string;\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string {\n    return `${this.id || this._uniqueId}-input`;\n  }\n\n  /** Whether the checkbox is required. */\n  @Input({transform: booleanAttribute}) required: boolean;\n\n  /** Whether the label should appear after or before the checkbox. Defaults to 'after' */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Name value will be applied to the input element if present */\n  @Input() name: string | null = null;\n\n  /** Event emitted when the checkbox's `checked` value changes. */\n  @Output() readonly change = new EventEmitter<MatCheckboxChange>();\n\n  /** Event emitted when the checkbox's `indeterminate` value changes. */\n  @Output() readonly indeterminateChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** The value attribute of the native input element */\n  @Input() value: string;\n\n  /** Whether the checkbox has a ripple. */\n  @Input({transform: booleanAttribute}) disableRipple: boolean;\n\n  /** The native `<input type=\"checkbox\">` element */\n  @ViewChild('input') _inputElement: ElementRef<HTMLInputElement>;\n\n  /** The native `<label>` element */\n  @ViewChild('label') _labelElement: ElementRef<HTMLInputElement>;\n\n  /** Tabindex for the checkbox. */\n  @Input({transform: (value: unknown) => (value == null ? undefined : numberAttribute(value))})\n  tabIndex: number;\n\n  // TODO(crisbeto): this should be a ThemePalette, but some internal apps were abusing\n  // the lack of type checking previously and assigning random strings.\n  /** Palette color of the checkbox. */\n  @Input() color: string | undefined;\n\n  /**\n   * Reference to the MatRipple instance of the checkbox.\n   * @deprecated Considered an implementation detail. To be removed.\n   * @breaking-change 17.0.0\n   */\n  @ViewChild(MatRipple) ripple: MatRipple;\n\n  /**\n   * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n   * @docs-private\n   */\n  _onTouched: () => any = () => {};\n\n  private _currentAnimationClass: string = '';\n\n  private _currentCheckState: TransitionCheckState = TransitionCheckState.Init;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  constructor(\n    public _elementRef: ElementRef<HTMLElement>,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _ngZone: NgZone,\n    @Attribute('tabindex') tabIndex: string,\n    @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\n    @Optional() @Inject(MAT_CHECKBOX_DEFAULT_OPTIONS) private _options?: MatCheckboxDefaultOptions,\n  ) {\n    this._options = this._options || defaults;\n    this.color = this._options.color || defaults.color;\n    this.tabIndex = parseInt(tabIndex) || 0;\n    this.id = this._uniqueId = `mat-mdc-checkbox-${++nextUniqueId}`;\n  }\n\n  ngAfterViewInit() {\n    this._syncIndeterminate(this._indeterminate);\n  }\n\n  /** Whether the checkbox is checked. */\n  @Input({transform: booleanAttribute})\n  get checked(): boolean {\n    return this._checked;\n  }\n  set checked(value: boolean) {\n    if (value != this.checked) {\n      this._checked = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _checked: boolean = false;\n\n  /** Whether the checkbox is disabled. */\n  @Input({transform: booleanAttribute})\n  get disabled(): boolean {\n    return this._disabled;\n  }\n  set disabled(value: boolean) {\n    if (value !== this.disabled) {\n      this._disabled = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _disabled: boolean = false;\n\n  /**\n   * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n   * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n   * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n   * set to false.\n   */\n  @Input({transform: booleanAttribute})\n  get indeterminate(): boolean {\n    return this._indeterminate;\n  }\n  set indeterminate(value: boolean) {\n    const changed = value != this._indeterminate;\n    this._indeterminate = value;\n\n    if (changed) {\n      if (this._indeterminate) {\n        this._transitionCheckState(TransitionCheckState.Indeterminate);\n      } else {\n        this._transitionCheckState(\n          this.checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked,\n        );\n      }\n      this.indeterminateChange.emit(this._indeterminate);\n    }\n\n    this._syncIndeterminate(this._indeterminate);\n  }\n  private _indeterminate: boolean = false;\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // Since the event of the `cdkObserveContent` directive runs outside of the zone, the checkbox\n    // component will be only marked for check, but no actual change detection runs automatically.\n    // Instead of going back into the zone in order to trigger a change detection which causes\n    // *all* components to be checked (if explicitly marked or not using OnPush), we only trigger\n    // an explicit change detection for the checkbox view and its children.\n    this._changeDetectorRef.detectChanges();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any) {\n    this.checked = !!value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n\n  private _transitionCheckState(newState: TransitionCheckState) {\n    let oldState = this._currentCheckState;\n    let element = this._getAnimationTargetElement();\n\n    if (oldState === newState || !element) {\n      return;\n    }\n    if (this._currentAnimationClass) {\n      element.classList.remove(this._currentAnimationClass);\n    }\n\n    this._currentAnimationClass = this._getAnimationClassForCheckStateTransition(\n      oldState,\n      newState,\n    );\n    this._currentCheckState = newState;\n\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.add(this._currentAnimationClass);\n\n      // Remove the animation class to avoid animation when the checkbox is moved between containers\n      const animationClass = this._currentAnimationClass;\n\n      this._ngZone.runOutsideAngular(() => {\n        setTimeout(() => {\n          element!.classList.remove(animationClass);\n        }, 1000);\n      });\n    }\n  }\n\n  private _emitChangeEvent() {\n    this._controlValueAccessorChangeFn(this.checked);\n    this.change.emit(this._createChangeEvent(this.checked));\n\n    // Assigning the value again here is redundant, but we have to do it in case it was\n    // changed inside the `change` listener which will cause the input to be out of sync.\n    if (this._inputElement) {\n      this._inputElement.nativeElement.checked = this.checked;\n    }\n  }\n\n  /** Toggles the `checked` state of the checkbox. */\n  toggle(): void {\n    this.checked = !this.checked;\n    this._controlValueAccessorChangeFn(this.checked);\n  }\n\n  protected _handleInputClick() {\n    const clickAction = this._options?.clickAction;\n\n    // If resetIndeterminate is false, and the current state is indeterminate, do nothing on click\n    if (!this.disabled && clickAction !== 'noop') {\n      // When user manually click on the checkbox, `indeterminate` is set to false.\n      if (this.indeterminate && clickAction !== 'check') {\n        Promise.resolve().then(() => {\n          this._indeterminate = false;\n          this.indeterminateChange.emit(this._indeterminate);\n        });\n      }\n\n      this._checked = !this._checked;\n      this._transitionCheckState(\n        this._checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked,\n      );\n\n      // Emit our custom change event if the native input emitted one.\n      // It is important to only emit it, if the native input triggered one, because\n      // we don't want to trigger a change event, when the `checked` variable changes for example.\n      this._emitChangeEvent();\n    } else if (!this.disabled && clickAction === 'noop') {\n      // Reset native input when clicked with noop. The native checkbox becomes checked after\n      // click, reset it to be align with `checked` value of `mat-checkbox`.\n      this._inputElement.nativeElement.checked = this.checked;\n      this._inputElement.nativeElement.indeterminate = this.indeterminate;\n    }\n  }\n\n  _onInteractionEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n  }\n\n  _onBlur() {\n    // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n    // Angular does not expect events to be raised during change detection, so any state change\n    // (such as a form control's 'ng-touched') will cause a changed-after-checked error.\n    // See https://github.com/angular/angular/issues/17793. To work around this, we defer\n    // telling the form control it has been touched until the next tick.\n    Promise.resolve().then(() => {\n      this._onTouched();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  private _getAnimationClassForCheckStateTransition(\n    oldState: TransitionCheckState,\n    newState: TransitionCheckState,\n  ): string {\n    // Don't transition if animations are disabled.\n    if (this._animationMode === 'NoopAnimations') {\n      return '';\n    }\n\n    switch (oldState) {\n      case TransitionCheckState.Init:\n        // Handle edge case where user interacts with checkbox that does not have [(ngModel)] or\n        // [checked] bound to it.\n        if (newState === TransitionCheckState.Checked) {\n          return this._animationClasses.uncheckedToChecked;\n        } else if (newState == TransitionCheckState.Indeterminate) {\n          return this._checked\n            ? this._animationClasses.checkedToIndeterminate\n            : this._animationClasses.uncheckedToIndeterminate;\n        }\n        break;\n      case TransitionCheckState.Unchecked:\n        return newState === TransitionCheckState.Checked\n          ? this._animationClasses.uncheckedToChecked\n          : this._animationClasses.uncheckedToIndeterminate;\n      case TransitionCheckState.Checked:\n        return newState === TransitionCheckState.Unchecked\n          ? this._animationClasses.checkedToUnchecked\n          : this._animationClasses.checkedToIndeterminate;\n      case TransitionCheckState.Indeterminate:\n        return newState === TransitionCheckState.Checked\n          ? this._animationClasses.indeterminateToChecked\n          : this._animationClasses.indeterminateToUnchecked;\n    }\n\n    return '';\n  }\n\n  /**\n   * Syncs the indeterminate value with the checkbox DOM node.\n   *\n   * We sync `indeterminate` directly on the DOM node, because in Ivy the check for whether a\n   * property is supported on an element boils down to `if (propName in element)`. Domino's\n   * HTMLInputElement doesn't have an `indeterminate` property so Ivy will warn during\n   * server-side rendering.\n   */\n  private _syncIndeterminate(value: boolean) {\n    const nativeCheckbox = this._inputElement;\n\n    if (nativeCheckbox) {\n      nativeCheckbox.nativeElement.indeterminate = value;\n    }\n  }\n\n  _onInputClick() {\n    this._handleInputClick();\n  }\n\n  _onTouchTargetClick() {\n    this._handleInputClick();\n\n    if (!this.disabled) {\n      // Normally the input should be focused already, but if the click\n      // comes from the touch target, then we might have to focus it ourselves.\n      this._inputElement.nativeElement.focus();\n    }\n  }\n\n  /**\n   *  Prevent click events that come from the `<label/>` element from bubbling. This prevents the\n   *  click handler on the host from triggering twice when clicking on the `<label/>` element. After\n   *  the click event on the `<label/>` propagates, the browsers dispatches click on the associated\n   *  `<input/>`. By preventing clicks on the label by bubbling, we ensure only one click event\n   *  bubbles when the label is clicked.\n   */\n  _preventBubblingFromLabel(event: MouseEvent) {\n    if (!!event.target && this._labelElement.nativeElement.contains(event.target as HTMLElement)) {\n      event.stopPropagation();\n    }\n  }\n}\n", "<div class=\"mdc-form-field\"\n     [class.mdc-form-field--align-end]=\"labelPosition == 'before'\"\n     (click)=\"_preventBubblingFromLabel($event)\">\n  <div #checkbox class=\"mdc-checkbox\">\n    <!-- Render this element first so the input is on top. -->\n    <div class=\"mat-mdc-checkbox-touch-target\" (click)=\"_onTouchTargetClick()\"></div>\n    <input #input\n           type=\"checkbox\"\n           class=\"mdc-checkbox__native-control\"\n           [class.mdc-checkbox--selected]=\"checked\"\n           [attr.aria-label]=\"ariaLabel || null\"\n           [attr.aria-labelledby]=\"ariaLabelledby\"\n           [attr.aria-describedby]=\"ariaDescribedby\"\n           [attr.aria-checked]=\"indeterminate ? 'mixed' : null\"\n           [attr.name]=\"name\"\n           [attr.value]=\"value\"\n           [checked]=\"checked\"\n           [indeterminate]=\"indeterminate\"\n           [disabled]=\"disabled\"\n           [id]=\"inputId\"\n           [required]=\"required\"\n           [tabIndex]=\"disabled ? -1 : tabIndex\"\n           (blur)=\"_onBlur()\"\n           (click)=\"_onInputClick()\"\n           (change)=\"_onInteractionEvent($event)\"/>\n    <div class=\"mdc-checkbox__ripple\"></div>\n    <div class=\"mdc-checkbox__background\">\n      <svg class=\"mdc-checkbox__checkmark\"\n           focusable=\"false\"\n           viewBox=\"0 0 24 24\"\n           aria-hidden=\"true\">\n        <path class=\"mdc-checkbox__checkmark-path\"\n              fill=\"none\"\n              d=\"M1.73,12.91 8.1,19.28 22.79,4.59\"/>\n      </svg>\n      <div class=\"mdc-checkbox__mixedmark\"></div>\n    </div>\n    <div class=\"mat-mdc-checkbox-ripple mat-mdc-focus-indicator\" mat-ripple\n      [matRippleTrigger]=\"checkbox\"\n      [matRippleDisabled]=\"disableRipple || disabled\"\n      [matRippleCentered]=\"true\"></div>\n  </div>\n  <!--\n    Avoid putting a click handler on the <label/> to fix duplicate navigation stop on Talk Back\n    (#14385). Putting a click handler on the <label/> caused this bug because the browser produced\n    an unnecessary accessibility tree node.\n  -->\n  <label class=\"mdc-label\"\n         #label\n         [for]=\"inputId\">\n    <ng-content></ng-content>\n  </label>\n</div>\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, forwardRef, Provider} from '@angular/core';\nimport {CheckboxRequiredValidator, NG_VALIDATORS} from '@angular/forms';\n\nexport const MAT_CHECKBOX_REQUIRED_VALIDATOR: Provider = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatCheckboxRequiredValidator),\n  multi: true,\n};\n\n/**\n * Validator for Material checkbox's required attribute in template-driven checkbox.\n * Current CheckboxRequiredValidator only work with `input type=checkbox` and does not\n * work with `mat-checkbox`.\n */\n@Directive({\n  selector: `mat-checkbox[required][formControlName],\n             mat-checkbox[required][formControl], mat-checkbox[required][ngModel]`,\n  providers: [MAT_CHECKBOX_REQUIRED_VALIDATOR],\n})\nexport class MatCheckboxRequiredValidator extends CheckboxRequiredValidator {}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatCheckbox} from './checkbox';\nimport {MatCheckboxRequiredValidator} from './checkbox-required-validator';\n\n/** This module is used by both original and MDC-based checkbox implementations. */\n@NgModule({\n  exports: [MatCheckboxRequiredValidator],\n  declarations: [MatCheckboxRequiredValidator],\n})\nexport class _MatCheckboxRequiredValidatorModule {}\n\n@NgModule({\n  imports: [MatCommonModule, MatRippleModule, _MatCheckboxRequiredValidatorModule],\n  exports: [MatCheckbox, MatCommonModule, _MatCheckboxRequiredValidatorModule],\n  declarations: [MatCheckbox],\n})\nexport class MatCheckboxModule {}\n", "/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],
  "mappings": "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",
  "names": ["_c0", "_c1", "_c2", "MAT_CHECKBOX_DEFAULT_OPTIONS", "InjectionToken", "providedIn", "factory", "MAT_CHECKBOX_DEFAULT_OPTIONS_FACTORY", "color", "clickAction", "MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR", "provide", "NG_VALUE_ACCESSOR", "useExisting", "forwardRef", "MatCheckbox", "multi", "MatCheckboxChange", "nextUniqueId", "defaults", "focus", "_inputElement", "nativeElement", "_createChangeEvent", "isChecked", "event", "source", "checked", "_getAnimationTargetElement", "inputId", "id", "_uniqueId", "constructor", "_elementRef", "_changeDetectorRef", "_ngZone", "tabIndex", "_animationMode", "_options", "_animationClasses", "uncheckedToChecked", "uncheckedToIndeterminate", "checkedToUnchecked", "checkedToIndeterminate", "indeterminateToChecked", "indeterminateToUnchecked", "ariaLabel", "ariaLabelledby", "labelPosition", "name", "change", "EventEmitter", "indeterminateChange", "_onTouched", "_currentAnimationClass", "_currentCheckState", "_controlValueAccessorChangeFn", "_checked", "_disabled", "_indeterminate", "parseInt", "ngAfterViewInit", "_syncIndeterminate", "value", "markForCheck", "disabled", "indeterminate", "changed", "_transitionCheckState", "emit", "_isRippleDisabled", "disableRipple", "_onLabelTextChange", "detectChanges", "writeValue", "registerOnChange", "fn", "registerOnTouched", "setDisabledState", "isDisabled", "newState", "oldState", "element", "classList", "remove", "_getAnimationClassForCheckStateTransition", "length", "add", "animationClass", "runOutsideAngular", "setTimeout", "_emitChangeEvent", "toggle", "_handleInputClick", "Promise", "resolve", "then", "_onInteractionEvent", "stopPropagation", "_onBlur", "nativeCheckbox", "_onInputClick", "_onTouchTargetClick", "_preventBubblingFromLabel", "target", "_labelElement", "contains", "ɵfac", "MatCheckbox_Factory", "t", "ɵɵdirectiveInject", "ElementRef", "ChangeDetectorRef", "NgZone", "ɵɵinjectAttribute", "ANIMATION_MODULE_TYPE", "ɵcmp", "ɵɵdefineComponent", "type", "selectors", "viewQuery", "MatCheckbox_Query", "rf", "ctx", "i0", "ɵɵviewQuery", "MatRipple", "_t", "ɵɵqueryRefresh", "ɵɵloadQuery", "first", "ripple", "hostAttrs", "hostVars", "hostBindings", "MatCheckbox_HostBindings", "ɵɵhostProperty", "ɵɵattribute", "ɵɵclassMap", "ɵɵclassProp", "inputs", "ariaDescribedby", "required", "booleanAttribute", "undefined", "numberAttribute", "outputs", "exportAs", "features", "ɵɵProvidersFeature", "ɵɵInputTransformsFeature", "ngContentSelectors", "decls", "vars", "consts", "template", "MatCheckbox_Template", "ɵɵprojectionDef", "ɵɵelementStart", "ɵɵlistener", "MatCheckbox_Template_div_click_0_listener", "$event", "MatCheckbox_Template_div_click_3_listener", "ɵɵelementEnd", "MatCheckbox_Template_input_blur_4_listener", "MatCheckbox_Template_input_click_4_listener", "MatCheckbox_Template_input_change_4_listener", "ɵɵelement", "ɵɵnamespaceSVG", "ɵɵnamespaceHTML", "ɵɵprojection", "_r0", "ɵɵreference", "ɵɵadvance", "ɵɵproperty", "dependencies", "styles", "encapsulation", "changeDetection", "ɵsetClassMetadata", "Component", "args", "selector", "host", "providers", "ViewEncapsulation", "None", "ChangeDetectionStrategy", "OnPush", "Attribute", "Optional", "Inject", "Input", "transform", "Output", "ViewChild", "MAT_CHECKBOX_REQUIRED_VALIDATOR", "NG_VALIDATORS", "MatCheckboxRequiredValidator", "CheckboxRequiredValidator", "ɵɵgetInheritedFactory", "ɵɵdefineDirective", "ɵɵInheritDefinitionFeature", "Directive", "_MatCheckboxRequiredValidatorModule", "ɵɵdefineNgModule", "declarations", "exports", "ɵɵdefineInjector", "NgModule", "MatCheckboxModule", "ɵmod", "imports", "MatCommonModule", "MatRippleModule"]
}
