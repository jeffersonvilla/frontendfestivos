{
  "version": 3,
  "sources": ["../../../../../projects/swimlane/ngx-datatable/src/lib/services/scrollbar-helper.service.ts", "../../../../../projects/swimlane/ngx-datatable/src/lib/services/dimensions-helper.service.ts", "../../../../../projects/swimlane/ngx-datatable/src/lib/services/column-changes.service.ts", "../../../../../projects/swimlane/ngx-datatable/src/lib/components/footer/footer-template.directive.ts", "../../../../../projects/swimlane/ngx-datatable/src/lib/directives/visibility.directive.ts", "../../../../../projects/swimlane/ngx-datatable/src/lib/directives/draggable.directive.ts", "../../../../../projects/swimlane/ngx-datatable/src/lib/directives/resizeable.directive.ts", "../../../../../projects/swimlane/ngx-datatable/src/lib/directives/orderable.directive.ts", "../../../../../projects/swimlane/ngx-datatable/src/lib/directives/long-press.directive.ts", "../../../../../projects/swimlane/ngx-datatable/src/lib/components/body/scroller.component.ts", "../../../../../projects/swimlane/ngx-datatable/src/lib/components/body/body-group-header-template.directive.ts", "../../../../../projects/swimlane/ngx-datatable/src/lib/components/body/body-group-header.directive.ts", "../../../../../projects/swimlane/ngx-datatable/src/lib/utils/column-prop-getters.ts", "../../../../../projects/swimlane/ngx-datatable/src/lib/utils/tree.ts", "../../../../../projects/swimlane/ngx-datatable/src/lib/utils/camel-case.ts", "../../../../../projects/swimlane/ngx-datatable/src/lib/utils/id.ts", "../../../../../projects/swimlane/ngx-datatable/src/lib/utils/column-helper.ts", "../../../../../projects/swimlane/ngx-datatable/src/lib/types/column-mode.type.ts", "../../../../../projects/swimlane/ngx-datatable/src/lib/types/selection.type.ts", "../../../../../projects/swimlane/ngx-datatable/src/lib/types/sort.type.ts", "../../../../../projects/swimlane/ngx-datatable/src/lib/types/contextmenu.type.ts", "../../../../../projects/swimlane/ngx-datatable/src/lib/components/columns/column-header.directive.ts", "../../../../../projects/swimlane/ngx-datatable/src/lib/components/columns/column-cell.directive.ts", "../../../../../projects/swimlane/ngx-datatable/src/lib/components/columns/tree.directive.ts", "../../../../../projects/swimlane/ngx-datatable/src/lib/components/columns/column.directive.ts", "../../../../../projects/swimlane/ngx-datatable/src/lib/components/row-detail/row-detail-template.directive.ts", "../../../../../projects/swimlane/ngx-datatable/src/lib/components/row-detail/row-detail.directive.ts", "../../../../../projects/swimlane/ngx-datatable/src/lib/components/footer/footer.directive.ts", "../../../../../projects/swimlane/ngx-datatable/src/lib/utils/column.ts", "../../../../../projects/swimlane/ngx-datatable/src/lib/utils/row-height-cache.ts", "../../../../../projects/swimlane/ngx-datatable/src/lib/utils/prefixes.ts", "../../../../../projects/swimlane/ngx-datatable/src/lib/utils/translate.ts", "../../../../../projects/swimlane/ngx-datatable/src/lib/components/body/progress-bar.component.ts", "../../../../../projects/swimlane/ngx-datatable/src/lib/utils/selection.ts", "../../../../../projects/swimlane/ngx-datatable/src/lib/utils/keys.ts", "../../../../../projects/swimlane/ngx-datatable/src/lib/components/body/selection.component.ts", "../../../../../projects/swimlane/ngx-datatable/src/lib/types/sort-direction.type.ts", "../../../../../projects/swimlane/ngx-datatable/src/lib/components/body/body-cell.component.ts", "../../../../../projects/swimlane/ngx-datatable/src/lib/components/body/body-row.component.ts", "../../../../../projects/swimlane/ngx-datatable/src/lib/components/body/summary/summary-row.component.ts", "../../../../../projects/swimlane/ngx-datatable/src/lib/components/body/body-row-wrapper.component.ts", "../../../../../projects/swimlane/ngx-datatable/src/lib/components/body/body.component.ts", "../../../../../projects/swimlane/ngx-datatable/src/lib/utils/sort.ts", "../../../../../projects/swimlane/ngx-datatable/src/lib/components/header/header-cell.component.ts", "../../../../../projects/swimlane/ngx-datatable/src/lib/components/header/header.component.ts", "../../../../../projects/swimlane/ngx-datatable/src/lib/utils/throttle.ts", "../../../../../projects/swimlane/ngx-datatable/src/lib/utils/math.ts", "../../../../../projects/swimlane/ngx-datatable/src/lib/components/footer/pager.component.ts", "../../../../../projects/swimlane/ngx-datatable/src/lib/components/footer/footer.component.ts", "../../../../../projects/swimlane/ngx-datatable/src/lib/components/datatable.component.ts", "../../../../../projects/swimlane/ngx-datatable/src/lib/components/datatable.component.html", "../../../../../projects/swimlane/ngx-datatable/src/lib/ngx-datatable.module.ts", "../../../../../projects/swimlane/ngx-datatable/src/lib/types/click.type.ts", "../../../../../projects/swimlane/ngx-datatable/src/lib/utils/elm-from-point.ts", "../../../../../projects/swimlane/ngx-datatable/src/public-api.ts", "../../../../../projects/swimlane/ngx-datatable/src/swimlane-ngx-datatable.ts"],
  "sourcesContent": ["import { Inject, Injectable } from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\n\n/**\n * Gets the width of the scrollbar.  Nesc for windows\n * http://stackoverflow.com/a/13382873/888165\n */\n@Injectable()\nexport class ScrollbarHelper {\n  width: number = this.getWidth();\n\n  constructor(@Inject(DOCUMENT) private document: any) {}\n\n  getWidth(): number {\n    const outer = this.document.createElement('div');\n    outer.style.visibility = 'hidden';\n    outer.style.width = '100px';\n    outer.style.msOverflowStyle = 'scrollbar';\n    this.document.body.appendChild(outer);\n\n    const widthNoScroll = outer.offsetWidth;\n    outer.style.overflow = 'scroll';\n\n    const inner = this.document.createElement('div');\n    inner.style.width = '100%';\n    outer.appendChild(inner);\n\n    const widthWithScroll = inner.offsetWidth;\n    outer.parentNode.removeChild(outer);\n\n    return widthNoScroll - widthWithScroll;\n  }\n}\n", "import { Inject, Injectable } from '@angular/core';\n\n/**\n * Gets the width of the scrollbar.  Nesc for windows\n * http://stackoverflow.com/a/13382873/888165\n */\n@Injectable()\nexport class DimensionsHelper {\n  getDimensions(element: Element): ClientRect {\n    return element.getBoundingClientRect();\n  }\n}\n", "import { Injectable } from '@angular/core';\n\nimport { Observable, Subject } from 'rxjs';\n\n/**\n * service to make DatatableComponent aware of changes to\n * input bindings of DataTableColumnDirective\n */\n@Injectable()\nexport class ColumnChangesService {\n  private columnInputChanges = new Subject<void>();\n\n  get columnInputChanges$(): Observable<void> {\n    return this.columnInputChanges.asObservable();\n  }\n\n  onInputChange(): void {\n    this.columnInputChanges.next();\n  }\n}\n", "import { Directive, TemplateRef } from '@angular/core';\n\n@Directive({ selector: '[ngx-datatable-footer-template]' })\nexport class DataTableFooterTemplateDirective {\n  constructor(public template: TemplateRef<any>) {}\n}\n", "import { Directive, Output, EventEmitter, ElementRef, HostBinding, NgZone, OnInit, OnDestroy } from '@angular/core';\n\n/**\n * Visibility Observer Directive\n *\n * Usage:\n *\n * \t\t<div\n * \t\t\tvisibilityObserver\n * \t\t\t(visible)=\"onVisible($event)\">\n * \t\t</div>\n *\n */\n@Directive({ selector: '[visibilityObserver]' })\nexport class VisibilityDirective implements OnInit, OnDestroy {\n  @HostBinding('class.visible')\n  isVisible: boolean = false;\n\n  @Output() visible: EventEmitter<any> = new EventEmitter();\n\n  timeout: any;\n\n  constructor(private element: ElementRef, private zone: NgZone) {}\n\n  ngOnInit(): void {\n    this.runCheck();\n  }\n\n  ngOnDestroy(): void {\n    clearTimeout(this.timeout);\n  }\n\n  onVisibilityChange(): void {\n    // trigger zone recalc for columns\n    this.zone.run(() => {\n      this.isVisible = true;\n      this.visible.emit(true);\n    });\n  }\n\n  runCheck(): void {\n    const check = () => {\n      // https://davidwalsh.name/offsetheight-visibility\n      const { offsetHeight, offsetWidth } = this.element.nativeElement;\n\n      if (offsetHeight && offsetWidth) {\n        clearTimeout(this.timeout);\n        this.onVisibilityChange();\n      } else {\n        clearTimeout(this.timeout);\n        this.zone.runOutsideAngular(() => {\n          this.timeout = setTimeout(() => check(), 50);\n        });\n      }\n    };\n\n    this.timeout = setTimeout(() => check());\n  }\n}\n", "import { Directive, ElementRef, Input, Output, EventEmitter, OnDestroy, OnChanges, SimpleChanges } from '@angular/core';\nimport { Subscription, fromEvent } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\n/**\n * Draggable Directive for Angular2\n *\n * Inspiration:\n *   https://github.com/AngularClass/angular2-examples/blob/master/rx-draggable/directives/draggable.ts\n *   http://stackoverflow.com/questions/35662530/how-to-implement-drag-and-drop-in-angular2\n *\n */\n@Directive({ selector: '[draggable]' })\nexport class DraggableDirective implements OnDestroy, OnChanges {\n  @Input() dragEventTarget: any;\n  @Input() dragModel: any;\n  @Input() dragX: boolean = true;\n  @Input() dragY: boolean = true;\n\n  @Output() dragStart: EventEmitter<any> = new EventEmitter();\n  @Output() dragging: EventEmitter<any> = new EventEmitter();\n  @Output() dragEnd: EventEmitter<any> = new EventEmitter();\n\n  element: HTMLElement;\n  isDragging: boolean = false;\n  subscription: Subscription;\n\n  constructor(element: ElementRef) {\n    this.element = element.nativeElement;\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes['dragEventTarget'] && changes['dragEventTarget'].currentValue && this.dragModel.dragging) {\n      this.onMousedown(changes['dragEventTarget'].currentValue);\n    }\n  }\n\n  ngOnDestroy(): void {\n    this._destroySubscription();\n  }\n\n  onMouseup(event: MouseEvent): void {\n    if (!this.isDragging) return;\n\n    this.isDragging = false;\n    this.element.classList.remove('dragging');\n\n    if (this.subscription) {\n      this._destroySubscription();\n      this.dragEnd.emit({\n        event,\n        element: this.element,\n        model: this.dragModel\n      });\n    }\n  }\n\n  onMousedown(event: MouseEvent): void {\n    // we only want to drag the inner header text\n    const isDragElm = (<HTMLElement>event.target).classList.contains('draggable');\n\n    if (isDragElm && (this.dragX || this.dragY)) {\n      event.preventDefault();\n      this.isDragging = true;\n\n      const mouseDownPos = { x: event.clientX, y: event.clientY };\n\n      const mouseup = fromEvent(document, 'mouseup');\n      this.subscription = mouseup.subscribe((ev: MouseEvent) => this.onMouseup(ev));\n\n      const mouseMoveSub = fromEvent(document, 'mousemove')\n        .pipe(takeUntil(mouseup))\n        .subscribe((ev: MouseEvent) => this.move(ev, mouseDownPos));\n\n      this.subscription.add(mouseMoveSub);\n\n      this.dragStart.emit({\n        event,\n        element: this.element,\n        model: this.dragModel\n      });\n    }\n  }\n\n  move(event: MouseEvent, mouseDownPos: { x: number; y: number }): void {\n    if (!this.isDragging) return;\n\n    const x = event.clientX - mouseDownPos.x;\n    const y = event.clientY - mouseDownPos.y;\n\n    if (this.dragX) this.element.style.left = `${x}px`;\n    if (this.dragY) this.element.style.top = `${y}px`;\n\n    this.element.classList.add('dragging');\n\n    this.dragging.emit({\n      event,\n      element: this.element,\n      model: this.dragModel\n    });\n  }\n\n  private _destroySubscription(): void {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n      this.subscription = undefined;\n    }\n  }\n}\n", "import {\n  Directive,\n  ElementRef,\n  HostListener,\n  Input,\n  Output,\n  EventEmitter,\n  OnDestroy,\n  AfterViewInit,\n  Renderer2\n} from '@angular/core';\nimport { Subscription, fromEvent } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\n@Directive({\n  selector: '[resizeable]',\n  host: {\n    '[class.resizeable]': 'resizeEnabled'\n  }\n})\nexport class ResizeableDirective implements OnDestroy, AfterViewInit {\n  @Input() resizeEnabled: boolean = true;\n  @Input() minWidth: number;\n  @Input() maxWidth: number;\n\n  @Output() resize: EventEmitter<any> = new EventEmitter();\n\n  element: HTMLElement;\n  subscription: Subscription;\n  resizing: boolean = false;\n  private resizeHandle: HTMLElement;\n\n  constructor(element: ElementRef, private renderer: Renderer2) {\n    this.element = element.nativeElement;\n  }\n\n  ngAfterViewInit(): void {\n    const renderer2 = this.renderer;\n    this.resizeHandle = renderer2.createElement('span');\n    if (this.resizeEnabled) {\n      renderer2.addClass(this.resizeHandle, 'resize-handle');\n    } else {\n      renderer2.addClass(this.resizeHandle, 'resize-handle--not-resizable');\n    }\n    renderer2.appendChild(this.element, this.resizeHandle);\n  }\n\n  ngOnDestroy(): void {\n    this._destroySubscription();\n    if (this.renderer.destroyNode) {\n      this.renderer.destroyNode(this.resizeHandle);\n    } else if (this.resizeHandle) {\n      this.renderer.removeChild(this.renderer.parentNode(this.resizeHandle), this.resizeHandle);\n    }\n  }\n\n  onMouseup(): void {\n    this.resizing = false;\n\n    if (this.subscription && !this.subscription.closed) {\n      this._destroySubscription();\n      this.resize.emit(this.element.clientWidth);\n    }\n  }\n\n  @HostListener('mousedown', ['$event'])\n  onMousedown(event: MouseEvent): void {\n    const isHandle = (<HTMLElement>event.target).classList.contains('resize-handle');\n    const initialWidth = this.element.clientWidth;\n    const mouseDownScreenX = event.screenX;\n\n    if (isHandle) {\n      event.stopPropagation();\n      this.resizing = true;\n\n      const mouseup = fromEvent(document, 'mouseup');\n      this.subscription = mouseup.subscribe((ev: MouseEvent) => this.onMouseup());\n\n      const mouseMoveSub = fromEvent(document, 'mousemove')\n        .pipe(takeUntil(mouseup))\n        .subscribe((e: MouseEvent) => this.move(e, initialWidth, mouseDownScreenX));\n\n      this.subscription.add(mouseMoveSub);\n    }\n  }\n\n  move(event: MouseEvent, initialWidth: number, mouseDownScreenX: number): void {\n    const movementX = event.screenX - mouseDownScreenX;\n    const newWidth = initialWidth + movementX;\n\n    const overMinWidth = !this.minWidth || newWidth >= this.minWidth;\n    const underMaxWidth = !this.maxWidth || newWidth <= this.maxWidth;\n\n    if (overMinWidth && underMaxWidth) {\n      this.element.style.width = `${newWidth}px`;\n    }\n  }\n\n  private _destroySubscription() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n      this.subscription = undefined;\n    }\n  }\n}\n", "import {\n  Directive,\n  Output,\n  EventEmitter,\n  ContentChildren,\n  QueryList,\n  KeyValueDiffers,\n  AfterContentInit,\n  OnDestroy,\n  Inject\n} from '@angular/core';\nimport { DraggableDirective } from './draggable.directive';\nimport { DOCUMENT } from '@angular/common';\n\n@Directive({ selector: '[orderable]' })\nexport class OrderableDirective implements AfterContentInit, OnDestroy {\n  @Output() reorder: EventEmitter<any> = new EventEmitter();\n  @Output() targetChanged: EventEmitter<any> = new EventEmitter();\n\n  @ContentChildren(DraggableDirective, { descendants: true })\n  draggables: QueryList<DraggableDirective>;\n\n  positions: any;\n  differ: any;\n  lastDraggingIndex: number;\n\n  constructor(differs: KeyValueDiffers, @Inject(DOCUMENT) private document: any) {\n    this.differ = differs.find({}).create();\n  }\n\n  ngAfterContentInit(): void {\n    // HACK: Investigate Better Way\n    this.updateSubscriptions();\n    this.draggables.changes.subscribe(this.updateSubscriptions.bind(this));\n  }\n\n  ngOnDestroy(): void {\n    this.draggables.forEach(d => {\n      d.dragStart.unsubscribe();\n      d.dragging.unsubscribe();\n      d.dragEnd.unsubscribe();\n    });\n  }\n\n  updateSubscriptions(): void {\n    const diffs = this.differ.diff(this.createMapDiffs());\n\n    if (diffs) {\n      const subscribe = ({ currentValue, previousValue }: any) => {\n        unsubscribe({ previousValue });\n\n        if (currentValue) {\n          currentValue.dragStart.subscribe(this.onDragStart.bind(this));\n          currentValue.dragging.subscribe(this.onDragging.bind(this));\n          currentValue.dragEnd.subscribe(this.onDragEnd.bind(this));\n        }\n      };\n\n      const unsubscribe = ({ previousValue }: any) => {\n        if (previousValue) {\n          previousValue.dragStart.unsubscribe();\n          previousValue.dragging.unsubscribe();\n          previousValue.dragEnd.unsubscribe();\n        }\n      };\n\n      diffs.forEachAddedItem(subscribe);\n      // diffs.forEachChangedItem(subscribe.bind(this));\n      diffs.forEachRemovedItem(unsubscribe);\n    }\n  }\n\n  onDragStart(): void {\n    this.positions = {};\n\n    let i = 0;\n    for (const dragger of this.draggables.toArray()) {\n      const elm = dragger.element;\n      const left = parseInt(elm.offsetLeft.toString(), 0);\n      this.positions[dragger.dragModel.prop] = {\n        left,\n        right: left + parseInt(elm.offsetWidth.toString(), 0),\n        index: i++,\n        element: elm\n      };\n    }\n  }\n\n  onDragging({ element, model, event }: any): void {\n    const prevPos = this.positions[model.prop];\n    const target = this.isTarget(model, event);\n\n    if (target) {\n      if (this.lastDraggingIndex !== target.i) {\n        this.targetChanged.emit({\n          prevIndex: this.lastDraggingIndex,\n          newIndex: target.i,\n          initialIndex: prevPos.index\n        });\n        this.lastDraggingIndex = target.i;\n      }\n    } else if (this.lastDraggingIndex !== prevPos.index) {\n      this.targetChanged.emit({\n        prevIndex: this.lastDraggingIndex,\n        initialIndex: prevPos.index\n      });\n      this.lastDraggingIndex = prevPos.index;\n    }\n  }\n\n  onDragEnd({ element, model, event }: any): void {\n    const prevPos = this.positions[model.prop];\n\n    const target = this.isTarget(model, event);\n    if (target) {\n      this.reorder.emit({\n        prevIndex: prevPos.index,\n        newIndex: target.i,\n        model\n      });\n    }\n\n    this.lastDraggingIndex = undefined;\n    element.style.left = 'auto';\n  }\n\n  isTarget(model: any, event: any): any {\n    let i = 0;\n    const x = event.x || event.clientX;\n    const y = event.y || event.clientY;\n    const targets = this.document.elementsFromPoint(x, y);\n\n    for (const prop in this.positions) {\n      // current column position which throws event.\n      const pos = this.positions[prop];\n\n      // since we drag the inner span, we need to find it in the elements at the cursor\n      if (model.prop !== prop && targets.find((el: any) => el === pos.element)) {\n        return {\n          pos,\n          i\n        };\n      }\n\n      i++;\n    }\n  }\n\n  private createMapDiffs(): { [key: string]: DraggableDirective } {\n    return this.draggables.toArray().reduce((acc, curr) => {\n      acc[curr.dragModel.$$id] = curr;\n      return acc;\n    }, {});\n  }\n}\n", "import { Directive, Input, Output, EventEmitter, HostBinding, HostListener, OnDestroy } from '@angular/core';\nimport { Observable, Subscription, fromEvent } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { MouseEvent } from '../events';\n\n@Directive({ selector: '[long-press]' })\nexport class LongPressDirective implements OnDestroy {\n  @Input() pressEnabled: boolean = true;\n  @Input() pressModel: any;\n  @Input() duration: number = 500;\n\n  @Output() longPressStart: EventEmitter<any> = new EventEmitter();\n  @Output() longPressing: EventEmitter<any> = new EventEmitter();\n  @Output() longPressEnd: EventEmitter<any> = new EventEmitter();\n\n  pressing: boolean;\n  isLongPressing: boolean;\n  timeout: any;\n  mouseX: number = 0;\n  mouseY: number = 0;\n\n  subscription: Subscription;\n\n  @HostBinding('class.press')\n  get press(): boolean {\n    return this.pressing;\n  }\n\n  @HostBinding('class.longpress')\n  get isLongPress(): boolean {\n    return this.isLongPressing;\n  }\n\n  @HostListener('mousedown', ['$event'])\n  onMouseDown(event: MouseEvent): void {\n    // don't do right/middle clicks\n    if (event.which !== 1 || !this.pressEnabled) return;\n\n    // don't start drag if its on resize handle\n    const target = <HTMLElement>event.target;\n    if (target.classList.contains('resize-handle')) return;\n\n    this.mouseX = event.clientX;\n    this.mouseY = event.clientY;\n\n    this.pressing = true;\n    this.isLongPressing = false;\n\n    const mouseup = fromEvent(document, 'mouseup');\n    this.subscription = mouseup.subscribe((ev: MouseEvent) => this.onMouseup());\n\n    this.timeout = setTimeout(() => {\n      this.isLongPressing = true;\n      this.longPressStart.emit({\n        event,\n        model: this.pressModel\n      });\n\n      this.subscription.add(\n        fromEvent(document, 'mousemove')\n          .pipe(takeUntil(mouseup))\n          .subscribe((mouseEvent: MouseEvent) => this.onMouseMove(mouseEvent))\n      );\n\n      this.loop(event);\n    }, this.duration);\n\n    this.loop(event);\n  }\n\n  onMouseMove(event: MouseEvent): void {\n    if (this.pressing && !this.isLongPressing) {\n      const xThres = Math.abs(event.clientX - this.mouseX) > 10;\n      const yThres = Math.abs(event.clientY - this.mouseY) > 10;\n\n      if (xThres || yThres) {\n        this.endPress();\n      }\n    }\n  }\n\n  loop(event: MouseEvent): void {\n    if (this.isLongPressing) {\n      this.timeout = setTimeout(() => {\n        this.longPressing.emit({\n          event,\n          model: this.pressModel\n        });\n        this.loop(event);\n      }, 50);\n    }\n  }\n\n  endPress(): void {\n    clearTimeout(this.timeout);\n    this.isLongPressing = false;\n    this.pressing = false;\n    this._destroySubscription();\n\n    this.longPressEnd.emit({\n      model: this.pressModel\n    });\n  }\n\n  onMouseup(): void {\n    this.endPress();\n  }\n\n  ngOnDestroy(): void {\n    this._destroySubscription();\n  }\n\n  private _destroySubscription(): void {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n      this.subscription = undefined;\n    }\n  }\n}\n", "import {\n  Component,\n  Input,\n  ElementRef,\n  Output,\n  EventEmitter,\n  Renderer2,\n  NgZone,\n  OnInit,\n  OnDestroy,\n  HostBinding,\n  ChangeDetectionStrategy\n} from '@angular/core';\n\nimport { MouseEvent } from '../../events';\n\n@Component({\n  selector: 'datatable-scroller',\n  template: ` <ng-content></ng-content> `,\n  host: {\n    class: 'datatable-scroll'\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ScrollerComponent implements OnInit, OnDestroy {\n  @Input() scrollbarV: boolean = false;\n  @Input() scrollbarH: boolean = false;\n\n  @HostBinding('style.height.px')\n  @Input()\n  scrollHeight: number;\n\n  @HostBinding('style.width.px')\n  @Input()\n  scrollWidth: number;\n\n  @Output() scroll: EventEmitter<any> = new EventEmitter();\n\n  scrollYPos: number = 0;\n  scrollXPos: number = 0;\n  prevScrollYPos: number = 0;\n  prevScrollXPos: number = 0;\n  element: any;\n  parentElement: any;\n  onScrollListener: any;\n\n  private _scrollEventListener: any = null;\n\n  constructor(private ngZone: NgZone, element: ElementRef, private renderer: Renderer2) {\n    this.element = element.nativeElement;\n  }\n\n  ngOnInit(): void {\n    // manual bind so we don't always listen\n    if (this.scrollbarV || this.scrollbarH) {\n      const renderer = this.renderer;\n      this.parentElement = renderer.parentNode(renderer.parentNode(this.element));\n      this._scrollEventListener = this.onScrolled.bind(this);\n      this.parentElement.addEventListener('scroll', this._scrollEventListener);\n    }\n  }\n\n  ngOnDestroy(): void {\n    if (this._scrollEventListener) {\n      this.parentElement.removeEventListener('scroll', this._scrollEventListener);\n      this._scrollEventListener = null;\n    }\n  }\n\n  setOffset(offsetY: number): void {\n    if (this.parentElement) {\n      this.parentElement.scrollTop = offsetY;\n    }\n  }\n\n  onScrolled(event: MouseEvent): void {\n    const dom: Element = <Element>event.currentTarget;\n    requestAnimationFrame(() => {\n      this.scrollYPos = dom.scrollTop;\n      this.scrollXPos = dom.scrollLeft;\n      this.updateOffset();\n    });\n  }\n\n  updateOffset(): void {\n    let direction: string;\n    if (this.scrollYPos < this.prevScrollYPos) {\n      direction = 'down';\n    } else if (this.scrollYPos > this.prevScrollYPos) {\n      direction = 'up';\n    }\n\n    this.scroll.emit({\n      direction,\n      scrollYPos: this.scrollYPos,\n      scrollXPos: this.scrollXPos\n    });\n\n    this.prevScrollYPos = this.scrollYPos;\n    this.prevScrollXPos = this.scrollXPos;\n  }\n}\n", "import { Directive, TemplateRef } from '@angular/core';\n\n@Directive({\n  selector: '[ngx-datatable-group-header-template]'\n})\nexport class DatatableGroupHeaderTemplateDirective {\n  constructor(public template: TemplateRef<any>) {}\n}\n", "import { Input, Output, EventEmitter, Directive, TemplateRef, ContentChild } from '@angular/core';\nimport { DatatableGroupHeaderTemplateDirective } from './body-group-header-template.directive';\n\n@Directive({ selector: 'ngx-datatable-group-header' })\nexport class DatatableGroupHeaderDirective {\n  /**\n   * Row height is required when virtual scroll is enabled.\n   */\n  @Input() rowHeight: number | ((group?: any, index?: number) => number) = 0;\n\n  @Input('template')\n  _templateInput: TemplateRef<any>;\n\n  @ContentChild(DatatableGroupHeaderTemplateDirective, { read: TemplateRef, static: true })\n  _templateQuery: TemplateRef<any>;\n\n  get template(): TemplateRef<any> {\n    return this._templateInput || this._templateQuery;\n  }\n\n  /**\n   * Track toggling of group visibility\n   */\n  @Output() toggle: EventEmitter<any> = new EventEmitter();\n\n  /**\n   * Toggle the expansion of a group\n   */\n  toggleExpandGroup(group: any): void {\n    this.toggle.emit({\n      type: 'group',\n      value: group\n    });\n  }\n\n  /**\n   * Expand all groups\n   */\n  expandAllGroups(): void {\n    this.toggle.emit({\n      type: 'all',\n      value: true\n    });\n  }\n\n  /**\n   * Collapse all groups\n   */\n  collapseAllGroups(): void {\n    this.toggle.emit({\n      type: 'all',\n      value: false\n    });\n  }\n}\n", "import { TableColumnProp } from '../types/table-column.type';\n\n// maybe rename this file to prop-getters.ts\n\nexport type ValueGetter = (obj: any, prop: TableColumnProp) => any;\n\n/**\n * Always returns the empty string ''\n */\nexport function emptyStringGetter(): string {\n  return '';\n}\n\n/**\n * Returns the appropriate getter function for this kind of prop.\n * If prop == null, returns the emptyStringGetter.\n */\nexport function getterForProp(prop: TableColumnProp): ValueGetter {\n  if (prop == null) {\n    return emptyStringGetter;\n  }\n\n  if (typeof prop === 'number') {\n    return numericIndexGetter;\n  } else {\n    // deep or simple\n    if (prop.indexOf('.') !== -1) {\n      return deepValueGetter;\n    } else {\n      return shallowValueGetter;\n    }\n  }\n}\n\n/**\n * Returns the value at this numeric index.\n * @param row array of values\n * @param index numeric index\n * @returns any or '' if invalid index\n */\nexport function numericIndexGetter(row: any[], index: number): any {\n  if (row == null) {\n    return '';\n  }\n  // mimic behavior of deepValueGetter\n  if (!row || index == null) {\n    return row;\n  }\n\n  const value = row[index];\n  if (value == null) {\n    return '';\n  }\n  return value;\n}\n\n/**\n * Returns the value of a field.\n * (more efficient than deepValueGetter)\n * @param obj object containing the field\n * @param fieldName field name string\n */\nexport function shallowValueGetter(obj: any, fieldName: string): any {\n  if (obj == null) {\n    return '';\n  }\n  if (!obj || !fieldName) {\n    return obj;\n  }\n\n  const value = obj[fieldName];\n  if (value == null) {\n    return '';\n  }\n  return value;\n}\n\n/**\n * Returns a deep object given a string. zoo['animal.type']\n */\nexport function deepValueGetter(obj: any, path: string): any {\n  if (obj == null) {\n    return '';\n  }\n  if (!obj || !path) {\n    return obj;\n  }\n\n  // check if path matches a root-level field\n  // { \"a.b.c\": 123 }\n  let current = obj[path];\n  if (current !== undefined) {\n    return current;\n  }\n\n  current = obj;\n  const split = path.split('.');\n\n  if (split.length) {\n    for (let i = 0; i < split.length; i++) {\n      current = current[split[i]];\n\n      // if found undefined, return empty string\n      if (current === undefined || current === null) {\n        return '';\n      }\n    }\n  }\n\n  return current;\n}\n", "import { getterForProp } from './column-prop-getters';\nimport { TableColumnProp } from '../types/table-column.type';\n\nexport type OptionalValueGetter = (row: any) => any | undefined;\nexport function optionalGetterForProp(prop: TableColumnProp): OptionalValueGetter {\n  return prop && (row => getterForProp(prop)(row, prop));\n}\n\n/**\n * This functions rearrange items by their parents\n * Also sets the level value to each of the items\n *\n * Note: Expecting each item has a property called parentId\n * Note: This algorithm will fail if a list has two or more items with same ID\n * NOTE: This algorithm will fail if there is a deadlock of relationship\n *\n * For example,\n *\n * Input\n *\n * id -> parent\n * 1  -> 0\n * 2  -> 0\n * 3  -> 1\n * 4  -> 1\n * 5  -> 2\n * 7  -> 8\n * 6  -> 3\n *\n *\n * Output\n * id -> level\n * 1      -> 0\n * --3    -> 1\n * ----6  -> 2\n * --4    -> 1\n * 2      -> 0\n * --5    -> 1\n * 7     -> 8\n *\n *\n * @param rows\n *\n */\nexport function groupRowsByParents(rows: any[], from?: OptionalValueGetter, to?: OptionalValueGetter): any[] {\n  if (from && to) {\n    const nodeById = {};\n    const l = rows.length;\n    let node: TreeNode | null = null;\n\n    nodeById[0] = new TreeNode(); // that's the root node\n\n    const uniqIDs = rows.reduce((arr, item) => {\n      const toValue = to(item);\n      if (arr.indexOf(toValue) === -1) {\n        arr.push(toValue);\n      }\n      return arr;\n    }, []);\n\n    for (let i = 0; i < l; i++) {\n      // make TreeNode objects for each item\n      nodeById[to(rows[i])] = new TreeNode(rows[i]);\n    }\n\n    for (let i = 0; i < l; i++) {\n      // link all TreeNode objects\n      node = nodeById[to(rows[i])];\n      let parent = 0;\n      const fromValue = from(node.row);\n      if (!!fromValue && uniqIDs.indexOf(fromValue) > -1) {\n        parent = fromValue;\n      }\n      node.parent = nodeById[parent];\n      node.row['level'] = node.parent.row['level'] + 1;\n      node.parent.children.push(node);\n    }\n\n    let resolvedRows: any[] = [];\n    nodeById[0].flatten(function () {\n      resolvedRows = [...resolvedRows, this.row];\n    }, true);\n\n    return resolvedRows;\n  } else {\n    return rows;\n  }\n}\n\nclass TreeNode {\n  public row: any;\n  public parent: any;\n  public children: any[];\n\n  constructor(row: any | null = null) {\n    if (!row) {\n      row = {\n        level: -1,\n        treeStatus: 'expanded'\n      };\n    }\n    this.row = row;\n    this.parent = null;\n    this.children = [];\n  }\n\n  flatten(f: any, recursive: boolean) {\n    if (this.row['treeStatus'] === 'expanded') {\n      for (let i = 0, l = this.children.length; i < l; i++) {\n        const child = this.children[i];\n        f.apply(child, Array.prototype.slice.call(arguments, 2));\n        if (recursive) child.flatten.apply(child, arguments);\n      }\n    }\n  }\n}\n", "/**\n * Converts strings from something to camel case\n * http://stackoverflow.com/questions/10425287/convert-dash-separated-string-to-camelcase\n */\nexport function camelCase(str: string): string {\n  // Replace special characters with a space\n  str = str.replace(/[^a-zA-Z0-9 ]/g, ' ');\n  // put a space before an uppercase letter\n  str = str.replace(/([a-z](?=[A-Z]))/g, '$1 ');\n\n  // Lower case first character and some other stuff\n  str = str\n    .replace(/([^a-zA-Z0-9 ])|^[0-9]+/g, '')\n    .trim()\n    .toLowerCase();\n\n  // uppercase characters preceded by a space or number\n  str = str.replace(/([ 0-9]+)([a-zA-Z])/g, function (a, b, c) {\n    return b.trim() + c.toUpperCase();\n  });\n\n  return str;\n}\n\n/**\n * Converts strings from camel case to words\n * http://stackoverflow.com/questions/7225407/convert-camelcasetext-to-camel-case-text\n */\nexport function deCamelCase(str: string): string {\n  return str.replace(/([A-Z])/g, match => ` ${match}`).replace(/^./, match => match.toUpperCase());\n}\n", "/**\n * Creates a unique object id.\n * http://stackoverflow.com/questions/6248666/how-to-generate-short-uid-like-ax4j9z-in-js\n */\nexport function id() {\n  return ('0000' + ((Math.random() * Math.pow(36, 4)) << 0).toString(36)).slice(-4);\n}\n", "import { camelCase, deCamelCase } from './camel-case';\nimport { id } from './id';\nimport { getterForProp } from './column-prop-getters';\nimport { TableColumn } from '../types/table-column.type';\nimport { DataTableColumnDirective } from '../components/columns/column.directive';\n\n/**\n * Sets the column defaults\n */\nexport function setColumnDefaults(columns: TableColumn[]) {\n  if (!columns) return;\n\n  // Only one column should hold the tree view\n  // Thus if multiple columns are provided with\n  // isTreeColumn as true we take only the first one\n  let treeColumnFound: boolean = false;\n\n  for (const column of columns) {\n    if (!column.$$id) {\n      column.$$id = id();\n    }\n\n    // prop can be numeric; zero is valid not a missing prop\n    // translate name => prop\n    if (isNullOrUndefined(column.prop) && column.name) {\n      column.prop = camelCase(column.name);\n    }\n\n    if (!column.$$valueGetter) {\n      column.$$valueGetter = getterForProp(column.prop);\n    }\n\n    // format props if no name passed\n    if (!isNullOrUndefined(column.prop) && isNullOrUndefined(column.name)) {\n      column.name = deCamelCase(String(column.prop));\n    }\n\n    if (isNullOrUndefined(column.prop) && isNullOrUndefined(column.name)) {\n      column.name = ''; // Fixes IE and Edge displaying `null`\n    }\n\n    if (!column.hasOwnProperty('resizeable')) {\n      column.resizeable = true;\n    }\n\n    if (!column.hasOwnProperty('sortable')) {\n      column.sortable = true;\n    }\n\n    if (!column.hasOwnProperty('draggable')) {\n      column.draggable = true;\n    }\n\n    if (!column.hasOwnProperty('canAutoResize')) {\n      column.canAutoResize = true;\n    }\n\n    if (!column.hasOwnProperty('width')) {\n      column.width = 150;\n    }\n\n    if (!column.hasOwnProperty('isTreeColumn')) {\n      column.isTreeColumn = false;\n    } else {\n      if (column.isTreeColumn && !treeColumnFound) {\n        // If the first column with isTreeColumn is true found\n        // we mark that treeCoulmn is found\n        treeColumnFound = true;\n      } else {\n        // After that isTreeColumn property for any other column\n        // will be set as false\n        column.isTreeColumn = false;\n      }\n    }\n  }\n}\n\nexport function isNullOrUndefined<T>(value: T | null | undefined): value is null | undefined {\n  return value === null || value === undefined;\n}\n\n/**\n * Translates templates definitions to objects\n */\nexport function translateTemplates(templates: DataTableColumnDirective[]): any[] {\n  const result: any[] = [];\n  for (const temp of templates) {\n    const col: any = {};\n\n    const props = Object.getOwnPropertyNames(temp);\n    for (const prop of props) {\n      col[prop] = temp[prop];\n    }\n\n    if (temp.headerTemplate) {\n      col.headerTemplate = temp.headerTemplate;\n    }\n\n    if (temp.cellTemplate) {\n      col.cellTemplate = temp.cellTemplate;\n    }\n\n    if (temp.summaryFunc) {\n      col.summaryFunc = temp.summaryFunc;\n    }\n\n    if (temp.summaryTemplate) {\n      col.summaryTemplate = temp.summaryTemplate;\n    }\n\n    result.push(col);\n  }\n\n  return result;\n}\n", "export enum ColumnMode {\n  standard = 'standard',\n  flex = 'flex',\n  force = 'force'\n}\n", "export enum SelectionType {\n  single = 'single',\n  multi = 'multi',\n  multiClick = 'multiClick',\n  cell = 'cell',\n  checkbox = 'checkbox'\n}\n", "export enum SortType {\n  single = 'single',\n  multi = 'multi'\n}\n", "export enum ContextmenuType {\n  header = 'header',\n  body = 'body'\n}\n", "import { Directive, TemplateRef } from '@angular/core';\n\n@Directive({ selector: '[ngx-datatable-header-template]' })\nexport class DataTableColumnHeaderDirective {\n  constructor(public template: TemplateRef<any>) {}\n}\n", "import { Directive, TemplateRef } from '@angular/core';\n\n@Directive({ selector: '[ngx-datatable-cell-template]' })\nexport class DataTableColumnCellDirective {\n  constructor(public template: TemplateRef<any>) {}\n}\n", "import { Directive, TemplateRef } from '@angular/core';\n\n@Directive({ selector: '[ngx-datatable-tree-toggle]' })\nexport class DataTableColumnCellTreeToggle {\n  constructor(public template: TemplateRef<any>) {}\n}\n", "import { Directive, TemplateRef, ContentChild, Input, OnChanges, SimpleChanges } from '@angular/core';\nimport { DataTableColumnHeaderDirective } from './column-header.directive';\nimport { DataTableColumnCellDirective } from './column-cell.directive';\nimport { DataTableColumnCellTreeToggle } from './tree.directive';\nimport { ColumnChangesService } from '../../services/column-changes.service';\nimport { TableColumnProp } from '../../types/table-column.type';\n\n@Directive({ selector: 'ngx-datatable-column' })\nexport class DataTableColumnDirective implements OnChanges {\n  @Input() name: string;\n  @Input() prop: TableColumnProp;\n  @Input() frozenLeft: any;\n  @Input() frozenRight: any;\n  @Input() flexGrow: number;\n  @Input() resizeable: boolean;\n  @Input() comparator: any;\n  @Input() pipe: any;\n  @Input() sortable: boolean;\n  @Input() draggable: boolean;\n  @Input() canAutoResize: boolean;\n  @Input() minWidth: number;\n  @Input() width: number;\n  @Input() maxWidth: number;\n  @Input() checkboxable: boolean;\n  @Input() headerCheckboxable: boolean;\n  @Input() headerClass: string | ((data: any) => string | any);\n  @Input() cellClass: string | ((data: any) => string | any);\n  @Input() isTreeColumn: boolean;\n  @Input() treeLevelIndent: number;\n  @Input() summaryFunc: (cells: any[]) => any;\n  @Input() summaryTemplate: TemplateRef<any>;\n\n  @Input('cellTemplate')\n  _cellTemplateInput: TemplateRef<any>;\n\n  @ContentChild(DataTableColumnCellDirective, { read: TemplateRef, static: true })\n  _cellTemplateQuery: TemplateRef<any>;\n\n  get cellTemplate(): TemplateRef<any> {\n    return this._cellTemplateInput || this._cellTemplateQuery;\n  }\n\n  @Input('headerTemplate')\n  _headerTemplateInput: TemplateRef<any>;\n\n  @ContentChild(DataTableColumnHeaderDirective, { read: TemplateRef, static: true })\n  _headerTemplateQuery: TemplateRef<any>;\n\n  get headerTemplate(): TemplateRef<any> {\n    return this._headerTemplateInput || this._headerTemplateQuery;\n  }\n\n  @Input('treeToggleTemplate')\n  _treeToggleTemplateInput: TemplateRef<any>;\n\n  @ContentChild(DataTableColumnCellTreeToggle, { read: TemplateRef, static: true })\n  _treeToggleTemplateQuery: TemplateRef<any>;\n\n  get treeToggleTemplate(): TemplateRef<any> {\n    return this._treeToggleTemplateInput || this._treeToggleTemplateQuery;\n  }\n\n  private isFirstChange = true;\n\n  constructor(private columnChangesService: ColumnChangesService) {}\n\n  ngOnChanges() {\n    if (this.isFirstChange) {\n      this.isFirstChange = false;\n    } else {\n      this.columnChangesService.onInputChange();\n    }\n  }\n}\n", "import { Directive, TemplateRef } from '@angular/core';\n\n@Directive({\n  selector: '[ngx-datatable-row-detail-template]'\n})\nexport class DatatableRowDetailTemplateDirective {\n  constructor(public template: TemplateRef<any>) {}\n}\n", "import { Input, Output, EventEmitter, Directive, TemplateRef, ContentChild } from '@angular/core';\nimport { DatatableRowDetailTemplateDirective } from './row-detail-template.directive';\n\n@Directive({ selector: 'ngx-datatable-row-detail' })\nexport class DatatableRowDetailDirective {\n  /**\n   * The detail row height is required especially\n   * when virtual scroll is enabled.\n   */\n  @Input() rowHeight: number | ((row?: any, index?: number) => number) = 0;\n\n  @Input('template')\n  _templateInput: TemplateRef<any>;\n\n  @ContentChild(DatatableRowDetailTemplateDirective, { read: TemplateRef, static: true })\n  _templateQuery: TemplateRef<any>;\n\n  get template(): TemplateRef<any> {\n    return this._templateInput || this._templateQuery;\n  }\n\n  /**\n   * Row detail row visbility was toggled.\n   */\n  @Output() toggle: EventEmitter<any> = new EventEmitter();\n\n  /**\n   * Toggle the expansion of the row\n   */\n  toggleExpandRow(row: any): void {\n    this.toggle.emit({\n      type: 'row',\n      value: row\n    });\n  }\n\n  /**\n   * API method to expand all the rows.\n   */\n  expandAllRows(): void {\n    this.toggle.emit({\n      type: 'all',\n      value: true\n    });\n  }\n\n  /**\n   * API method to collapse all the rows.\n   */\n  collapseAllRows(): void {\n    this.toggle.emit({\n      type: 'all',\n      value: false\n    });\n  }\n}\n", "import { Input, Directive, TemplateRef, ContentChild } from '@angular/core';\nimport { DataTableFooterTemplateDirective } from './footer-template.directive';\n\n@Directive({ selector: 'ngx-datatable-footer' })\nexport class DatatableFooterDirective {\n  @Input() footerHeight: number;\n  @Input() totalMessage: string;\n  @Input() selectedMessage: string | boolean;\n  @Input() pagerLeftArrowIcon: string;\n  @Input() pagerRightArrowIcon: string;\n  @Input() pagerPreviousIcon: string;\n  @Input() pagerNextIcon: string;\n\n  @Input('template')\n  _templateInput: TemplateRef<any>;\n\n  @ContentChild(DataTableFooterTemplateDirective, { read: TemplateRef })\n  _templateQuery: TemplateRef<any>;\n\n  get template(): TemplateRef<any> {\n    return this._templateInput || this._templateQuery;\n  }\n}\n", "/**\n * Returns the columns by pin.\n */\nexport function columnsByPin(cols: any[]) {\n  const ret: { left: any; center: any; right: any } = {\n    left: [],\n    center: [],\n    right: []\n  };\n\n  if (cols) {\n    for (const col of cols) {\n      if (col.frozenLeft) {\n        ret.left.push(col);\n      } else if (col.frozenRight) {\n        ret.right.push(col);\n      } else {\n        ret.center.push(col);\n      }\n    }\n  }\n\n  return ret;\n}\n\n/**\n * Returns the widths of all group sets of a column\n */\nexport function columnGroupWidths(groups: any, all: any) {\n  return {\n    left: columnTotalWidth(groups.left),\n    center: columnTotalWidth(groups.center),\n    right: columnTotalWidth(groups.right),\n    total: Math.floor(columnTotalWidth(all))\n  };\n}\n\n/**\n * Calculates the total width of all columns and their groups\n */\nexport function columnTotalWidth(columns: any[], prop?: string) {\n  let totalWidth = 0;\n\n  if (columns) {\n    for (const c of columns) {\n      const has = prop && c[prop];\n      const width = has ? c[prop] : c.width;\n      totalWidth = totalWidth + parseFloat(width);\n    }\n  }\n\n  return totalWidth;\n}\n\n/**\n * Calculates the total width of all columns and their groups\n */\nexport function columnsTotalWidth(columns: any, prop?: any) {\n  let totalWidth = 0;\n\n  for (const column of columns) {\n    const has = prop && column[prop];\n    totalWidth = totalWidth + (has ? column[prop] : column.width);\n  }\n\n  return totalWidth;\n}\n\nexport function columnsByPinArr(val: any) {\n  const colsByPinArr = [];\n  const colsByPin = columnsByPin(val);\n\n  colsByPinArr.push({ type: 'left', columns: colsByPin['left'] });\n  colsByPinArr.push({ type: 'center', columns: colsByPin['center'] });\n  colsByPinArr.push({ type: 'right', columns: colsByPin['right'] });\n\n  return colsByPinArr;\n}\n", "/**\n * This object contains the cache of the various row heights that are present inside\n * the data table.   Its based on Fenwick tree data structure that helps with\n * querying sums that have time complexity of log n.\n *\n * Fenwick Tree Credits: http://petr-mitrichev.blogspot.com/2013/05/fenwick-tree-range-updates.html\n * https://github.com/mikolalysenko/fenwick-tree\n *\n */\nexport class RowHeightCache {\n  /**\n   * Tree Array stores the cumulative information of the row heights to perform efficient\n   * range queries and updates.  Currently the tree is initialized to the base row\n   * height instead of the detail row height.\n   */\n  private treeArray: number[] = [];\n\n  /**\n   * Clear the Tree array.\n   */\n  clearCache(): void {\n    this.treeArray = [];\n  }\n\n  /**\n   * Initialize the Fenwick tree with row Heights.\n   *\n   * @param rows The array of rows which contain the expanded status.\n   * @param rowHeight The row height.\n   * @param detailRowHeight The detail row height.\n   */\n  initCache(details: any): void {\n    const { rows, rowHeight, detailRowHeight, externalVirtual, rowCount, rowIndexes, rowExpansions } = details;\n    const isFn = typeof rowHeight === 'function';\n    const isDetailFn = typeof detailRowHeight === 'function';\n\n    if (!isFn && isNaN(rowHeight)) {\n      throw new Error(`Row Height cache initialization failed. Please ensure that 'rowHeight' is a\n        valid number or function value: (${rowHeight}) when 'scrollbarV' is enabled.`);\n    }\n\n    // Add this additional guard in case detailRowHeight is set to 'auto' as it wont work.\n    if (!isDetailFn && isNaN(detailRowHeight)) {\n      throw new Error(`Row Height cache initialization failed. Please ensure that 'detailRowHeight' is a\n        valid number or function value: (${detailRowHeight}) when 'scrollbarV' is enabled.`);\n    }\n\n    const n = externalVirtual ? rowCount : rows.length;\n    this.treeArray = new Array(n);\n\n    for (let i = 0; i < n; ++i) {\n      this.treeArray[i] = 0;\n    }\n\n    for (let i = 0; i < n; ++i) {\n      const row = rows[i];\n      let currentRowHeight = rowHeight;\n      if (isFn) {\n        currentRowHeight = rowHeight(row);\n      }\n\n      // Add the detail row height to the already expanded rows.\n      // This is useful for the table that goes through a filter or sort.\n      const expanded = rowExpansions.has(row);\n      if (row && expanded) {\n        if (isDetailFn) {\n          const index = rowIndexes.get(row);\n          currentRowHeight += detailRowHeight(row, index);\n        } else {\n          currentRowHeight += detailRowHeight;\n        }\n      }\n\n      this.update(i, currentRowHeight);\n    }\n  }\n\n  /**\n   * Given the ScrollY position i.e. sum, provide the rowIndex\n   * that is present in the current view port.  Below handles edge cases.\n   */\n  getRowIndex(scrollY: number): number {\n    if (scrollY === 0) return 0;\n    return this.calcRowIndex(scrollY);\n  }\n\n  /**\n   * When a row is expanded or rowHeight is changed, update the height.  This can\n   * be utilized in future when Angular Data table supports dynamic row heights.\n   */\n  update(atRowIndex: number, byRowHeight: number): void {\n    if (!this.treeArray.length) {\n      throw new Error(`Update at index ${atRowIndex} with value ${byRowHeight} failed:\n        Row Height cache not initialized.`);\n    }\n\n    const n = this.treeArray.length;\n    atRowIndex |= 0;\n\n    while (atRowIndex < n) {\n      this.treeArray[atRowIndex] += byRowHeight;\n      atRowIndex |= atRowIndex + 1;\n    }\n  }\n\n  /**\n   * Range Sum query from 1 to the rowIndex\n   */\n  query(atIndex: number): number {\n    if (!this.treeArray.length) {\n      throw new Error(`query at index ${atIndex} failed: Fenwick tree array not initialized.`);\n    }\n\n    let sum = 0;\n    atIndex |= 0;\n\n    while (atIndex >= 0) {\n      sum += this.treeArray[atIndex];\n      atIndex = (atIndex & (atIndex + 1)) - 1;\n    }\n\n    return sum;\n  }\n\n  /**\n   * Find the total height between 2 row indexes\n   */\n  queryBetween(atIndexA: number, atIndexB: number): number {\n    return this.query(atIndexB) - this.query(atIndexA - 1);\n  }\n\n  /**\n   * Given the ScrollY position i.e. sum, provide the rowIndex\n   * that is present in the current view port.\n   */\n  private calcRowIndex(sum: number): number {\n    if (!this.treeArray.length) return 0;\n\n    let pos = -1;\n    const dataLength = this.treeArray.length;\n\n    // Get the highest bit for the block size.\n    const highestBit = Math.pow(2, dataLength.toString(2).length - 1);\n\n    for (let blockSize = highestBit; blockSize !== 0; blockSize >>= 1) {\n      const nextPos = pos + blockSize;\n      if (nextPos < dataLength && sum >= this.treeArray[nextPos]) {\n        sum -= this.treeArray[nextPos];\n        pos = nextPos;\n      }\n    }\n\n    return pos + 1;\n  }\n}\n", "import { camelCase } from './camel-case';\n\nconst cache = {};\nconst testStyle = typeof document !== 'undefined' ? document.createElement('div').style : undefined;\n\n// Get Prefix\n// http://davidwalsh.name/vendor-prefix\nconst prefix = (function () {\n  const styles = typeof window !== 'undefined' ? window.getComputedStyle(document.documentElement, '') : undefined;\n  const match =\n    typeof styles !== 'undefined'\n      ? Array.prototype.slice\n          .call(styles)\n          .join('')\n          .match(/-(moz|webkit|ms)-/)\n      : null;\n  const pre = match !== null ? match[1] : undefined;\n  // tslint:disable-next-line: tsr-detect-non-literal-regexp\n  const dom = typeof pre !== 'undefined' ? 'WebKit|Moz|MS|O'.match(new RegExp('(' + pre + ')', 'i'))[1] : undefined;\n\n  return dom\n    ? {\n        dom,\n        lowercase: pre,\n        css: `-${pre}-`,\n        js: pre[0].toUpperCase() + pre.substr(1)\n      }\n    : undefined;\n})();\n\nexport function getVendorPrefixedName(property: string) {\n  const name = camelCase(property);\n\n  if (!cache[name]) {\n    if (prefix !== undefined && testStyle[prefix.css + property] !== undefined) {\n      cache[name] = prefix.css + property;\n    } else if (testStyle[property] !== undefined) {\n      cache[name] = property;\n    }\n  }\n\n  return cache[name];\n}\n", "import { getVendorPrefixedName } from './prefixes';\nimport { camelCase } from './camel-case';\n\n// browser detection and prefixing tools\nconst transform = typeof window !== 'undefined' ? getVendorPrefixedName('transform') : undefined;\nconst backfaceVisibility = typeof window !== 'undefined' ? getVendorPrefixedName('backfaceVisibility') : undefined;\nconst hasCSSTransforms = typeof window !== 'undefined' ? !!getVendorPrefixedName('transform') : undefined;\nconst hasCSS3DTransforms = typeof window !== 'undefined' ? !!getVendorPrefixedName('perspective') : undefined;\nconst ua = typeof window !== 'undefined' ? window.navigator.userAgent : 'Chrome';\nconst isSafari = /Safari\\//.test(ua) && !/Chrome\\//.test(ua);\n\nexport function translateXY(styles: any, x: number, y: number) {\n  if (typeof transform !== 'undefined' && hasCSSTransforms) {\n    if (!isSafari && hasCSS3DTransforms) {\n      styles[transform] = `translate3d(${x}px, ${y}px, 0)`;\n      styles[backfaceVisibility] = 'hidden';\n    } else {\n      styles[camelCase(transform)] = `translate(${x}px, ${y}px)`;\n    }\n  } else {\n    styles.top = `${y}px`;\n    styles.left = `${x}px`;\n  }\n}\n", "import { Component, ChangeDetectionStrategy } from '@angular/core';\n\n@Component({\n  selector: 'datatable-progress',\n  template: `\n    <div class=\"progress-linear\" role=\"progressbar\">\n      <div class=\"container\">\n        <div class=\"bar\"></div>\n      </div>\n    </div>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ProgressBarComponent {}\n", "export function selectRows(selected: any[], row: any, comparefn: any) {\n  const selectedIndex = comparefn(row, selected);\n\n  if (selectedIndex > -1) {\n    selected.splice(selectedIndex, 1);\n  } else {\n    selected.push(row);\n  }\n\n  return selected;\n}\n\nexport function selectRowsBetween(\n  selected: any[],\n  rows: any[],\n  index: number,\n  prevIndex: number,\n  comparefn: any\n): any[] {\n  const reverse = index < prevIndex;\n\n  for (let i = 0; i < rows.length; i++) {\n    const row = rows[i];\n    const greater = i >= prevIndex && i <= index;\n    const lesser = i <= prevIndex && i >= index;\n\n    let range = { start: 0, end: 0 };\n    if (reverse) {\n      range = {\n        start: index,\n        end: prevIndex\n      };\n    } else {\n      range = {\n        start: prevIndex,\n        end: index + 1\n      };\n    }\n\n    if ((reverse && lesser) || (!reverse && greater)) {\n      // if in the positive range to be added to `selected`, and\n      // not already in the selected array, add it\n      if (i >= range.start && i <= range.end) {\n        selected.push(row);\n      }\n    }\n  }\n\n  return selected;\n}\n", "export enum Keys {\n  up = 38,\n  down = 40,\n  return = 13,\n  escape = 27,\n  left = 37,\n  right = 39\n}\n", "import { Component, Input, Output, EventEmitter, ChangeDetectionStrategy } from '@angular/core';\nimport { SelectionType } from '../../types/selection.type';\nimport { selectRowsBetween, selectRows } from '../../utils/selection';\nimport { Keys } from '../../utils/keys';\n\nexport interface Model {\n  type: string;\n  event: MouseEvent | KeyboardEvent;\n  row: any;\n  rowElement: any;\n  cellElement: any;\n  cellIndex: number;\n}\n\n@Component({\n  selector: 'datatable-selection',\n  template: ` <ng-content></ng-content> `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class DataTableSelectionComponent {\n  @Input() rows: any[];\n  @Input() selected: any[];\n  @Input() selectEnabled: boolean;\n  @Input() selectionType: SelectionType;\n  @Input() rowIdentity: any;\n  @Input() selectCheck: any;\n\n  @Output() activate: EventEmitter<any> = new EventEmitter();\n  @Output() select: EventEmitter<any> = new EventEmitter();\n\n  prevIndex: number;\n\n  selectRow(event: KeyboardEvent | MouseEvent, index: number, row: any): void {\n    if (!this.selectEnabled) return;\n\n    const chkbox = this.selectionType === SelectionType.checkbox;\n    const multi = this.selectionType === SelectionType.multi;\n    const multiClick = this.selectionType === SelectionType.multiClick;\n    let selected: any[] = [];\n\n    if (multi || chkbox || multiClick) {\n      if (event.shiftKey) {\n        selected = selectRowsBetween([], this.rows, index, this.prevIndex, this.getRowSelectedIdx.bind(this));\n      } else if (event.ctrlKey || event.metaKey || multiClick || chkbox) {\n        selected = selectRows([...this.selected], row, this.getRowSelectedIdx.bind(this));\n      } else {\n        selected = selectRows([], row, this.getRowSelectedIdx.bind(this));\n      }\n    } else {\n      selected = selectRows([], row, this.getRowSelectedIdx.bind(this));\n    }\n\n    if (typeof this.selectCheck === 'function') {\n      selected = selected.filter(this.selectCheck.bind(this));\n    }\n\n    this.selected.splice(0, this.selected.length);\n    this.selected.push(...selected);\n\n    this.prevIndex = index;\n\n    this.select.emit({\n      selected\n    });\n  }\n\n  onActivate(model: Model, index: number): void {\n    const { type, event, row } = model;\n    const chkbox = this.selectionType === SelectionType.checkbox;\n    const select = (!chkbox && (type === 'click' || type === 'dblclick')) || (chkbox && type === 'checkbox');\n\n    if (select) {\n      this.selectRow(event, index, row);\n    } else if (type === 'keydown') {\n      if ((<KeyboardEvent>event).keyCode === Keys.return) {\n        this.selectRow(event, index, row);\n      } else {\n        this.onKeyboardFocus(model);\n      }\n    }\n    this.activate.emit(model);\n  }\n\n  onKeyboardFocus(model: Model): void {\n    const { keyCode } = <KeyboardEvent>model.event;\n    const shouldFocus = keyCode === Keys.up || keyCode === Keys.down || keyCode === Keys.right || keyCode === Keys.left;\n\n    if (shouldFocus) {\n      const isCellSelection = this.selectionType === SelectionType.cell;\n\n      if (!model.cellElement || !isCellSelection) {\n        this.focusRow(model.rowElement, keyCode);\n      } else if (isCellSelection) {\n        this.focusCell(model.cellElement, model.rowElement, keyCode, model.cellIndex);\n      }\n    }\n  }\n\n  focusRow(rowElement: any, keyCode: number): void {\n    const nextRowElement = this.getPrevNextRow(rowElement, keyCode);\n    if (nextRowElement) nextRowElement.focus();\n  }\n\n  getPrevNextRow(rowElement: any, keyCode: number): any {\n    const parentElement = rowElement.parentElement;\n\n    if (parentElement) {\n      let focusElement: HTMLElement;\n      if (keyCode === Keys.up) {\n        focusElement = parentElement.previousElementSibling;\n      } else if (keyCode === Keys.down) {\n        focusElement = parentElement.nextElementSibling;\n      }\n\n      if (focusElement && focusElement.children.length) {\n        return focusElement.children[0];\n      }\n    }\n  }\n\n  focusCell(cellElement: any, rowElement: any, keyCode: number, cellIndex: number): void {\n    let nextCellElement: HTMLElement;\n\n    if (keyCode === Keys.left) {\n      nextCellElement = cellElement.previousElementSibling;\n    } else if (keyCode === Keys.right) {\n      nextCellElement = cellElement.nextElementSibling;\n    } else if (keyCode === Keys.up || keyCode === Keys.down) {\n      const nextRowElement = this.getPrevNextRow(rowElement, keyCode);\n      if (nextRowElement) {\n        const children = nextRowElement.getElementsByClassName('datatable-body-cell');\n        if (children.length) nextCellElement = children[cellIndex];\n      }\n    }\n\n    if (nextCellElement) nextCellElement.focus();\n  }\n\n  getRowSelected(row: any): boolean {\n    return this.getRowSelectedIdx(row, this.selected) > -1;\n  }\n\n  getRowSelectedIdx(row: any, selected: any[]): number {\n    if (!selected || !selected.length) return -1;\n\n    const rowId = this.rowIdentity(row);\n    return selected.findIndex(r => {\n      const id = this.rowIdentity(r);\n      return id === rowId;\n    });\n  }\n}\n", "export enum SortDirection {\n  asc = 'asc',\n  desc = 'desc'\n}\n", "import {\n  Component,\n  Input,\n  PipeTransform,\n  HostBinding,\n  ViewChild,\n  ChangeDetectorRef,\n  Output,\n  EventEmitter,\n  HostListener,\n  ElementRef,\n  ViewContainerRef,\n  OnDestroy,\n  DoCheck,\n  ChangeDetectionStrategy\n} from '@angular/core';\n\nimport { TableColumn } from '../../types/table-column.type';\nimport { SortDirection } from '../../types/sort-direction.type';\nimport { Keys } from '../../utils/keys';\n\nexport type TreeStatus = 'collapsed' | 'expanded' | 'loading' | 'disabled';\n\n@Component({\n  selector: 'datatable-body-cell',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  template: `\n    <div class=\"datatable-body-cell-label\" [style.margin-left.px]=\"calcLeftMargin(column, row)\">\n      <label\n        *ngIf=\"column.checkboxable && (!displayCheck || displayCheck(row, column, value))\"\n        class=\"datatable-checkbox\"\n      >\n        <input type=\"checkbox\" [checked]=\"isSelected\" (click)=\"onCheckboxChange($event)\" />\n      </label>\n      <ng-container *ngIf=\"column.isTreeColumn\">\n        <button\n          *ngIf=\"!column.treeToggleTemplate\"\n          class=\"datatable-tree-button\"\n          [disabled]=\"treeStatus === 'disabled'\"\n          (click)=\"onTreeAction()\"\n        >\n          <span>\n            <i *ngIf=\"treeStatus === 'loading'\" class=\"icon datatable-icon-collapse\"></i>\n            <i *ngIf=\"treeStatus === 'collapsed'\" class=\"icon datatable-icon-up\"></i>\n            <i *ngIf=\"treeStatus === 'expanded' || treeStatus === 'disabled'\" class=\"icon datatable-icon-down\"></i>\n          </span>\n        </button>\n        <ng-template\n          *ngIf=\"column.treeToggleTemplate\"\n          [ngTemplateOutlet]=\"column.treeToggleTemplate\"\n          [ngTemplateOutletContext]=\"{ cellContext: cellContext }\"\n        >\n        </ng-template>\n      </ng-container>\n\n      <span *ngIf=\"!column.cellTemplate\" [title]=\"sanitizedValue\" [innerHTML]=\"value\"> </span>\n      <ng-template\n        #cellTemplate\n        *ngIf=\"column.cellTemplate\"\n        [ngTemplateOutlet]=\"column.cellTemplate\"\n        [ngTemplateOutletContext]=\"cellContext\"\n      >\n      </ng-template>\n    </div>\n  `\n})\nexport class DataTableBodyCellComponent implements DoCheck, OnDestroy {\n  @Input() displayCheck: (row: any, column?: TableColumn, value?: any) => boolean;\n\n  @Input() set group(group: any) {\n    this._group = group;\n    this.cellContext.group = group;\n    this.checkValueUpdates();\n    this.cd.markForCheck();\n  }\n\n  get group() {\n    return this._group;\n  }\n\n  @Input() set rowHeight(val: number) {\n    this._rowHeight = val;\n    this.cellContext.rowHeight = val;\n    this.checkValueUpdates();\n    this.cd.markForCheck();\n  }\n\n  get rowHeight() {\n    return this._rowHeight;\n  }\n\n  @Input() set isSelected(val: boolean) {\n    this._isSelected = val;\n    this.cellContext.isSelected = val;\n    this.cd.markForCheck();\n  }\n\n  get isSelected(): boolean {\n    return this._isSelected;\n  }\n\n  @Input() set expanded(val: boolean) {\n    this._expanded = val;\n    this.cellContext.expanded = val;\n    this.cd.markForCheck();\n  }\n\n  get expanded(): boolean {\n    return this._expanded;\n  }\n\n  @Input() set rowIndex(val: number) {\n    this._rowIndex = val;\n    this.cellContext.rowIndex = val;\n    this.checkValueUpdates();\n    this.cd.markForCheck();\n  }\n\n  get rowIndex(): number {\n    return this._rowIndex;\n  }\n\n  @Input() set column(column: TableColumn) {\n    this._column = column;\n    this.cellContext.column = column;\n    this.checkValueUpdates();\n    this.cd.markForCheck();\n  }\n\n  get column(): TableColumn {\n    return this._column;\n  }\n\n  @Input() set row(row: any) {\n    this._row = row;\n    this.cellContext.row = row;\n    this.checkValueUpdates();\n    this.cd.markForCheck();\n  }\n\n  get row(): any {\n    return this._row;\n  }\n\n  @Input() set sorts(val: any[]) {\n    this._sorts = val;\n    this.calcSortDir = this.calcSortDir(val);\n  }\n\n  get sorts(): any[] {\n    return this._sorts;\n  }\n\n  @Input() set treeStatus(status: TreeStatus) {\n    if (status !== 'collapsed' && status !== 'expanded' && status !== 'loading' && status !== 'disabled') {\n      this._treeStatus = 'collapsed';\n    } else {\n      this._treeStatus = status;\n    }\n    this.cellContext.treeStatus = this._treeStatus;\n    this.checkValueUpdates();\n    this.cd.markForCheck();\n  }\n\n  get treeStatus(): TreeStatus {\n    return this._treeStatus;\n  }\n\n  @Output() activate: EventEmitter<any> = new EventEmitter();\n\n  @Output() treeAction: EventEmitter<any> = new EventEmitter();\n\n  @ViewChild('cellTemplate', { read: ViewContainerRef, static: true })\n  cellTemplate: ViewContainerRef;\n\n  @HostBinding('class')\n  get columnCssClasses(): any {\n    let cls = 'datatable-body-cell';\n    if (this.column.cellClass) {\n      if (typeof this.column.cellClass === 'string') {\n        cls += ' ' + this.column.cellClass;\n      } else if (typeof this.column.cellClass === 'function') {\n        const res = this.column.cellClass({\n          row: this.row,\n          group: this.group,\n          column: this.column,\n          value: this.value,\n          rowHeight: this.rowHeight\n        });\n\n        if (typeof res === 'string') {\n          cls += ' ' + res;\n        } else if (typeof res === 'object') {\n          const keys = Object.keys(res);\n          for (const k of keys) {\n            if (res[k] === true) {\n              cls += ` ${k}`;\n            }\n          }\n        }\n      }\n    }\n    if (!this.sortDir) {\n      cls += ' sort-active';\n    }\n    if (this.isFocused) {\n      cls += ' active';\n    }\n    if (this.sortDir === SortDirection.asc) {\n      cls += ' sort-asc';\n    }\n    if (this.sortDir === SortDirection.desc) {\n      cls += ' sort-desc';\n    }\n\n    return cls;\n  }\n\n  @HostBinding('style.width.px')\n  get width(): number {\n    return this.column.width;\n  }\n\n  @HostBinding('style.minWidth.px')\n  get minWidth(): number {\n    return this.column.minWidth;\n  }\n\n  @HostBinding('style.maxWidth.px')\n  get maxWidth(): number {\n    return this.column.maxWidth;\n  }\n\n  @HostBinding('style.height')\n  get height(): string | number {\n    const height = this.rowHeight;\n    if (isNaN(height)) {\n      return height;\n    }\n    return height + 'px';\n  }\n\n  sanitizedValue: any;\n  value: any;\n  sortDir: SortDirection;\n  isFocused = false;\n  onCheckboxChangeFn = this.onCheckboxChange.bind(this);\n  activateFn = this.activate.emit.bind(this.activate);\n\n  cellContext: any;\n\n  private _isSelected: boolean;\n  private _sorts: any[];\n  private _column: TableColumn;\n  private _row: any;\n  private _group: any;\n  private _rowHeight: number;\n  private _rowIndex: number;\n  private _expanded: boolean;\n  private _element: any;\n  private _treeStatus: TreeStatus;\n\n  constructor(element: ElementRef, private cd: ChangeDetectorRef) {\n    this.cellContext = {\n      onCheckboxChangeFn: this.onCheckboxChangeFn,\n      activateFn: this.activateFn,\n      row: this.row,\n      group: this.group,\n      value: this.value,\n      column: this.column,\n      rowHeight: this.rowHeight,\n      isSelected: this.isSelected,\n      rowIndex: this.rowIndex,\n      treeStatus: this.treeStatus,\n      onTreeAction: this.onTreeAction.bind(this)\n    };\n\n    this._element = element.nativeElement;\n  }\n\n  ngDoCheck(): void {\n    this.checkValueUpdates();\n  }\n\n  ngOnDestroy(): void {\n    if (this.cellTemplate) {\n      this.cellTemplate.clear();\n    }\n  }\n\n  checkValueUpdates(): void {\n    let value = '';\n\n    if (!this.row || !this.column) {\n      value = '';\n    } else {\n      const val = this.column.$$valueGetter(this.row, this.column.prop);\n      const userPipe: PipeTransform = this.column.pipe;\n\n      if (userPipe) {\n        value = userPipe.transform(val);\n      } else if (value !== undefined) {\n        value = val;\n      }\n    }\n\n    if (this.value !== value) {\n      this.value = value;\n      this.cellContext.value = value;\n      this.sanitizedValue = value !== null && value !== undefined ? this.stripHtml(value) : value;\n      this.cd.markForCheck();\n    }\n  }\n\n  @HostListener('focus')\n  onFocus(): void {\n    this.isFocused = true;\n  }\n\n  @HostListener('blur')\n  onBlur(): void {\n    this.isFocused = false;\n  }\n\n  @HostListener('click', ['$event'])\n  onClick(event: MouseEvent): void {\n    this.activate.emit({\n      type: 'click',\n      event,\n      row: this.row,\n      group: this.group,\n      rowHeight: this.rowHeight,\n      column: this.column,\n      value: this.value,\n      cellElement: this._element\n    });\n  }\n\n  @HostListener('dblclick', ['$event'])\n  onDblClick(event: MouseEvent): void {\n    this.activate.emit({\n      type: 'dblclick',\n      event,\n      row: this.row,\n      group: this.group,\n      rowHeight: this.rowHeight,\n      column: this.column,\n      value: this.value,\n      cellElement: this._element\n    });\n  }\n\n  @HostListener('keydown', ['$event'])\n  onKeyDown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isTargetCell = event.target === this._element;\n\n    const isAction =\n      keyCode === Keys.return ||\n      keyCode === Keys.down ||\n      keyCode === Keys.up ||\n      keyCode === Keys.left ||\n      keyCode === Keys.right;\n\n    if (isAction && isTargetCell) {\n      event.preventDefault();\n      event.stopPropagation();\n\n      this.activate.emit({\n        type: 'keydown',\n        event,\n        row: this.row,\n        group: this.group,\n        rowHeight: this.rowHeight,\n        column: this.column,\n        value: this.value,\n        cellElement: this._element\n      });\n    }\n  }\n\n  onCheckboxChange(event: any): void {\n    this.activate.emit({\n      type: 'checkbox',\n      event,\n      row: this.row,\n      group: this.group,\n      rowHeight: this.rowHeight,\n      column: this.column,\n      value: this.value,\n      cellElement: this._element,\n      treeStatus: 'collapsed'\n    });\n  }\n\n  calcSortDir(sorts: any[]): any {\n    if (!sorts) {\n      return;\n    }\n\n    const sort = sorts.find((s: any) => {\n      return s.prop === this.column.prop;\n    });\n\n    if (sort) {\n      return sort.dir;\n    }\n  }\n\n  stripHtml(html: string): string {\n    if (!html.replace) {\n      return html;\n    }\n    return html.replace(/<\\/?[^>]+(>|$)/g, '');\n  }\n\n  onTreeAction() {\n    this.treeAction.emit(this.row);\n  }\n\n  calcLeftMargin(column: any, row: any) {\n    const levelIndent = column.treeLevelIndent != null ? column.treeLevelIndent : 50;\n    return column.isTreeColumn ? row.level * levelIndent : 0;\n  }\n}\n", "import {\n  Component,\n  Input,\n  HostBinding,\n  ElementRef,\n  Output,\n  KeyValueDiffers,\n  KeyValueDiffer,\n  EventEmitter,\n  HostListener,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  DoCheck,\n  SkipSelf\n} from '@angular/core';\n\nimport { TreeStatus } from './body-cell.component';\nimport { columnsByPin, columnGroupWidths, columnsByPinArr } from '../../utils/column';\nimport { Keys } from '../../utils/keys';\nimport { ScrollbarHelper } from '../../services/scrollbar-helper.service';\nimport { translateXY } from '../../utils/translate';\n\n@Component({\n  selector: 'datatable-body-row',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  template: `\n    <div\n      *ngFor=\"let colGroup of _columnsByPin; let i = index; trackBy: trackByGroups\"\n      class=\"datatable-row-{{ colGroup.type }} datatable-row-group\"\n      [ngStyle]=\"_groupStyles[colGroup.type]\"\n    >\n      <datatable-body-cell\n        role=\"cell\"\n        *ngFor=\"let column of colGroup.columns; let ii = index; trackBy: columnTrackingFn\"\n        tabindex=\"-1\"\n        [row]=\"row\"\n        [group]=\"group\"\n        [expanded]=\"expanded\"\n        [isSelected]=\"isSelected\"\n        [rowIndex]=\"rowIndex\"\n        [column]=\"column\"\n        [rowHeight]=\"rowHeight\"\n        [displayCheck]=\"displayCheck\"\n        [treeStatus]=\"treeStatus\"\n        (activate)=\"onActivate($event, ii)\"\n        (treeAction)=\"onTreeAction()\"\n      >\n      </datatable-body-cell>\n    </div>\n  `\n})\nexport class DataTableBodyRowComponent implements DoCheck {\n  @Input() set columns(val: any[]) {\n    this._columns = val;\n    this.recalculateColumns(val);\n    this.buildStylesByGroup();\n  }\n\n  get columns(): any[] {\n    return this._columns;\n  }\n\n  @Input() set innerWidth(val: number) {\n    if (this._columns) {\n      const colByPin = columnsByPin(this._columns);\n      this._columnGroupWidths = columnGroupWidths(colByPin, this._columns);\n    }\n\n    this._innerWidth = val;\n    this.recalculateColumns();\n    this.buildStylesByGroup();\n  }\n\n  get innerWidth(): number {\n    return this._innerWidth;\n  }\n\n  @Input() expanded: boolean;\n  @Input() rowClass: any;\n  @Input() row: any;\n  @Input() group: any;\n  @Input() isSelected: boolean;\n  @Input() rowIndex: number;\n  @Input() displayCheck: any;\n  @Input() treeStatus: TreeStatus = 'collapsed';\n\n  @Input()\n  set offsetX(val: number) {\n    this._offsetX = val;\n    this.buildStylesByGroup();\n  }\n  get offsetX() {\n    return this._offsetX;\n  }\n\n  @HostBinding('class')\n  get cssClass() {\n    let cls = 'datatable-body-row';\n    if (this.isSelected) {\n      cls += ' active';\n    }\n    if (this.rowIndex % 2 !== 0) {\n      cls += ' datatable-row-odd';\n    }\n    if (this.rowIndex % 2 === 0) {\n      cls += ' datatable-row-even';\n    }\n\n    if (this.rowClass) {\n      const res = this.rowClass(this.row);\n      if (typeof res === 'string') {\n        cls += ` ${res}`;\n      } else if (typeof res === 'object') {\n        const keys = Object.keys(res);\n        for (const k of keys) {\n          if (res[k] === true) {\n            cls += ` ${k}`;\n          }\n        }\n      }\n    }\n\n    return cls;\n  }\n\n  @HostBinding('style.height.px')\n  @Input()\n  rowHeight: number;\n\n  @HostBinding('style.width.px')\n  get columnsTotalWidths(): string {\n    return this._columnGroupWidths.total;\n  }\n\n  @Output() activate: EventEmitter<any> = new EventEmitter();\n  @Output() treeAction: EventEmitter<any> = new EventEmitter();\n\n  _element: any;\n  _columnGroupWidths: any;\n  _columnsByPin: any;\n  _offsetX: number;\n  _columns: any[];\n  _innerWidth: number;\n  _groupStyles: { [prop: string]: {} } = {\n    left: {},\n    center: {},\n    right: {}\n  };\n\n  private _rowDiffer: KeyValueDiffer<{}, {}>;\n\n  constructor(\n    private differs: KeyValueDiffers,\n    @SkipSelf() private scrollbarHelper: ScrollbarHelper,\n    private cd: ChangeDetectorRef,\n    element: ElementRef\n  ) {\n    this._element = element.nativeElement;\n    this._rowDiffer = differs.find({}).create();\n  }\n\n  ngDoCheck(): void {\n    if (this._rowDiffer.diff(this.row)) {\n      this.cd.markForCheck();\n    }\n  }\n\n  trackByGroups(index: number, colGroup: any): any {\n    return colGroup.type;\n  }\n\n  columnTrackingFn(index: number, column: any): any {\n    return column.$$id;\n  }\n\n  buildStylesByGroup() {\n    this._groupStyles.left = this.calcStylesByGroup('left');\n    this._groupStyles.center = this.calcStylesByGroup('center');\n    this._groupStyles.right = this.calcStylesByGroup('right');\n    this.cd.markForCheck();\n  }\n\n  calcStylesByGroup(group: string) {\n    const widths = this._columnGroupWidths;\n    const offsetX = this.offsetX;\n\n    const styles = {\n      width: `${widths[group]}px`\n    };\n\n    if (group === 'left') {\n      translateXY(styles, offsetX, 0);\n    } else if (group === 'right') {\n      const bodyWidth = parseInt(this.innerWidth + '', 0);\n      const totalDiff = widths.total - bodyWidth;\n      const offsetDiff = totalDiff - offsetX;\n      const offset = (offsetDiff + this.scrollbarHelper.width) * -1;\n      translateXY(styles, offset, 0);\n    }\n\n    return styles;\n  }\n\n  onActivate(event: any, index: number): void {\n    event.cellIndex = index;\n    event.rowElement = this._element;\n    this.activate.emit(event);\n  }\n\n  @HostListener('keydown', ['$event'])\n  onKeyDown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isTargetRow = event.target === this._element;\n\n    const isAction =\n      keyCode === Keys.return ||\n      keyCode === Keys.down ||\n      keyCode === Keys.up ||\n      keyCode === Keys.left ||\n      keyCode === Keys.right;\n\n    if (isAction && isTargetRow) {\n      event.preventDefault();\n      event.stopPropagation();\n\n      this.activate.emit({\n        type: 'keydown',\n        event,\n        row: this.row,\n        rowElement: this._element\n      });\n    }\n  }\n\n  @HostListener('mouseenter', ['$event'])\n  onMouseenter(event: any): void {\n    this.activate.emit({\n      type: 'mouseenter',\n      event,\n      row: this.row,\n      rowElement: this._element\n    });\n  }\n\n  recalculateColumns(val: any[] = this.columns): void {\n    this._columns = val;\n    const colsByPin = columnsByPin(this._columns);\n    this._columnsByPin = columnsByPinArr(this._columns);\n    this._columnGroupWidths = columnGroupWidths(colsByPin, this._columns);\n  }\n\n  onTreeAction() {\n    this.treeAction.emit();\n  }\n}\n", "import { Component, Input, OnChanges, PipeTransform, TemplateRef } from '@angular/core';\n\nexport interface ISummaryColumn {\n  summaryFunc?: (cells: any[]) => any;\n  summaryTemplate?: TemplateRef<any>;\n\n  prop: string;\n  pipe?: PipeTransform;\n}\n\nfunction defaultSumFunc(cells: any[]): any {\n  const cellsWithValues = cells.filter(cell => !!cell);\n\n  if (!cellsWithValues.length) {\n    return null;\n  }\n  if (cellsWithValues.some(cell => typeof cell !== 'number')) {\n    return null;\n  }\n\n  return cellsWithValues.reduce((res, cell) => res + cell);\n}\n\nfunction noopSumFunc(cells: any[]): void {\n  return null;\n}\n\n@Component({\n  selector: 'datatable-summary-row',\n  template: `\n    <datatable-body-row\n      *ngIf=\"summaryRow && _internalColumns\"\n      tabindex=\"-1\"\n      [innerWidth]=\"innerWidth\"\n      [offsetX]=\"offsetX\"\n      [columns]=\"_internalColumns\"\n      [rowHeight]=\"rowHeight\"\n      [row]=\"summaryRow\"\n      [rowIndex]=\"-1\"\n    >\n    </datatable-body-row>\n  `,\n  host: {\n    class: 'datatable-summary-row'\n  }\n})\nexport class DataTableSummaryRowComponent implements OnChanges {\n  @Input() rows: any[];\n  @Input() columns: ISummaryColumn[];\n\n  @Input() rowHeight: number;\n  @Input() offsetX: number;\n  @Input() innerWidth: number;\n\n  _internalColumns: ISummaryColumn[];\n  summaryRow: any = {};\n\n  ngOnChanges() {\n    if (!this.columns || !this.rows) {\n      return;\n    }\n    this.updateInternalColumns();\n    this.updateValues();\n  }\n\n  private updateInternalColumns() {\n    this._internalColumns = this.columns.map(col => ({\n      ...col,\n      cellTemplate: col.summaryTemplate\n    }));\n  }\n\n  private updateValues() {\n    this.summaryRow = {};\n\n    this.columns\n      .filter(col => !col.summaryTemplate)\n      .forEach(col => {\n        const cellsFromSingleColumn = this.rows.map(row => row[col.prop]);\n        const sumFunc = this.getSummaryFunction(col);\n\n        this.summaryRow[col.prop] = col.pipe\n          ? col.pipe.transform(sumFunc(cellsFromSingleColumn))\n          : sumFunc(cellsFromSingleColumn);\n      });\n  }\n\n  private getSummaryFunction(column: ISummaryColumn): (a: any[]) => any {\n    if (column.summaryFunc === undefined) {\n      return defaultSumFunc;\n    } else if (column.summaryFunc === null) {\n      return noopSumFunc;\n    } else {\n      return column.summaryFunc;\n    }\n  }\n}\n", "import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  HostListener,\n  DoCheck,\n  ChangeDetectionStrategy,\n  KeyValueDiffer,\n  ChangeDetectorRef,\n  KeyValueDiffers\n} from '@angular/core';\n\n@Component({\n  selector: 'datatable-row-wrapper',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  template: `\n    <div *ngIf=\"groupHeader && groupHeader.template\" class=\"datatable-group-header\" [ngStyle]=\"getGroupHeaderStyle()\">\n      <ng-template\n        *ngIf=\"groupHeader && groupHeader.template\"\n        [ngTemplateOutlet]=\"groupHeader.template\"\n        [ngTemplateOutletContext]=\"groupContext\"\n      >\n      </ng-template>\n    </div>\n    <ng-content *ngIf=\"(groupHeader && groupHeader.template && expanded) || !groupHeader || !groupHeader.template\">\n    </ng-content>\n    <div\n      *ngIf=\"rowDetail && rowDetail.template && expanded\"\n      [style.height.px]=\"detailRowHeight\"\n      class=\"datatable-row-detail\"\n    >\n      <ng-template\n        *ngIf=\"rowDetail && rowDetail.template\"\n        [ngTemplateOutlet]=\"rowDetail.template\"\n        [ngTemplateOutletContext]=\"rowContext\"\n      >\n      </ng-template>\n    </div>\n  `,\n  host: {\n    class: 'datatable-row-wrapper'\n  }\n})\nexport class DataTableRowWrapperComponent implements DoCheck {\n  @Input() innerWidth: number;\n  @Input() rowDetail: any;\n  @Input() groupHeader: any;\n  @Input() offsetX: number;\n  @Input() detailRowHeight: any;\n  @Input() row: any;\n  @Input() groupedRows: any;\n  @Output() rowContextmenu = new EventEmitter<{ event: MouseEvent; row: any }>(false);\n\n  @Input() set rowIndex(val: number) {\n    this._rowIndex = val;\n    this.rowContext.rowIndex = val;\n    this.groupContext.rowIndex = val;\n    this.cd.markForCheck();\n  }\n\n  get rowIndex(): number {\n    return this._rowIndex;\n  }\n\n  @Input() set expanded(val: boolean) {\n    this._expanded = val;\n    this.groupContext.expanded = val;\n    this.rowContext.expanded = val;\n    this.cd.markForCheck();\n  }\n\n  get expanded(): boolean {\n    return this._expanded;\n  }\n\n  groupContext: any;\n  rowContext: any;\n\n  private rowDiffer: KeyValueDiffer<{}, {}>;\n  private _expanded: boolean = false;\n  private _rowIndex: number;\n\n  constructor(private cd: ChangeDetectorRef, private differs: KeyValueDiffers) {\n    this.groupContext = {\n      group: this.row,\n      expanded: this.expanded,\n      rowIndex: this.rowIndex\n    };\n\n    this.rowContext = {\n      row: this.row,\n      expanded: this.expanded,\n      rowIndex: this.rowIndex\n    };\n\n    this.rowDiffer = differs.find({}).create();\n  }\n\n  ngDoCheck(): void {\n    if (this.rowDiffer.diff(this.row)) {\n      this.rowContext.row = this.row;\n      this.groupContext.group = this.row;\n      this.cd.markForCheck();\n    }\n  }\n\n  @HostListener('contextmenu', ['$event'])\n  onContextmenu($event: MouseEvent): void {\n    this.rowContextmenu.emit({ event: $event, row: this.row });\n  }\n\n  getGroupHeaderStyle(): any {\n    const styles = {};\n\n    styles['transform'] = 'translate3d(' + this.offsetX + 'px, 0px, 0px)';\n    styles['backface-visibility'] = 'hidden';\n    styles['width'] = this.innerWidth;\n\n    return styles;\n  }\n}\n", "import {\n  Component,\n  Output,\n  EventEmitter,\n  Input,\n  HostBinding,\n  ChangeDetectorRef,\n  ViewChild,\n  OnInit,\n  OnDestroy,\n  ChangeDetectionStrategy\n} from '@angular/core';\nimport { ScrollerComponent } from './scroller.component';\nimport { SelectionType } from '../../types/selection.type';\nimport { columnsByPin, columnGroupWidths } from '../../utils/column';\nimport { RowHeightCache } from '../../utils/row-height-cache';\nimport { translateXY } from '../../utils/translate';\n\n@Component({\n  selector: 'datatable-body',\n  template: `\n    <datatable-progress *ngIf=\"loadingIndicator\"> </datatable-progress>\n    <datatable-selection\n      #selector\n      [selected]=\"selected\"\n      [rows]=\"rows\"\n      [selectCheck]=\"selectCheck\"\n      [selectEnabled]=\"selectEnabled\"\n      [selectionType]=\"selectionType\"\n      [rowIdentity]=\"rowIdentity\"\n      (select)=\"select.emit($event)\"\n      (activate)=\"activate.emit($event)\"\n    >\n      <datatable-scroller\n        *ngIf=\"rows?.length\"\n        [scrollbarV]=\"scrollbarV\"\n        [scrollbarH]=\"scrollbarH\"\n        [scrollHeight]=\"scrollHeight\"\n        [scrollWidth]=\"columnGroupWidths?.total\"\n        (scroll)=\"onBodyScroll($event)\"\n      >\n        <datatable-summary-row\n          *ngIf=\"summaryRow && summaryPosition === 'top'\"\n          [rowHeight]=\"summaryHeight\"\n          [offsetX]=\"offsetX\"\n          [innerWidth]=\"innerWidth\"\n          [rows]=\"rows\"\n          [columns]=\"columns\"\n        >\n        </datatable-summary-row>\n        <datatable-row-wrapper\n          [groupedRows]=\"groupedRows\"\n          *ngFor=\"let group of temp; let i = index; trackBy: rowTrackingFn\"\n          [innerWidth]=\"innerWidth\"\n          [ngStyle]=\"getRowsStyles(group)\"\n          [rowDetail]=\"rowDetail\"\n          [groupHeader]=\"groupHeader\"\n          [offsetX]=\"offsetX\"\n          [detailRowHeight]=\"getDetailRowHeight(group && group[i], i)\"\n          [row]=\"group\"\n          [expanded]=\"getRowExpanded(group)\"\n          [rowIndex]=\"getRowIndex(group && group[i])\"\n          (rowContextmenu)=\"rowContextmenu.emit($event)\"\n        >\n          <datatable-body-row\n            role=\"row\"\n            *ngIf=\"!groupedRows; else groupedRowsTemplate\"\n            tabindex=\"-1\"\n            [isSelected]=\"selector.getRowSelected(group)\"\n            [innerWidth]=\"innerWidth\"\n            [offsetX]=\"offsetX\"\n            [columns]=\"columns\"\n            [rowHeight]=\"getRowHeight(group)\"\n            [row]=\"group\"\n            [rowIndex]=\"getRowIndex(group)\"\n            [expanded]=\"getRowExpanded(group)\"\n            [rowClass]=\"rowClass\"\n            [displayCheck]=\"displayCheck\"\n            [treeStatus]=\"group && group.treeStatus\"\n            (treeAction)=\"onTreeAction(group)\"\n            (activate)=\"selector.onActivate($event, indexes.first + i)\"\n          >\n          </datatable-body-row>\n          <ng-template #groupedRowsTemplate>\n            <datatable-body-row\n              role=\"row\"\n              *ngFor=\"let row of group.value; let i = index; trackBy: rowTrackingFn\"\n              tabindex=\"-1\"\n              [isSelected]=\"selector.getRowSelected(row)\"\n              [innerWidth]=\"innerWidth\"\n              [offsetX]=\"offsetX\"\n              [columns]=\"columns\"\n              [rowHeight]=\"getRowHeight(row)\"\n              [row]=\"row\"\n              [group]=\"group.value\"\n              [rowIndex]=\"getRowIndex(row)\"\n              [expanded]=\"getRowExpanded(row)\"\n              [rowClass]=\"rowClass\"\n              (activate)=\"selector.onActivate($event, i)\"\n            >\n            </datatable-body-row>\n          </ng-template>\n        </datatable-row-wrapper>\n        <datatable-summary-row\n          role=\"row\"\n          *ngIf=\"summaryRow && summaryPosition === 'bottom'\"\n          [ngStyle]=\"getBottomSummaryRowStyles()\"\n          [rowHeight]=\"summaryHeight\"\n          [offsetX]=\"offsetX\"\n          [innerWidth]=\"innerWidth\"\n          [rows]=\"rows\"\n          [columns]=\"columns\"\n        >\n        </datatable-summary-row>\n      </datatable-scroller>\n      <div class=\"empty-row\" *ngIf=\"!rows?.length && !loadingIndicator\" [innerHTML]=\"emptyMessage\"></div>\n    </datatable-selection>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    class: 'datatable-body'\n  }\n})\nexport class DataTableBodyComponent implements OnInit, OnDestroy {\n  @Input() scrollbarV: boolean;\n  @Input() scrollbarH: boolean;\n  @Input() loadingIndicator: boolean;\n  @Input() externalPaging: boolean;\n  @Input() rowHeight: number | 'auto' | ((row?: any) => number);\n  @Input() offsetX: number;\n  @Input() emptyMessage: string;\n  @Input() selectionType: SelectionType;\n  @Input() selected: any[] = [];\n  @Input() rowIdentity: any;\n  @Input() rowDetail: any;\n  @Input() groupHeader: any;\n  @Input() selectCheck: any;\n  @Input() displayCheck: any;\n  @Input() trackByProp: string;\n  @Input() rowClass: any;\n  @Input() groupedRows: any;\n  @Input() groupExpansionDefault: boolean;\n  @Input() innerWidth: number;\n  @Input() groupRowsBy: string;\n  @Input() virtualization: boolean;\n  @Input() summaryRow: boolean;\n  @Input() summaryPosition: string;\n  @Input() summaryHeight: number;\n\n  @Input() set pageSize(val: number) {\n    this._pageSize = val;\n    this.recalcLayout();\n  }\n\n  get pageSize(): number {\n    return this._pageSize;\n  }\n\n  @Input() set rows(val: any[]) {\n    this._rows = val;\n    this.recalcLayout();\n  }\n\n  get rows(): any[] {\n    return this._rows;\n  }\n\n  @Input() set columns(val: any[]) {\n    this._columns = val;\n    const colsByPin = columnsByPin(val);\n    this.columnGroupWidths = columnGroupWidths(colsByPin, val);\n  }\n\n  get columns(): any[] {\n    return this._columns;\n  }\n\n  @Input() set offset(val: number) {\n    this._offset = val;\n    if (!this.scrollbarV || (this.scrollbarV && !this.virtualization)) this.recalcLayout();\n  }\n\n  get offset(): number {\n    return this._offset;\n  }\n\n  @Input() set rowCount(val: number) {\n    this._rowCount = val;\n    this.recalcLayout();\n  }\n\n  get rowCount(): number {\n    return this._rowCount;\n  }\n\n  @HostBinding('style.width')\n  get bodyWidth(): string {\n    if (this.scrollbarH) {\n      return this.innerWidth + 'px';\n    } else {\n      return '100%';\n    }\n  }\n\n  @Input()\n  @HostBinding('style.height')\n  set bodyHeight(val) {\n    if (this.scrollbarV) {\n      this._bodyHeight = val + 'px';\n    } else {\n      this._bodyHeight = 'auto';\n    }\n\n    this.recalcLayout();\n  }\n\n  get bodyHeight() {\n    return this._bodyHeight;\n  }\n\n  @Output() scroll: EventEmitter<any> = new EventEmitter();\n  @Output() page: EventEmitter<any> = new EventEmitter();\n  @Output() activate: EventEmitter<any> = new EventEmitter();\n  @Output() select: EventEmitter<any> = new EventEmitter();\n  @Output() detailToggle: EventEmitter<any> = new EventEmitter();\n  @Output() rowContextmenu = new EventEmitter<{ event: MouseEvent; row: any }>(false);\n  @Output() treeAction: EventEmitter<any> = new EventEmitter();\n\n  @ViewChild(ScrollerComponent) scroller: ScrollerComponent;\n\n  /**\n   * Returns if selection is enabled.\n   */\n  get selectEnabled(): boolean {\n    return !!this.selectionType;\n  }\n\n  /**\n   * Property that would calculate the height of scroll bar\n   * based on the row heights cache for virtual scroll and virtualization. Other scenarios\n   * calculate scroll height automatically (as height will be undefined).\n   */\n  get scrollHeight(): number | undefined {\n    if (this.scrollbarV && this.virtualization && this.rowCount) {\n      return this.rowHeightsCache.query(this.rowCount - 1);\n    }\n    // avoid TS7030: Not all code paths return a value.\n    return undefined;\n  }\n\n  rowHeightsCache: RowHeightCache = new RowHeightCache();\n  temp: any[] = [];\n  offsetY = 0;\n  indexes: any = {};\n  columnGroupWidths: any;\n  columnGroupWidthsWithoutGroup: any;\n  rowTrackingFn: any;\n  listener: any;\n  rowIndexes: any = new WeakMap<any, string>();\n  rowExpansions: any[] = [];\n\n  _rows: any[];\n  _bodyHeight: any;\n  _columns: any[];\n  _rowCount: number;\n  _offset: number;\n  _pageSize: number;\n\n  /**\n   * Creates an instance of DataTableBodyComponent.\n   */\n  constructor(private cd: ChangeDetectorRef) {\n    // declare fn here so we can get access to the `this` property\n    this.rowTrackingFn = (index: number, row: any): any => {\n      const idx = this.getRowIndex(row);\n      if (this.trackByProp) {\n        return row[this.trackByProp];\n      } else {\n        return idx;\n      }\n    };\n  }\n\n  /**\n   * Called after the constructor, initializing input properties\n   */\n  ngOnInit(): void {\n    if (this.rowDetail) {\n      this.listener = this.rowDetail.toggle.subscribe(({ type, value }: { type: string; value: any }) => {\n        if (type === 'row') {\n          this.toggleRowExpansion(value);\n        }\n        if (type === 'all') {\n          this.toggleAllRows(value);\n        }\n\n        // Refresh rows after toggle\n        // Fixes #883\n        this.updateIndexes();\n        this.updateRows();\n        this.cd.markForCheck();\n      });\n    }\n\n    if (this.groupHeader) {\n      this.listener = this.groupHeader.toggle.subscribe(({ type, value }: { type: string; value: any }) => {\n        if (type === 'group') {\n          this.toggleRowExpansion(value);\n        }\n        if (type === 'all') {\n          this.toggleAllRows(value);\n        }\n\n        // Refresh rows after toggle\n        // Fixes #883\n        this.updateIndexes();\n        this.updateRows();\n        this.cd.markForCheck();\n      });\n    }\n  }\n\n  /**\n   * Called once, before the instance is destroyed.\n   */\n  ngOnDestroy(): void {\n    if (this.rowDetail || this.groupHeader) {\n      this.listener.unsubscribe();\n    }\n  }\n\n  /**\n   * Updates the Y offset given a new offset.\n   */\n  updateOffsetY(offset?: number): void {\n    // scroller is missing on empty table\n    if (!this.scroller) {\n      return;\n    }\n\n    if (this.scrollbarV && this.virtualization && offset) {\n      // First get the row Index that we need to move to.\n      const rowIndex = this.pageSize * offset;\n      offset = this.rowHeightsCache.query(rowIndex - 1);\n    } else if (this.scrollbarV && !this.virtualization) {\n      offset = 0;\n    }\n\n    this.scroller.setOffset(offset || 0);\n  }\n\n  /**\n   * Body was scrolled, this is mainly useful for\n   * when a user is server-side pagination via virtual scroll.\n   */\n  onBodyScroll(event: any): void {\n    const scrollYPos: number = event.scrollYPos;\n    const scrollXPos: number = event.scrollXPos;\n\n    // if scroll change, trigger update\n    // this is mainly used for header cell positions\n    if (this.offsetY !== scrollYPos || this.offsetX !== scrollXPos) {\n      this.scroll.emit({\n        offsetY: scrollYPos,\n        offsetX: scrollXPos\n      });\n    }\n\n    this.offsetY = scrollYPos;\n    this.offsetX = scrollXPos;\n\n    this.updateIndexes();\n    this.updatePage(event.direction);\n    this.updateRows();\n  }\n\n  /**\n   * Updates the page given a direction.\n   */\n  updatePage(direction: string): void {\n    let offset = this.indexes.first / this.pageSize;\n\n    if (direction === 'up') {\n      offset = Math.ceil(offset);\n    } else if (direction === 'down') {\n      offset = Math.floor(offset);\n    }\n\n    if (direction !== undefined && !isNaN(offset)) {\n      this.page.emit({ offset });\n    }\n  }\n\n  /**\n   * Updates the rows in the view port\n   */\n  updateRows(): void {\n    const { first, last } = this.indexes;\n    let rowIndex = first;\n    let idx = 0;\n    const temp: any[] = [];\n\n    // if grouprowsby has been specified treat row paging\n    // parameters as group paging parameters ie if limit 10 has been\n    // specified treat it as 10 groups rather than 10 rows\n    if (this.groupedRows) {\n      let maxRowsPerGroup = 3;\n      // if there is only one group set the maximum number of\n      // rows per group the same as the total number of rows\n      if (this.groupedRows.length === 1) {\n        maxRowsPerGroup = this.groupedRows[0].value.length;\n      }\n\n      while (rowIndex < last && rowIndex < this.groupedRows.length) {\n        // Add the groups into this page\n        const group = this.groupedRows[rowIndex];\n        this.rowIndexes.set(group, rowIndex);\n\n        if (group.value) {\n          // add indexes for each group item\n          group.value.forEach((g: any, i: number) => {\n            const _idx = `${rowIndex}-${i}`;\n            this.rowIndexes.set(g, _idx);\n          });\n        }\n        temp[idx] = group;\n        idx++;\n\n        // Group index in this context\n        rowIndex++;\n      }\n    } else {\n      while (rowIndex < last && rowIndex < this.rowCount) {\n        const row = this.rows[rowIndex];\n\n        if (row) {\n          // add indexes for each row\n          this.rowIndexes.set(row, rowIndex);\n          temp[idx] = row;\n        }\n\n        idx++;\n        rowIndex++;\n      }\n    }\n\n    this.temp = temp;\n  }\n\n  /**\n   * Get the row height\n   */\n  getRowHeight(row: any): number {\n    // if its a function return it\n    if (typeof this.rowHeight === 'function') {\n      return this.rowHeight(row);\n    }\n\n    return this.rowHeight as number;\n  }\n\n  /**\n   * @param group the group with all rows\n   */\n  getGroupHeight(group: any): number {\n    let rowHeight = 0;\n\n    if (group.value) {\n      for (let index = 0; index < group.value.length; index++) {\n        rowHeight += this.getRowAndDetailHeight(group.value[index]);\n      }\n    }\n\n    return rowHeight;\n  }\n\n  /**\n   * Calculate row height based on the expanded state of the row.\n   */\n  getRowAndDetailHeight(row: any): number {\n    let rowHeight = this.getRowHeight(row);\n    const expanded = this.getRowExpanded(row);\n\n    // Adding detail row height if its expanded.\n    if (expanded) {\n      rowHeight += this.getDetailRowHeight(row);\n    }\n\n    return rowHeight;\n  }\n\n  /**\n   * Get the height of the detail row.\n   */\n  getDetailRowHeight = (row?: any, index?: any): number => {\n    if (!this.rowDetail) {\n      return 0;\n    }\n    const rowHeight = this.rowDetail.rowHeight;\n    return typeof rowHeight === 'function' ? rowHeight(row, index) : (rowHeight as number);\n  };\n\n  /**\n   * Calculates the styles for the row so that the rows can be moved in 2D space\n   * during virtual scroll inside the DOM.   In the below case the Y position is\n   * manipulated.   As an example, if the height of row 0 is 30 px and row 1 is\n   * 100 px then following styles are generated:\n   *\n   * transform: translate3d(0px, 0px, 0px);    ->  row0\n   * transform: translate3d(0px, 30px, 0px);   ->  row1\n   * transform: translate3d(0px, 130px, 0px);  ->  row2\n   *\n   * Row heights have to be calculated based on the row heights cache as we wont\n   * be able to determine which row is of what height before hand.  In the above\n   * case the positionY of the translate3d for row2 would be the sum of all the\n   * heights of the rows before it (i.e. row0 and row1).\n   *\n   * @param rows the row that needs to be placed in the 2D space.\n   * @returns the CSS3 style to be applied\n   *\n   * @memberOf DataTableBodyComponent\n   */\n  getRowsStyles(rows: any): any {\n    const styles: any = {};\n\n    // only add styles for the group if there is a group\n    if (this.groupedRows) {\n      styles.width = this.columnGroupWidths.total;\n    }\n\n    if (this.scrollbarV && this.virtualization) {\n      let idx = 0;\n\n      if (this.groupedRows) {\n        // Get the latest row rowindex in a group\n        const row = rows[rows.length - 1];\n        idx = row ? this.getRowIndex(row) : 0;\n      } else {\n        idx = this.getRowIndex(rows);\n      }\n\n      // const pos = idx * rowHeight;\n      // The position of this row would be the sum of all row heights\n      // until the previous row position.\n      const pos = this.rowHeightsCache.query(idx - 1);\n\n      translateXY(styles, 0, pos);\n    }\n\n    return styles;\n  }\n\n  /**\n   * Calculate bottom summary row offset for scrollbar mode.\n   * For more information about cache and offset calculation\n   * see description for `getRowsStyles` method\n   *\n   * @returns the CSS3 style to be applied\n   *\n   * @memberOf DataTableBodyComponent\n   */\n  getBottomSummaryRowStyles(): any {\n    if (!this.scrollbarV || !this.rows || !this.rows.length) {\n      return null;\n    }\n\n    const styles = { position: 'absolute' };\n    const pos = this.rowHeightsCache.query(this.rows.length - 1);\n\n    translateXY(styles, 0, pos);\n\n    return styles;\n  }\n\n  /**\n   * Hides the loading indicator\n   */\n  hideIndicator(): void {\n    setTimeout(() => (this.loadingIndicator = false), 500);\n  }\n\n  /**\n   * Updates the index of the rows in the viewport\n   */\n  updateIndexes(): void {\n    let first = 0;\n    let last = 0;\n\n    if (this.scrollbarV) {\n      if (this.virtualization) {\n        // Calculation of the first and last indexes will be based on where the\n        // scrollY position would be at.  The last index would be the one\n        // that shows up inside the view port the last.\n        const height = parseInt(this.bodyHeight, 0);\n        first = this.rowHeightsCache.getRowIndex(this.offsetY);\n        last = this.rowHeightsCache.getRowIndex(height + this.offsetY) + 1;\n      } else {\n        // If virtual rows are not needed\n        // We render all in one go\n        first = 0;\n        last = this.rowCount;\n      }\n    } else {\n      // The server is handling paging and will pass an array that begins with the\n      // element at a specified offset.  first should always be 0 with external paging.\n      if (!this.externalPaging) {\n        first = Math.max(this.offset * this.pageSize, 0);\n      }\n      last = Math.min(first + this.pageSize, this.rowCount);\n    }\n\n    this.indexes = { first, last };\n  }\n\n  /**\n   * Refreshes the full Row Height cache.  Should be used\n   * when the entire row array state has changed.\n   */\n  refreshRowHeightCache(): void {\n    if (!this.scrollbarV || (this.scrollbarV && !this.virtualization)) {\n      return;\n    }\n\n    // clear the previous row height cache if already present.\n    // this is useful during sorts, filters where the state of the\n    // rows array is changed.\n    this.rowHeightsCache.clearCache();\n\n    // Initialize the tree only if there are rows inside the tree.\n    if (this.rows && this.rows.length) {\n      const rowExpansions = new Set();\n      for (const row of this.rows) {\n        if (this.getRowExpanded(row)) {\n          rowExpansions.add(row);\n        }\n      }\n\n      this.rowHeightsCache.initCache({\n        rows: this.rows,\n        rowHeight: this.rowHeight,\n        detailRowHeight: this.getDetailRowHeight,\n        externalVirtual: this.scrollbarV && this.externalPaging,\n        rowCount: this.rowCount,\n        rowIndexes: this.rowIndexes,\n        rowExpansions\n      });\n    }\n  }\n\n  /**\n   * Gets the index for the view port\n   */\n  getAdjustedViewPortIndex(): number {\n    // Capture the row index of the first row that is visible on the viewport.\n    // If the scroll bar is just below the row which is highlighted then make that as the\n    // first index.\n    const viewPortFirstRowIndex = this.indexes.first;\n\n    if (this.scrollbarV && this.virtualization) {\n      const offsetScroll = this.rowHeightsCache.query(viewPortFirstRowIndex - 1);\n      return offsetScroll <= this.offsetY ? viewPortFirstRowIndex - 1 : viewPortFirstRowIndex;\n    }\n\n    return viewPortFirstRowIndex;\n  }\n\n  /**\n   * Toggle the Expansion of the row i.e. if the row is expanded then it will\n   * collapse and vice versa.   Note that the expanded status is stored as\n   * a part of the row object itself as we have to preserve the expanded row\n   * status in case of sorting and filtering of the row set.\n   */\n  toggleRowExpansion(row: any): void {\n    // Capture the row index of the first row that is visible on the viewport.\n    const viewPortFirstRowIndex = this.getAdjustedViewPortIndex();\n    const rowExpandedIdx = this.getRowExpandedIdx(row, this.rowExpansions);\n    const expanded = rowExpandedIdx > -1;\n\n    // If the detailRowHeight is auto --> only in case of non-virtualized scroll\n    if (this.scrollbarV && this.virtualization) {\n      const detailRowHeight = this.getDetailRowHeight(row) * (expanded ? -1 : 1);\n      // const idx = this.rowIndexes.get(row) || 0;\n      const idx = this.getRowIndex(row);\n      this.rowHeightsCache.update(idx, detailRowHeight);\n    }\n\n    // Update the toggled row and update thive nevere heights in the cache.\n    if (expanded) {\n      this.rowExpansions.splice(rowExpandedIdx, 1);\n    } else {\n      this.rowExpansions.push(row);\n    }\n\n    this.detailToggle.emit({\n      rows: [row],\n      currentIndex: viewPortFirstRowIndex\n    });\n  }\n\n  /**\n   * Expand/Collapse all the rows no matter what their state is.\n   */\n  toggleAllRows(expanded: boolean): void {\n    // clear prev expansions\n    this.rowExpansions = [];\n\n    // Capture the row index of the first row that is visible on the viewport.\n    const viewPortFirstRowIndex = this.getAdjustedViewPortIndex();\n\n    if (expanded) {\n      for (const row of this.rows) {\n        this.rowExpansions.push(row);\n      }\n    }\n\n    if (this.scrollbarV) {\n      // Refresh the full row heights cache since every row was affected.\n      this.recalcLayout();\n    }\n\n    // Emit all rows that have been expanded.\n    this.detailToggle.emit({\n      rows: this.rows,\n      currentIndex: viewPortFirstRowIndex\n    });\n  }\n\n  /**\n   * Recalculates the table\n   */\n  recalcLayout(): void {\n    this.refreshRowHeightCache();\n    this.updateIndexes();\n    this.updateRows();\n  }\n\n  /**\n   * Tracks the column\n   */\n  columnTrackingFn(index: number, column: any): any {\n    return column.$$id;\n  }\n\n  /**\n   * Gets the row pinning group styles\n   */\n  stylesByGroup(group: string) {\n    const widths = this.columnGroupWidths;\n    const offsetX = this.offsetX;\n\n    const styles = {\n      width: `${widths[group]}px`\n    };\n\n    if (group === 'left') {\n      translateXY(styles, offsetX, 0);\n    } else if (group === 'right') {\n      const bodyWidth = parseInt(this.innerWidth + '', 0);\n      const totalDiff = widths.total - bodyWidth;\n      const offsetDiff = totalDiff - offsetX;\n      const offset = offsetDiff * -1;\n      translateXY(styles, offset, 0);\n    }\n\n    return styles;\n  }\n\n  /**\n   * Returns if the row was expanded and set default row expansion when row expansion is empty\n   */\n  getRowExpanded(row: any): boolean {\n    if (this.rowExpansions.length === 0 && this.groupExpansionDefault) {\n      for (const group of this.groupedRows) {\n        this.rowExpansions.push(group);\n      }\n    }\n\n    return this.getRowExpandedIdx(row, this.rowExpansions) > -1;\n  }\n\n  getRowExpandedIdx(row: any, expanded: any[]): number {\n    if (!expanded || !expanded.length) return -1;\n\n    const rowId = this.rowIdentity(row);\n    return expanded.findIndex(r => {\n      const id = this.rowIdentity(r);\n      return id === rowId;\n    });\n  }\n\n  /**\n   * Gets the row index given a row\n   */\n  getRowIndex(row: any): number {\n    return this.rowIndexes.get(row) || 0;\n  }\n\n  onTreeAction(row: any) {\n    this.treeAction.emit({ row });\n  }\n}\n", "import { getterForProp } from './column-prop-getters';\nimport { SortType } from '../types/sort.type';\nimport { SortDirection } from '../types/sort-direction.type';\nimport { SortPropDir } from '../types/sort-prop-dir.type';\n/**\n * Gets the next sort direction\n */\nexport function nextSortDir(sortType: SortType, current: SortDirection): SortDirection | undefined {\n  if (sortType === SortType.single) {\n    if (current === SortDirection.asc) {\n      return SortDirection.desc;\n    } else {\n      return SortDirection.asc;\n    }\n  } else {\n    if (!current) {\n      return SortDirection.asc;\n    } else if (current === SortDirection.asc) {\n      return SortDirection.desc;\n    } else if (current === SortDirection.desc) {\n      return undefined;\n    }\n    // avoid TS7030: Not all code paths return a value.\n    return undefined;\n  }\n}\n\n/**\n * Adapted from fueld-ui on 6/216\n * https://github.com/FuelInteractive/fuel-ui/tree/master/src/pipes/OrderBy\n */\nexport function orderByComparator(a: any, b: any): number {\n  if (a === null || typeof a === 'undefined') a = 0;\n  if (b === null || typeof b === 'undefined') b = 0;\n  if (a instanceof Date && b instanceof Date) {\n    if (a < b) return -1;\n    if (a > b) return 1;\n  } else if (isNaN(parseFloat(a)) || !isFinite(a) || isNaN(parseFloat(b)) || !isFinite(b)) {\n    // Convert to string in case of a=0 or b=0\n    a = String(a);\n    b = String(b);\n    // Isn't a number so lowercase the string to properly compare\n    if (a.toLowerCase() < b.toLowerCase()) return -1;\n    if (a.toLowerCase() > b.toLowerCase()) return 1;\n  } else {\n    // Parse strings as numbers to compare properly\n    if (parseFloat(a) < parseFloat(b)) return -1;\n    if (parseFloat(a) > parseFloat(b)) return 1;\n  }\n\n  // equal each other\n  return 0;\n}\n\n/**\n * creates a shallow copy of the `rows` input and returns the sorted copy. this function\n * does not sort the `rows` argument in place\n */\nexport function sortRows(rows: any[], columns: any[], dirs: SortPropDir[]): any[] {\n  if (!rows) return [];\n  if (!dirs || !dirs.length || !columns) return [...rows];\n\n  /**\n   * record the row ordering of results from prior sort operations (if applicable)\n   * this is necessary to guarantee stable sorting behavior\n   */\n  const rowToIndexMap = new Map<any, number>();\n  rows.forEach((row, index) => rowToIndexMap.set(row, index));\n\n  const temp = [...rows];\n  const cols = columns.reduce((obj, col) => {\n    if (col.comparator && typeof col.comparator === 'function') {\n      obj[col.prop] = col.comparator;\n    }\n    return obj;\n  }, {});\n\n  // cache valueGetter and compareFn so that they\n  // do not need to be looked-up in the sort function body\n  const cachedDirs = dirs.map(dir => {\n    const prop = dir.prop;\n    return {\n      prop,\n      dir: dir.dir,\n      valueGetter: getterForProp(prop),\n      compareFn: cols[prop] || orderByComparator\n    };\n  });\n\n  return temp.sort(function (rowA: any, rowB: any) {\n    for (const cachedDir of cachedDirs) {\n      // Get property and valuegetters for column to be sorted\n      const { prop, valueGetter } = cachedDir;\n      // Get A and B cell values from rows based on properties of the columns\n      const propA = valueGetter(rowA, prop);\n      const propB = valueGetter(rowB, prop);\n\n      // Compare function gets five parameters:\n      // Two cell values to be compared as propA and propB\n      // Two rows corresponding to the cells as rowA and rowB\n      // Direction of the sort for this column as SortDirection\n      // Compare can be a standard JS comparison function (a,b) => -1|0|1\n      // as additional parameters are silently ignored. The whole row and sort\n      // direction enable more complex sort logic.\n      const comparison =\n        cachedDir.dir !== SortDirection.desc\n          ? cachedDir.compareFn(propA, propB, rowA, rowB, cachedDir.dir)\n          : -cachedDir.compareFn(propA, propB, rowA, rowB, cachedDir.dir);\n\n      // Don't return 0 yet in case of needing to sort by next property\n      if (comparison !== 0) return comparison;\n    }\n\n    if (!(rowToIndexMap.has(rowA) && rowToIndexMap.has(rowB))) return 0;\n\n    /**\n     * all else being equal, preserve original order of the rows (stable sort)\n     */\n    return rowToIndexMap.get(rowA) < rowToIndexMap.get(rowB) ? -1 : 1;\n  });\n}\n", "import {\n  Component,\n  Input,\n  EventEmitter,\n  Output,\n  HostBinding,\n  HostListener,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef\n} from '@angular/core';\nimport { SortType } from '../../types/sort.type';\nimport { SelectionType } from '../../types/selection.type';\nimport { TableColumn } from '../../types/table-column.type';\nimport { nextSortDir } from '../../utils/sort';\nimport { SortDirection } from '../../types/sort-direction.type';\n\n@Component({\n  selector: 'datatable-header-cell',\n  template: `\n    <div class=\"datatable-header-cell-template-wrap\">\n      <ng-template\n        *ngIf=\"isTarget\"\n        [ngTemplateOutlet]=\"targetMarkerTemplate\"\n        [ngTemplateOutletContext]=\"targetMarkerContext\"\n      >\n      </ng-template>\n      <label *ngIf=\"isCheckboxable\" class=\"datatable-checkbox\">\n        <input type=\"checkbox\" [checked]=\"allRowsSelected\" (change)=\"select.emit(!allRowsSelected)\" />\n      </label>\n      <span *ngIf=\"!column.headerTemplate\" class=\"datatable-header-cell-wrapper\">\n        <span class=\"datatable-header-cell-label draggable\" (click)=\"onSort()\" [innerHTML]=\"name\"> </span>\n      </span>\n      <ng-template\n        *ngIf=\"column.headerTemplate\"\n        [ngTemplateOutlet]=\"column.headerTemplate\"\n        [ngTemplateOutletContext]=\"cellContext\"\n      >\n      </ng-template>\n      <span (click)=\"onSort()\" [class]=\"sortClass\"> </span>\n    </div>\n  `,\n  host: {\n    class: 'datatable-header-cell'\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class DataTableHeaderCellComponent {\n  @Input() sortType: SortType;\n  @Input() sortAscendingIcon: string;\n  @Input() sortDescendingIcon: string;\n  @Input() sortUnsetIcon: string;\n\n  @Input() isTarget: boolean;\n  @Input() targetMarkerTemplate: any;\n  @Input() targetMarkerContext: any;\n\n  _allRowsSelected: boolean;\n\n  @Input() set allRowsSelected(value) {\n    this._allRowsSelected = value;\n    this.cellContext.allRowsSelected = value;\n  }\n  get allRowsSelected() {\n    return this._allRowsSelected;\n  }\n\n  @Input() selectionType: SelectionType;\n\n  @Input() set column(column: TableColumn) {\n    this._column = column;\n    this.cellContext.column = column;\n    this.cd.markForCheck();\n  }\n\n  get column(): TableColumn {\n    return this._column;\n  }\n\n  @HostBinding('style.height.px')\n  @Input()\n  headerHeight: number;\n\n  @Input() set sorts(val: any[]) {\n    this._sorts = val;\n    this.sortDir = this.calcSortDir(val);\n    this.cellContext.sortDir = this.sortDir;\n    this.sortClass = this.calcSortClass(this.sortDir);\n    this.cd.markForCheck();\n  }\n\n  get sorts(): any[] {\n    return this._sorts;\n  }\n\n  @Output() sort: EventEmitter<any> = new EventEmitter();\n  @Output() select: EventEmitter<any> = new EventEmitter();\n  @Output() columnContextmenu = new EventEmitter<{ event: MouseEvent; column: any }>(false);\n\n  @HostBinding('class')\n  get columnCssClasses(): any {\n    let cls = 'datatable-header-cell';\n\n    if (this.column.sortable) cls += ' sortable';\n    if (this.column.resizeable) cls += ' resizeable';\n    if (this.column.headerClass) {\n      if (typeof this.column.headerClass === 'string') {\n        cls += ' ' + this.column.headerClass;\n      } else if (typeof this.column.headerClass === 'function') {\n        const res = this.column.headerClass({\n          column: this.column\n        });\n\n        if (typeof res === 'string') {\n          cls += res;\n        } else if (typeof res === 'object') {\n          const keys = Object.keys(res);\n          for (const k of keys) {\n            if (res[k] === true) cls += ` ${k}`;\n          }\n        }\n      }\n    }\n\n    const sortDir = this.sortDir;\n    if (sortDir) {\n      cls += ` sort-active sort-${sortDir}`;\n    }\n\n    return cls;\n  }\n\n  @HostBinding('attr.title')\n  get name(): string {\n    // guaranteed to have a value by setColumnDefaults() in column-helper.ts\n    return this.column.headerTemplate === undefined ? this.column.name : undefined;\n  }\n\n  @HostBinding('style.minWidth.px')\n  get minWidth(): number {\n    return this.column.minWidth;\n  }\n\n  @HostBinding('style.maxWidth.px')\n  get maxWidth(): number {\n    return this.column.maxWidth;\n  }\n\n  @HostBinding('style.width.px')\n  get width(): number {\n    return this.column.width;\n  }\n\n  get isCheckboxable(): boolean {\n    return this.column.checkboxable && this.column.headerCheckboxable && this.selectionType === SelectionType.checkbox;\n  }\n\n  sortFn = this.onSort.bind(this);\n  sortClass: string;\n  sortDir: SortDirection;\n  selectFn = this.select.emit.bind(this.select);\n\n  cellContext: any;\n\n  private _column: TableColumn;\n  private _sorts: any[];\n\n  constructor(private cd: ChangeDetectorRef) {\n    this.cellContext = {\n      column: this.column,\n      sortDir: this.sortDir,\n      sortFn: this.sortFn,\n      allRowsSelected: this.allRowsSelected,\n      selectFn: this.selectFn\n    };\n  }\n\n  @HostListener('contextmenu', ['$event'])\n  onContextmenu($event: MouseEvent): void {\n    this.columnContextmenu.emit({ event: $event, column: this.column });\n  }\n\n  ngOnInit() {\n    this.sortClass = this.calcSortClass(this.sortDir);\n  }\n\n  calcSortDir(sorts: any[]): any {\n    if (sorts && this.column) {\n      const sort = sorts.find((s: any) => {\n        return s.prop === this.column.prop;\n      });\n\n      if (sort) return sort.dir;\n    }\n  }\n\n  onSort(): void {\n    if (!this.column.sortable) return;\n\n    const newValue = nextSortDir(this.sortType, this.sortDir);\n    this.sort.emit({\n      column: this.column,\n      prevValue: this.sortDir,\n      newValue\n    });\n  }\n\n  calcSortClass(sortDir: SortDirection): string {\n    if (!this.cellContext.column.sortable) return;\n    if (sortDir === SortDirection.asc) {\n      return `sort-btn sort-asc ${this.sortAscendingIcon}`;\n    } else if (sortDir === SortDirection.desc) {\n      return `sort-btn sort-desc ${this.sortDescendingIcon}`;\n    } else {\n      return `sort-btn ${this.sortUnsetIcon}`;\n    }\n  }\n}\n", "import {\n  Component,\n  Output,\n  EventEmitter,\n  Input,\n  HostBinding,\n  ChangeDetectorRef,\n  ChangeDetectionStrategy,\n  OnDestroy\n} from '@angular/core';\nimport { columnsByPin, columnGroupWidths, columnsByPinArr } from '../../utils/column';\nimport { SortType } from '../../types/sort.type';\nimport { SelectionType } from '../../types/selection.type';\nimport { DataTableColumnDirective } from '../columns/column.directive';\nimport { translateXY } from '../../utils/translate';\n\n@Component({\n  selector: 'datatable-header',\n  template: `\n    <div\n      role=\"row\"\n      orderable\n      (reorder)=\"onColumnReordered($event)\"\n      (targetChanged)=\"onTargetChanged($event)\"\n      [style.width.px]=\"_columnGroupWidths.total\"\n      class=\"datatable-header-inner\"\n    >\n      <div\n        *ngFor=\"let colGroup of _columnsByPin; trackBy: trackByGroups\"\n        [class]=\"'datatable-row-' + colGroup.type\"\n        [ngStyle]=\"_styleByGroup[colGroup.type]\"\n      >\n        <datatable-header-cell\n          role=\"columnheader\"\n          *ngFor=\"let column of colGroup.columns; trackBy: columnTrackingFn\"\n          resizeable\n          [resizeEnabled]=\"column.resizeable\"\n          (resize)=\"onColumnResized($event, column)\"\n          long-press\n          [pressModel]=\"column\"\n          [pressEnabled]=\"reorderable && column.draggable\"\n          (longPressStart)=\"onLongPressStart($event)\"\n          (longPressEnd)=\"onLongPressEnd($event)\"\n          draggable\n          [dragX]=\"reorderable && column.draggable && column.dragging\"\n          [dragY]=\"false\"\n          [dragModel]=\"column\"\n          [dragEventTarget]=\"dragEventTarget\"\n          [headerHeight]=\"headerHeight\"\n          [isTarget]=\"column.isTarget\"\n          [targetMarkerTemplate]=\"targetMarkerTemplate\"\n          [targetMarkerContext]=\"column.targetMarkerContext\"\n          [column]=\"column\"\n          [sortType]=\"sortType\"\n          [sorts]=\"sorts\"\n          [selectionType]=\"selectionType\"\n          [sortAscendingIcon]=\"sortAscendingIcon\"\n          [sortDescendingIcon]=\"sortDescendingIcon\"\n          [sortUnsetIcon]=\"sortUnsetIcon\"\n          [allRowsSelected]=\"allRowsSelected\"\n          (sort)=\"onSort($event)\"\n          (select)=\"select.emit($event)\"\n          (columnContextmenu)=\"columnContextmenu.emit($event)\"\n        >\n        </datatable-header-cell>\n      </div>\n    </div>\n  `,\n  host: {\n    class: 'datatable-header'\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class DataTableHeaderComponent implements OnDestroy {\n  @Input() sortAscendingIcon: any;\n  @Input() sortDescendingIcon: any;\n  @Input() sortUnsetIcon: any;\n  @Input() scrollbarH: boolean;\n  @Input() dealsWithGroup: boolean;\n  @Input() targetMarkerTemplate: any;\n\n  targetMarkerContext: any;\n\n  @Input() set innerWidth(val: number) {\n    this._innerWidth = val;\n    setTimeout(() => {\n      if (this._columns) {\n        const colByPin = columnsByPin(this._columns);\n        this._columnGroupWidths = columnGroupWidths(colByPin, this._columns);\n        this.setStylesByGroup();\n      }\n    });\n  }\n\n  get innerWidth(): number {\n    return this._innerWidth;\n  }\n\n  @Input() sorts: any[];\n  @Input() sortType: SortType;\n  @Input() allRowsSelected: boolean;\n  @Input() selectionType: SelectionType;\n  @Input() reorderable: boolean;\n\n  dragEventTarget: any;\n\n  @HostBinding('style.height')\n  @Input()\n  set headerHeight(val: any) {\n    if (val !== 'auto') {\n      this._headerHeight = `${val}px`;\n    } else {\n      this._headerHeight = val;\n    }\n  }\n\n  get headerHeight(): any {\n    return this._headerHeight;\n  }\n\n  @Input() set columns(val: any[]) {\n    this._columns = val;\n\n    const colsByPin = columnsByPin(val);\n    this._columnsByPin = columnsByPinArr(val);\n    setTimeout(() => {\n      this._columnGroupWidths = columnGroupWidths(colsByPin, val);\n      this.setStylesByGroup();\n    });\n  }\n\n  get columns(): any[] {\n    return this._columns;\n  }\n\n  @Input()\n  set offsetX(val: number) {\n    this._offsetX = val;\n    this.setStylesByGroup();\n  }\n  get offsetX() {\n    return this._offsetX;\n  }\n\n  @Output() sort: EventEmitter<any> = new EventEmitter();\n  @Output() reorder: EventEmitter<any> = new EventEmitter();\n  @Output() resize: EventEmitter<any> = new EventEmitter();\n  @Output() select: EventEmitter<any> = new EventEmitter();\n  @Output() columnContextmenu = new EventEmitter<{ event: MouseEvent; column: any }>(false);\n\n  _columnsByPin: any;\n  _columnGroupWidths: any = {\n    total: 100\n  };\n  _innerWidth: number;\n  _offsetX: number;\n  _columns: any[];\n  _headerHeight: string;\n  _styleByGroup: { [prop: string]: {} } = {\n    left: {},\n    center: {},\n    right: {}\n  };\n\n  private destroyed = false;\n\n  constructor(private cd: ChangeDetectorRef) {}\n\n  ngOnDestroy(): void {\n    this.destroyed = true;\n  }\n\n  onLongPressStart({ event, model }: { event: any; model: any }) {\n    model.dragging = true;\n    this.dragEventTarget = event;\n  }\n\n  onLongPressEnd({ event, model }: { event: any; model: any }) {\n    this.dragEventTarget = event;\n\n    // delay resetting so sort can be\n    // prevented if we were dragging\n    setTimeout(() => {\n      // datatable component creates copies from columns on reorder\n      // set dragging to false on new objects\n      const column = this._columns.find(c => c.$$id === model.$$id);\n      if (column) {\n        column.dragging = false;\n      }\n    }, 5);\n  }\n\n  @HostBinding('style.width')\n  get headerWidth(): string {\n    if (this.scrollbarH) {\n      return this.innerWidth + 'px';\n    }\n\n    return '100%';\n  }\n\n  trackByGroups(index: number, colGroup: any): any {\n    return colGroup.type;\n  }\n\n  columnTrackingFn(index: number, column: any): any {\n    return column.$$id;\n  }\n\n  onColumnResized(width: number, column: DataTableColumnDirective): void {\n    if (width <= column.minWidth) {\n      width = column.minWidth;\n    } else if (width >= column.maxWidth) {\n      width = column.maxWidth;\n    }\n\n    this.resize.emit({\n      column,\n      prevValue: column.width,\n      newValue: width\n    });\n  }\n\n  onColumnReordered({ prevIndex, newIndex, model }: any): void {\n    const column = this.getColumn(newIndex);\n    column.isTarget = false;\n    column.targetMarkerContext = undefined;\n    this.reorder.emit({\n      column: model,\n      prevValue: prevIndex,\n      newValue: newIndex\n    });\n  }\n\n  onTargetChanged({ prevIndex, newIndex, initialIndex }: any): void {\n    if (prevIndex || prevIndex === 0) {\n      const oldColumn = this.getColumn(prevIndex);\n      oldColumn.isTarget = false;\n      oldColumn.targetMarkerContext = undefined;\n    }\n    if (newIndex || newIndex === 0) {\n      const newColumn = this.getColumn(newIndex);\n      newColumn.isTarget = true;\n\n      if (initialIndex !== newIndex) {\n        newColumn.targetMarkerContext = {\n          class: 'targetMarker '.concat(initialIndex > newIndex ? 'dragFromRight' : 'dragFromLeft')\n        };\n      }\n    }\n  }\n\n  getColumn(index: number): any {\n    const leftColumnCount = this._columnsByPin[0].columns.length;\n    if (index < leftColumnCount) {\n      return this._columnsByPin[0].columns[index];\n    }\n\n    const centerColumnCount = this._columnsByPin[1].columns.length;\n    if (index < leftColumnCount + centerColumnCount) {\n      return this._columnsByPin[1].columns[index - leftColumnCount];\n    }\n\n    return this._columnsByPin[2].columns[index - leftColumnCount - centerColumnCount];\n  }\n\n  onSort({ column, prevValue, newValue }: any): void {\n    // if we are dragging don't sort!\n    if (column.dragging) {\n      return;\n    }\n\n    const sorts = this.calcNewSorts(column, prevValue, newValue);\n    this.sort.emit({\n      sorts,\n      column,\n      prevValue,\n      newValue\n    });\n  }\n\n  calcNewSorts(column: any, prevValue: number, newValue: number): any[] {\n    let idx = 0;\n\n    if (!this.sorts) {\n      this.sorts = [];\n    }\n\n    const sorts = this.sorts.map((s, i) => {\n      s = { ...s };\n      if (s.prop === column.prop) {\n        idx = i;\n      }\n      return s;\n    });\n\n    if (newValue === undefined) {\n      sorts.splice(idx, 1);\n    } else if (prevValue) {\n      sorts[idx].dir = newValue;\n    } else {\n      if (this.sortType === SortType.single) {\n        sorts.splice(0, this.sorts.length);\n      }\n\n      sorts.push({ dir: newValue, prop: column.prop });\n    }\n\n    return sorts;\n  }\n\n  setStylesByGroup() {\n    this._styleByGroup.left = this.calcStylesByGroup('left');\n    this._styleByGroup.center = this.calcStylesByGroup('center');\n    this._styleByGroup.right = this.calcStylesByGroup('right');\n    if (!this.destroyed) {\n      this.cd.detectChanges();\n    }\n  }\n\n  calcStylesByGroup(group: string): any {\n    const widths = this._columnGroupWidths;\n    const offsetX = this.offsetX;\n\n    const styles = {\n      width: `${widths[group]}px`\n    };\n\n    if (group === 'center') {\n      translateXY(styles, offsetX * -1, 0);\n    } else if (group === 'right') {\n      const totalDiff = widths.total - this.innerWidth;\n      const offset = totalDiff * -1;\n      translateXY(styles, offset, 0);\n    }\n\n    return styles;\n  }\n}\n", "/**\n * Throttle a function\n */\nexport function throttle(func: any, wait: number, options?: any) {\n  options = options || {};\n  let context: any;\n  let args: any;\n  let result: any;\n  let timeout: any = null;\n  let previous = 0;\n\n  function later() {\n    previous = options.leading === false ? 0 : +new Date();\n    timeout = null;\n    result = func.apply(context, args);\n  }\n\n  return function (this: any) {\n    const now = +new Date();\n\n    if (!previous && options.leading === false) {\n      previous = now;\n    }\n\n    const remaining = wait - (now - previous);\n    context = this;\n    args = arguments;\n\n    if (remaining <= 0) {\n      clearTimeout(timeout);\n      timeout = null;\n      previous = now;\n      result = func.apply(context, args);\n    } else if (!timeout && options.trailing !== false) {\n      timeout = setTimeout(later, remaining);\n    }\n\n    return result;\n  };\n}\n\n/**\n * Throttle decorator\n *\n *  class MyClass {\n *    throttleable(10)\n *    myFn() { ... }\n *  }\n */\nexport function throttleable(duration: number, options?: any) {\n  return function innerDecorator(target: any, key: PropertyKey, descriptor: PropertyDescriptor) {\n    return {\n      configurable: true,\n      enumerable: descriptor.enumerable,\n      get: function getter() {\n        Object.defineProperty(this, key, {\n          configurable: true,\n          enumerable: descriptor.enumerable,\n          value: throttle(descriptor.value, duration, options)\n        });\n\n        return this[key];\n      }\n    };\n  };\n}\n", "import { columnsByPin, columnsTotalWidth } from './column';\n\n/**\n * Calculates the Total Flex Grow\n */\nexport function getTotalFlexGrow(columns: any[]) {\n  let totalFlexGrow = 0;\n\n  for (const c of columns) {\n    totalFlexGrow += c.flexGrow || 0;\n  }\n\n  return totalFlexGrow;\n}\n\n/**\n * Adjusts the column widths.\n * Inspired by: https://github.com/facebook/fixed-data-table/blob/master/src/FixedDataTableWidthHelper.js\n */\nexport function adjustColumnWidths(allColumns: any, expectedWidth: any) {\n  const columnsWidth = columnsTotalWidth(allColumns);\n  const totalFlexGrow = getTotalFlexGrow(allColumns);\n  const colsByGroup = columnsByPin(allColumns);\n\n  if (columnsWidth !== expectedWidth) {\n    scaleColumns(colsByGroup, expectedWidth, totalFlexGrow);\n  }\n}\n\n/**\n * Resizes columns based on the flexGrow property, while respecting manually set widths\n */\nfunction scaleColumns(colsByGroup: any, maxWidth: any, totalFlexGrow: any) {\n  // calculate total width and flexgrow points for coulumns that can be resized\n  for (const attr in colsByGroup) {\n    for (const column of colsByGroup[attr]) {\n      if (!column.canAutoResize) {\n        maxWidth -= column.width;\n        totalFlexGrow -= column.flexGrow ? column.flexGrow : 0;\n      } else {\n        column.width = 0;\n      }\n    }\n  }\n\n  const hasMinWidth = {};\n  let remainingWidth = maxWidth;\n\n  // resize columns until no width is left to be distributed\n  do {\n    const widthPerFlexPoint = remainingWidth / totalFlexGrow;\n    remainingWidth = 0;\n\n    for (const attr in colsByGroup) {\n      for (const column of colsByGroup[attr]) {\n        // if the column can be resize and it hasn't reached its minimum width yet\n        if (column.canAutoResize && !hasMinWidth[column.prop]) {\n          const newWidth = column.width + column.flexGrow * widthPerFlexPoint;\n          if (column.minWidth !== undefined && newWidth < column.minWidth) {\n            remainingWidth += newWidth - column.minWidth;\n            column.width = column.minWidth;\n            hasMinWidth[column.prop] = true;\n          } else {\n            column.width = newWidth;\n          }\n        }\n      }\n    }\n  } while (remainingWidth !== 0);\n}\n\n/**\n * Forces the width of the columns to\n * distribute equally but overflowing when necessary\n *\n * Rules:\n *\n *  - If combined withs are less than the total width of the grid,\n *    proportion the widths given the min / max / normal widths to fill the width.\n *\n *  - If the combined widths, exceed the total width of the grid,\n *    use the standard widths.\n *\n *  - If a column is resized, it should always use that width\n *\n *  - The proportional widths should never fall below min size if specified.\n *\n *  - If the grid starts off small but then becomes greater than the size ( + / - )\n *    the width should use the original width; not the newly proportioned widths.\n */\nexport function forceFillColumnWidths(\n  allColumns: any[],\n  expectedWidth: number,\n  startIdx: number,\n  allowBleed: boolean,\n  defaultColWidth: number = 300\n) {\n  const columnsToResize = allColumns.slice(startIdx + 1, allColumns.length).filter(c => {\n    return c.canAutoResize !== false;\n  });\n\n  for (const column of columnsToResize) {\n    if (!column.$$oldWidth) {\n      column.$$oldWidth = column.width;\n    }\n  }\n\n  let additionWidthPerColumn = 0;\n  let exceedsWindow = false;\n  let contentWidth = getContentWidth(allColumns, defaultColWidth);\n  let remainingWidth = expectedWidth - contentWidth;\n  const columnsProcessed: any[] = [];\n  const remainingWidthLimit = 1; // when to stop\n\n  // This loop takes care of the\n  do {\n    additionWidthPerColumn = remainingWidth / columnsToResize.length;\n    exceedsWindow = contentWidth >= expectedWidth;\n\n    for (const column of columnsToResize) {\n      if (exceedsWindow && allowBleed) {\n        column.width = column.$$oldWidth || column.width || defaultColWidth;\n      } else {\n        const newSize = (column.width || defaultColWidth) + additionWidthPerColumn;\n\n        if (column.minWidth && newSize < column.minWidth) {\n          column.width = column.minWidth;\n          columnsProcessed.push(column);\n        } else if (column.maxWidth && newSize > column.maxWidth) {\n          column.width = column.maxWidth;\n          columnsProcessed.push(column);\n        } else {\n          column.width = newSize;\n        }\n      }\n\n      column.width = Math.max(0, column.width);\n    }\n\n    contentWidth = getContentWidth(allColumns);\n    remainingWidth = expectedWidth - contentWidth;\n    removeProcessedColumns(columnsToResize, columnsProcessed);\n  } while (remainingWidth > remainingWidthLimit && columnsToResize.length !== 0);\n}\n\n/**\n * Remove the processed columns from the current active columns.\n */\nfunction removeProcessedColumns(columnsToResize: any[], columnsProcessed: any[]) {\n  for (const column of columnsProcessed) {\n    const index = columnsToResize.indexOf(column);\n    columnsToResize.splice(index, 1);\n  }\n}\n\n/**\n * Gets the width of the columns\n */\nfunction getContentWidth(allColumns: any, defaultColWidth: number = 300): number {\n  let contentWidth = 0;\n\n  for (const column of allColumns) {\n    contentWidth += column.width || defaultColWidth;\n  }\n\n  return contentWidth;\n}\n", "import { Component, Input, Output, EventEmitter, ChangeDetectionStrategy } from '@angular/core';\n\n@Component({\n  selector: 'datatable-pager',\n  template: `\n    <ul class=\"pager\">\n      <li [class.disabled]=\"!canPrevious()\">\n        <a role=\"button\" aria-label=\"go to first page\" href=\"javascript:void(0)\" (click)=\"selectPage(1)\">\n          <i class=\"{{ pagerPreviousIcon }}\"></i>\n        </a>\n      </li>\n      <li [class.disabled]=\"!canPrevious()\">\n        <a role=\"button\" aria-label=\"go to previous page\" href=\"javascript:void(0)\" (click)=\"prevPage()\">\n          <i class=\"{{ pagerLeftArrowIcon }}\"></i>\n        </a>\n      </li>\n      <li\n        role=\"button\"\n        [attr.aria-label]=\"'page ' + pg.number\"\n        class=\"pages\"\n        *ngFor=\"let pg of pages\"\n        [class.active]=\"pg.number === page\"\n      >\n        <a href=\"javascript:void(0)\" (click)=\"selectPage(pg.number)\">\n          {{ pg.text }}\n        </a>\n      </li>\n      <li [class.disabled]=\"!canNext()\">\n        <a role=\"button\" aria-label=\"go to next page\" href=\"javascript:void(0)\" (click)=\"nextPage()\">\n          <i class=\"{{ pagerRightArrowIcon }}\"></i>\n        </a>\n      </li>\n      <li [class.disabled]=\"!canNext()\">\n        <a role=\"button\" aria-label=\"go to last page\" href=\"javascript:void(0)\" (click)=\"selectPage(totalPages)\">\n          <i class=\"{{ pagerNextIcon }}\"></i>\n        </a>\n      </li>\n    </ul>\n  `,\n  host: {\n    class: 'datatable-pager'\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class DataTablePagerComponent {\n  @Input() pagerLeftArrowIcon: string;\n  @Input() pagerRightArrowIcon: string;\n  @Input() pagerPreviousIcon: string;\n  @Input() pagerNextIcon: string;\n\n  @Input()\n  set size(val: number) {\n    this._size = val;\n    this.pages = this.calcPages();\n  }\n\n  get size(): number {\n    return this._size;\n  }\n\n  @Input()\n  set count(val: number) {\n    this._count = val;\n    this.pages = this.calcPages();\n  }\n\n  get count(): number {\n    return this._count;\n  }\n\n  @Input()\n  set page(val: number) {\n    this._page = val;\n    this.pages = this.calcPages();\n  }\n\n  get page(): number {\n    return this._page;\n  }\n\n  get totalPages(): number {\n    const count = this.size < 1 ? 1 : Math.ceil(this.count / this.size);\n    return Math.max(count || 0, 1);\n  }\n\n  @Output() change: EventEmitter<any> = new EventEmitter();\n\n  _count: number = 0;\n  _page: number = 1;\n  _size: number = 0;\n  pages: any;\n\n  canPrevious(): boolean {\n    return this.page > 1;\n  }\n\n  canNext(): boolean {\n    return this.page < this.totalPages;\n  }\n\n  prevPage(): void {\n    this.selectPage(this.page - 1);\n  }\n\n  nextPage(): void {\n    this.selectPage(this.page + 1);\n  }\n\n  selectPage(page: number): void {\n    if (page > 0 && page <= this.totalPages && page !== this.page) {\n      this.page = page;\n\n      this.change.emit({\n        page\n      });\n    }\n  }\n\n  calcPages(page?: number): any[] {\n    const pages = [];\n    let startPage = 1;\n    let endPage = this.totalPages;\n    const maxSize = 5;\n    const isMaxSized = maxSize < this.totalPages;\n\n    page = page || this.page;\n\n    if (isMaxSized) {\n      startPage = page - Math.floor(maxSize / 2);\n      endPage = page + Math.floor(maxSize / 2);\n\n      if (startPage < 1) {\n        startPage = 1;\n        endPage = Math.min(startPage + maxSize - 1, this.totalPages);\n      } else if (endPage > this.totalPages) {\n        startPage = Math.max(this.totalPages - maxSize + 1, 1);\n        endPage = this.totalPages;\n      }\n    }\n\n    for (let num = startPage; num <= endPage; num++) {\n      pages.push({\n        number: num,\n        text: <string>(<any>num)\n      });\n    }\n\n    return pages;\n  }\n}\n", "import { Component, Output, EventEmitter, ChangeDetectionStrategy, Input } from '@angular/core';\nimport { DatatableFooterDirective } from './footer.directive';\n@Component({\n  selector: 'datatable-footer',\n  template: `\n    <div\n      class=\"datatable-footer-inner\"\n      [ngClass]=\"{ 'selected-count': selectedMessage }\"\n      [style.height.px]=\"footerHeight\"\n    >\n      <ng-template\n        *ngIf=\"footerTemplate\"\n        [ngTemplateOutlet]=\"footerTemplate.template\"\n        [ngTemplateOutletContext]=\"{\n          rowCount: rowCount,\n          pageSize: pageSize,\n          selectedCount: selectedCount,\n          curPage: curPage,\n          offset: offset\n        }\"\n      >\n      </ng-template>\n      <div class=\"page-count\" *ngIf=\"!footerTemplate\">\n        <span *ngIf=\"selectedMessage\"> {{ selectedCount?.toLocaleString() }} {{ selectedMessage }} / </span>\n        {{ rowCount?.toLocaleString() }} {{ totalMessage }}\n      </div>\n      <datatable-pager\n        *ngIf=\"!footerTemplate\"\n        [pagerLeftArrowIcon]=\"pagerLeftArrowIcon\"\n        [pagerRightArrowIcon]=\"pagerRightArrowIcon\"\n        [pagerPreviousIcon]=\"pagerPreviousIcon\"\n        [pagerNextIcon]=\"pagerNextIcon\"\n        [page]=\"curPage\"\n        [size]=\"pageSize\"\n        [count]=\"rowCount\"\n        [hidden]=\"!isVisible\"\n        (change)=\"page.emit($event)\"\n      >\n      </datatable-pager>\n    </div>\n  `,\n  host: {\n    class: 'datatable-footer'\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class DataTableFooterComponent {\n  @Input() footerHeight: number;\n  @Input() rowCount: number;\n  @Input() pageSize: number;\n  @Input() offset: number;\n  @Input() pagerLeftArrowIcon: string;\n  @Input() pagerRightArrowIcon: string;\n  @Input() pagerPreviousIcon: string;\n  @Input() pagerNextIcon: string;\n  @Input() totalMessage: string;\n  @Input() footerTemplate: DatatableFooterDirective;\n\n  @Input() selectedCount: number = 0;\n  @Input() selectedMessage: string | boolean;\n\n  @Output() page: EventEmitter<any> = new EventEmitter();\n\n  get isVisible(): boolean {\n    return this.rowCount / this.pageSize > 1;\n  }\n\n  get curPage(): number {\n    return this.offset + 1;\n  }\n}\n", "import {\n  Component,\n  Input,\n  Output,\n  ElementRef,\n  EventEmitter,\n  ViewChild,\n  HostListener,\n  ContentChildren,\n  OnInit,\n  QueryList,\n  AfterViewInit,\n  HostBinding,\n  ContentChild,\n  DoCheck,\n  KeyValueDiffers,\n  KeyValueDiffer,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  SkipSelf,\n  Optional,\n  Inject\n} from '@angular/core';\n\nimport { DatatableGroupHeaderDirective } from './body/body-group-header.directive';\n\nimport { BehaviorSubject, Subscription } from 'rxjs';\nimport { INgxDatatableConfig } from '../ngx-datatable.module';\nimport { groupRowsByParents, optionalGetterForProp } from '../utils/tree';\nimport { TableColumn } from '../types/table-column.type';\nimport { setColumnDefaults, translateTemplates } from '../utils/column-helper';\nimport { ColumnMode } from '../types/column-mode.type';\nimport { SelectionType } from '../types/selection.type';\nimport { SortType } from '../types/sort.type';\nimport { ContextmenuType } from '../types/contextmenu.type';\nimport { DataTableColumnDirective } from './columns/column.directive';\nimport { DatatableRowDetailDirective } from './row-detail/row-detail.directive';\nimport { DatatableFooterDirective } from './footer/footer.directive';\nimport { DataTableBodyComponent } from './body/body.component';\nimport { DataTableHeaderComponent } from './header/header.component';\nimport { ScrollbarHelper } from '../services/scrollbar-helper.service';\nimport { ColumnChangesService } from '../services/column-changes.service';\nimport { DimensionsHelper } from '../services/dimensions-helper.service';\nimport { throttleable } from '../utils/throttle';\nimport { forceFillColumnWidths, adjustColumnWidths } from '../utils/math';\nimport { sortRows } from '../utils/sort';\n\n@Component({\n  selector: 'ngx-datatable',\n  templateUrl: './datatable.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  styleUrls: ['./datatable.component.scss'],\n  host: {\n    class: 'ngx-datatable'\n  }\n})\nexport class DatatableComponent implements OnInit, DoCheck, AfterViewInit {\n  /**\n   * Template for the target marker of drag target columns.\n   */\n  @Input() targetMarkerTemplate: any;\n\n  /**\n   * Rows that are displayed in the table.\n   */\n  @Input() set rows(val: any) {\n    this._rows = val;\n\n    if (val) {\n      this._internalRows = [...val];\n    }\n\n    // auto sort on new updates\n    if (!this.externalSorting) {\n      this.sortInternalRows();\n    }\n\n    // auto group by parent on new update\n    this._internalRows = groupRowsByParents(\n      this._internalRows,\n      optionalGetterForProp(this.treeFromRelation),\n      optionalGetterForProp(this.treeToRelation)\n    );\n\n    // recalculate sizes/etc\n    this.recalculate();\n\n    if (this._rows && this._groupRowsBy) {\n      // If a column has been specified in _groupRowsBy created a new array with the data grouped by that row\n      this.groupedRows = this.groupArrayBy(this._rows, this._groupRowsBy);\n    }\n\n    this.cd.markForCheck();\n  }\n\n  /**\n   * Gets the rows.\n   */\n  get rows(): any {\n    return this._rows;\n  }\n\n  /**\n   * This attribute allows the user to set the name of the column to group the data with\n   */\n  @Input() set groupRowsBy(val: string) {\n    if (val) {\n      this._groupRowsBy = val;\n      if (this._rows && this._groupRowsBy) {\n        // cretes a new array with the data grouped\n        this.groupedRows = this.groupArrayBy(this._rows, this._groupRowsBy);\n      }\n    }\n  }\n\n  get groupRowsBy() {\n    return this._groupRowsBy;\n  }\n\n  /**\n   * This attribute allows the user to set a grouped array in the following format:\n   *  [\n   *    {groupid=1} [\n   *      {id=1 name=\"test1\"},\n   *      {id=2 name=\"test2\"},\n   *      {id=3 name=\"test3\"}\n   *    ]},\n   *    {groupid=2>[\n   *      {id=4 name=\"test4\"},\n   *      {id=5 name=\"test5\"},\n   *      {id=6 name=\"test6\"}\n   *    ]}\n   *  ]\n   */\n  @Input() groupedRows: any[];\n\n  /**\n   * Columns to be displayed.\n   */\n  @Input() set columns(val: TableColumn[]) {\n    if (val) {\n      this._internalColumns = [...val];\n      setColumnDefaults(this._internalColumns);\n      this.recalculateColumns();\n    }\n\n    this._columns = val;\n  }\n\n  /**\n   * Get the columns.\n   */\n  get columns(): TableColumn[] {\n    return this._columns;\n  }\n\n  /**\n   * List of row objects that should be\n   * represented as selected in the grid.\n   * Default value: `[]`\n   */\n  @Input() selected: any[] = [];\n\n  /**\n   * Enable vertical scrollbars\n   */\n  @Input() scrollbarV: boolean = false;\n\n  /**\n   * Enable horz scrollbars\n   */\n  @Input() scrollbarH: boolean = false;\n\n  /**\n   * The row height; which is necessary\n   * to calculate the height for the lazy rendering.\n   */\n  @Input() rowHeight: number | 'auto' | ((row?: any) => number) = 30;\n\n  /**\n   * Type of column width distribution formula.\n   * Example: flex, force, standard\n   */\n  @Input() columnMode: ColumnMode | keyof typeof ColumnMode = ColumnMode.standard;\n\n  /**\n   * The minimum header height in pixels.\n   * Pass a falsey for no header\n   */\n  @Input() headerHeight: number = 30;\n\n  /**\n   * The minimum footer height in pixels.\n   * Pass falsey for no footer\n   */\n  @Input() footerHeight: number = 0;\n\n  /**\n   * If the table should use external paging\n   * otherwise its assumed that all data is preloaded.\n   */\n  @Input() externalPaging: boolean = false;\n\n  /**\n   * If the table should use external sorting or\n   * the built-in basic sorting.\n   */\n  @Input() externalSorting: boolean = false;\n\n  /**\n   * The page size to be shown.\n   * Default value: `undefined`\n   */\n  @Input() set limit(val: number | undefined) {\n    this._limit = val;\n\n    // recalculate sizes/etc\n    this.recalculate();\n  }\n\n  /**\n   * Gets the limit.\n   */\n  get limit(): number | undefined {\n    return this._limit;\n  }\n\n  /**\n   * The total count of all rows.\n   * Default value: `0`\n   */\n  @Input() set count(val: number) {\n    this._count = val;\n\n    // recalculate sizes/etc\n    this.recalculate();\n  }\n\n  /**\n   * Gets the count.\n   */\n  get count(): number {\n    return this._count;\n  }\n\n  /**\n   * The current offset ( page - 1 ) shown.\n   * Default value: `0`\n   */\n  @Input() set offset(val: number) {\n    this._offset = val;\n  }\n  get offset(): number {\n    return Math.max(Math.min(this._offset, Math.ceil(this.rowCount / this.pageSize) - 1), 0);\n  }\n\n  /**\n   * Show the linear loading bar.\n   * Default value: `false`\n   */\n  @Input() loadingIndicator: boolean = false;\n\n  /**\n   * Type of row selection. Options are:\n   *\n   *  - `single`\n   *  - `multi`\n   *  - `checkbox`\n   *  - `multiClick`\n   *  - `cell`\n   *\n   * For no selection pass a `falsey`.\n   * Default value: `undefined`\n   */\n  @Input() selectionType: SelectionType;\n\n  /**\n   * Enable/Disable ability to re-order columns\n   * by dragging them.\n   */\n  @Input() reorderable: boolean = true;\n\n  /**\n   * Swap columns on re-order columns or\n   * move them.\n   */\n  @Input() swapColumns: boolean = true;\n\n  /**\n   * The type of sorting\n   */\n  @Input() sortType: SortType = SortType.single;\n\n  /**\n   * Array of sorted columns by property and type.\n   * Default value: `[]`\n   */\n  @Input() sorts: any[] = [];\n\n  /**\n   * Css class overrides\n   */\n  @Input() cssClasses: any = {\n    sortAscending: 'datatable-icon-up',\n    sortDescending: 'datatable-icon-down',\n    sortUnset: 'datatable-icon-sort-unset',\n    pagerLeftArrow: 'datatable-icon-left',\n    pagerRightArrow: 'datatable-icon-right',\n    pagerPrevious: 'datatable-icon-prev',\n    pagerNext: 'datatable-icon-skip'\n  };\n\n  /**\n   * Message overrides for localization\n   *\n   * emptyMessage     [default] = 'No data to display'\n   * totalMessage     [default] = 'total'\n   * selectedMessage  [default] = 'selected'\n   */\n  @Input() messages: any = {\n    // Message to show when array is presented\n    // but contains no values\n    emptyMessage: 'No data to display',\n\n    // Footer total message\n    totalMessage: 'total',\n\n    // Footer selected message\n    selectedMessage: 'selected'\n  };\n\n  /**\n   * Row specific classes.\n   * Similar implementation to ngClass.\n   *\n   *  [rowClass]=\"'first second'\"\n   *  [rowClass]=\"{ 'first': true, 'second': true, 'third': false }\"\n   */\n  @Input() rowClass: any;\n\n  /**\n   * A boolean/function you can use to check whether you want\n   * to select a particular row based on a criteria. Example:\n   *\n   *    (selection) => {\n   *      return selection !== 'Ethel Price';\n   *    }\n   */\n  @Input() selectCheck: any;\n\n  /**\n   * A function you can use to check whether you want\n   * to show the checkbox for a particular row based on a criteria. Example:\n   *\n   *    (row, column, value) => {\n   *      return row.name !== 'Ethel Price';\n   *    }\n   */\n  @Input() displayCheck: (row: any, column?: any, value?: any) => boolean;\n\n  /**\n   * A boolean you can use to set the detault behaviour of rows and groups\n   * whether they will start expanded or not. If ommited the default is NOT expanded.\n   *\n   */\n  @Input() groupExpansionDefault: boolean = false;\n\n  /**\n   * Property to which you can use for custom tracking of rows.\n   * Example: 'name'\n   */\n  @Input() trackByProp: string;\n\n  /**\n   * Property to which you can use for determining select all\n   * rows on current page or not.\n   *\n   * @memberOf DatatableComponent\n   */\n  @Input() selectAllRowsOnPage = false;\n\n  /**\n   * A flag for row virtualization on / off\n   */\n  @Input() virtualization: boolean = true;\n\n  /**\n   * Tree from relation\n   */\n  @Input() treeFromRelation: string;\n\n  /**\n   * Tree to relation\n   */\n  @Input() treeToRelation: string;\n\n  /**\n   * A flag for switching summary row on / off\n   */\n  @Input() summaryRow: boolean = false;\n\n  /**\n   * A height of summary row\n   */\n  @Input() summaryHeight: number = 30;\n\n  /**\n   * A property holds a summary row position: top/bottom\n   */\n  @Input() summaryPosition: string = 'top';\n\n  /**\n   * Body was scrolled typically in a `scrollbarV:true` scenario.\n   */\n  @Output() scroll: EventEmitter<any> = new EventEmitter();\n\n  /**\n   * A cell or row was focused via keyboard or mouse click.\n   */\n  @Output() activate: EventEmitter<any> = new EventEmitter();\n\n  /**\n   * A cell or row was selected.\n   */\n  @Output() select: EventEmitter<any> = new EventEmitter();\n\n  /**\n   * Column sort was invoked.\n   */\n  @Output() sort: EventEmitter<any> = new EventEmitter();\n\n  /**\n   * The table was paged either triggered by the pager or the body scroll.\n   */\n  @Output() page: EventEmitter<any> = new EventEmitter();\n\n  /**\n   * Columns were re-ordered.\n   */\n  @Output() reorder: EventEmitter<any> = new EventEmitter();\n\n  /**\n   * Column was resized.\n   */\n  @Output() resize: EventEmitter<any> = new EventEmitter();\n\n  /**\n   * The context menu was invoked on the table.\n   * type indicates whether the header or the body was clicked.\n   * content contains either the column or the row that was clicked.\n   */\n  @Output() tableContextmenu = new EventEmitter<{ event: MouseEvent; type: ContextmenuType; content: any }>(false);\n\n  /**\n   * A row was expanded ot collapsed for tree\n   */\n  @Output() treeAction: EventEmitter<any> = new EventEmitter();\n\n  /**\n   * CSS class applied if the header height if fixed height.\n   */\n  @HostBinding('class.fixed-header')\n  get isFixedHeader(): boolean {\n    const headerHeight: number | string = this.headerHeight;\n    return typeof headerHeight === 'string' ? <string>headerHeight !== 'auto' : true;\n  }\n\n  /**\n   * CSS class applied to the root element if\n   * the row heights are fixed heights.\n   */\n  @HostBinding('class.fixed-row')\n  get isFixedRow(): boolean {\n    return this.rowHeight !== 'auto';\n  }\n\n  /**\n   * CSS class applied to root element if\n   * vertical scrolling is enabled.\n   */\n  @HostBinding('class.scroll-vertical')\n  get isVertScroll(): boolean {\n    return this.scrollbarV;\n  }\n\n  /**\n   * CSS class applied to root element if\n   * virtualization is enabled.\n   */\n  @HostBinding('class.virtualized')\n  get isVirtualized(): boolean {\n    return this.virtualization;\n  }\n\n  /**\n   * CSS class applied to the root element\n   * if the horziontal scrolling is enabled.\n   */\n  @HostBinding('class.scroll-horz')\n  get isHorScroll(): boolean {\n    return this.scrollbarH;\n  }\n\n  /**\n   * CSS class applied to root element is selectable.\n   */\n  @HostBinding('class.selectable')\n  get isSelectable(): boolean {\n    return this.selectionType !== undefined;\n  }\n\n  /**\n   * CSS class applied to root is checkbox selection.\n   */\n  @HostBinding('class.checkbox-selection')\n  get isCheckboxSelection(): boolean {\n    return this.selectionType === SelectionType.checkbox;\n  }\n\n  /**\n   * CSS class applied to root if cell selection.\n   */\n  @HostBinding('class.cell-selection')\n  get isCellSelection(): boolean {\n    return this.selectionType === SelectionType.cell;\n  }\n\n  /**\n   * CSS class applied to root if single select.\n   */\n  @HostBinding('class.single-selection')\n  get isSingleSelection(): boolean {\n    return this.selectionType === SelectionType.single;\n  }\n\n  /**\n   * CSS class added to root element if mulit select\n   */\n  @HostBinding('class.multi-selection')\n  get isMultiSelection(): boolean {\n    return this.selectionType === SelectionType.multi;\n  }\n\n  /**\n   * CSS class added to root element if mulit click select\n   */\n  @HostBinding('class.multi-click-selection')\n  get isMultiClickSelection(): boolean {\n    return this.selectionType === SelectionType.multiClick;\n  }\n\n  /**\n   * Column templates gathered from `ContentChildren`\n   * if described in your markup.\n   */\n  @ContentChildren(DataTableColumnDirective)\n  set columnTemplates(val: QueryList<DataTableColumnDirective>) {\n    this._columnTemplates = val;\n    this.translateColumns(val);\n  }\n\n  /**\n   * Returns the column templates.\n   */\n  get columnTemplates(): QueryList<DataTableColumnDirective> {\n    return this._columnTemplates;\n  }\n\n  /**\n   * Row Detail templates gathered from the ContentChild\n   */\n  @ContentChild(DatatableRowDetailDirective)\n  rowDetail: DatatableRowDetailDirective;\n\n  /**\n   * Group Header templates gathered from the ContentChild\n   */\n  @ContentChild(DatatableGroupHeaderDirective)\n  groupHeader: DatatableGroupHeaderDirective;\n\n  /**\n   * Footer template gathered from the ContentChild\n   */\n  @ContentChild(DatatableFooterDirective)\n  footer: DatatableFooterDirective;\n\n  /**\n   * Reference to the body component for manually\n   * invoking functions on the body.\n   */\n  @ViewChild(DataTableBodyComponent)\n  bodyComponent: DataTableBodyComponent;\n\n  /**\n   * Reference to the header component for manually\n   * invoking functions on the header.\n   *\n   * @memberOf DatatableComponent\n   */\n  @ViewChild(DataTableHeaderComponent)\n  headerComponent: DataTableHeaderComponent;\n\n  /**\n   * Returns if all rows are selected.\n   */\n  get allRowsSelected(): boolean {\n    let allRowsSelected = this.rows && this.selected && this.selected.length === this.rows.length;\n\n    if (this.bodyComponent && this.selectAllRowsOnPage) {\n      const indexes = this.bodyComponent.indexes;\n      const rowsOnPage = indexes.last - indexes.first;\n      allRowsSelected = this.selected.length === rowsOnPage;\n    }\n\n    return this.selected && this.rows && this.rows.length !== 0 && allRowsSelected;\n  }\n\n  element: HTMLElement;\n  _innerWidth: number;\n  pageSize: number;\n  bodyHeight: number;\n  rowCount: number = 0;\n  rowDiffer: KeyValueDiffer<{}, {}>;\n\n  _offsetX = new BehaviorSubject(0);\n  _limit: number | undefined;\n  _count: number = 0;\n  _offset: number = 0;\n  _rows: any[];\n  _groupRowsBy: string;\n  _internalRows: any[];\n  _internalColumns: TableColumn[];\n  _columns: TableColumn[];\n  _columnTemplates: QueryList<DataTableColumnDirective>;\n  _subscriptions: Subscription[] = [];\n\n  constructor(\n    @SkipSelf() private scrollbarHelper: ScrollbarHelper,\n    @SkipSelf() private dimensionsHelper: DimensionsHelper,\n    private cd: ChangeDetectorRef,\n    element: ElementRef,\n    differs: KeyValueDiffers,\n    private columnChangesService: ColumnChangesService,\n    @Optional() @Inject('configuration') private configuration: INgxDatatableConfig\n  ) {\n    // get ref to elm for measuring\n    this.element = element.nativeElement;\n    this.rowDiffer = differs.find({}).create();\n\n    // apply global settings from Module.forRoot\n    if (this.configuration && this.configuration.messages) {\n      this.messages = { ...this.configuration.messages };\n    }\n  }\n\n  /**\n   * Lifecycle hook that is called after data-bound\n   * properties of a directive are initialized.\n   */\n  ngOnInit(): void {\n    // need to call this immediatly to size\n    // if the table is hidden the visibility\n    // listener will invoke this itself upon show\n    this.recalculate();\n  }\n\n  /**\n   * Lifecycle hook that is called after a component's\n   * view has been fully initialized.\n   */\n  ngAfterViewInit(): void {\n    if (!this.externalSorting) {\n      this.sortInternalRows();\n    }\n\n    // this has to be done to prevent the change detection\n    // tree from freaking out because we are readjusting\n    if (typeof requestAnimationFrame === 'undefined') {\n      return;\n    }\n\n    requestAnimationFrame(() => {\n      this.recalculate();\n\n      // emit page for virtual server-side kickoff\n      if (this.externalPaging && this.scrollbarV) {\n        this.page.emit({\n          count: this.count,\n          pageSize: this.pageSize,\n          limit: this.limit,\n          offset: 0\n        });\n      }\n    });\n  }\n\n  /**\n   * Lifecycle hook that is called after a component's\n   * content has been fully initialized.\n   */\n  ngAfterContentInit() {\n    this.columnTemplates.changes.subscribe(v => this.translateColumns(v));\n    this.listenForColumnInputChanges();\n  }\n\n  /**\n   * This will be used when displaying or selecting rows.\n   * when tracking/comparing them, we'll use the value of this fn,\n   *\n   * (`fn(x) === fn(y)` instead of `x === y`)\n   */\n  @Input() rowIdentity: (x: any) => any = (x: any) => {\n    if (this._groupRowsBy) {\n      // each group in groupedRows are stored as {key, value: [rows]},\n      // where key is the groupRowsBy index\n      return x.key;\n    } else {\n      return x;\n    }\n  };\n\n  /**\n   * Translates the templates to the column objects\n   */\n  translateColumns(val: any) {\n    if (val) {\n      const arr = val.toArray();\n      if (arr.length) {\n        this._internalColumns = translateTemplates(arr);\n        setColumnDefaults(this._internalColumns);\n        this.recalculateColumns();\n        this.sortInternalRows();\n        this.cd.markForCheck();\n      }\n    }\n  }\n\n  /**\n   * Creates a map with the data grouped by the user choice of grouping index\n   *\n   * @param originalArray the original array passed via parameter\n   * @param groupByIndex  the index of the column to group the data by\n   */\n  groupArrayBy(originalArray: any, groupBy: any) {\n    // create a map to hold groups with their corresponding results\n    const map = new Map();\n    let i: number = 0;\n\n    originalArray.forEach((item: any) => {\n      const key = item[groupBy];\n      if (!map.has(key)) {\n        map.set(key, [item]);\n      } else {\n        map.get(key).push(item);\n      }\n      i++;\n    });\n\n    const addGroup = (key: any, value: any) => {\n      return { key, value };\n    };\n\n    // convert map back to a simple array of objects\n    return Array.from(map, x => addGroup(x[0], x[1]));\n  }\n\n  /*\n   * Lifecycle hook that is called when Angular dirty checks a directive.\n   */\n  ngDoCheck(): void {\n    if (this.rowDiffer.diff(this.rows)) {\n      if (!this.externalSorting) {\n        this.sortInternalRows();\n      } else {\n        this._internalRows = [...this.rows];\n      }\n\n      // auto group by parent on new update\n      this._internalRows = groupRowsByParents(\n        this._internalRows,\n        optionalGetterForProp(this.treeFromRelation),\n        optionalGetterForProp(this.treeToRelation)\n      );\n\n      this.recalculatePages();\n      this.cd.markForCheck();\n    }\n  }\n\n  /**\n   * Recalc's the sizes of the grid.\n   *\n   * Updated automatically on changes to:\n   *\n   *  - Columns\n   *  - Rows\n   *  - Paging related\n   *\n   * Also can be manually invoked or upon window resize.\n   */\n  recalculate(): void {\n    this.recalculateDims();\n    this.recalculateColumns();\n    this.cd.markForCheck();\n  }\n\n  /**\n   * Window resize handler to update sizes.\n   */\n  @HostListener('window:resize')\n  @throttleable(5)\n  onWindowResize(): void {\n    this.recalculate();\n  }\n\n  /**\n   * Recalulcates the column widths based on column width\n   * distribution mode and scrollbar offsets.\n   */\n  recalculateColumns(\n    columns: any[] = this._internalColumns,\n    forceIdx: number = -1,\n    allowBleed: boolean = this.scrollbarH\n  ): any[] | undefined {\n    if (!columns) return undefined;\n\n    let width = this._innerWidth;\n    if (this.scrollbarV) {\n      width = width - this.scrollbarHelper.width;\n    }\n\n    if (this.columnMode === ColumnMode.force) {\n      forceFillColumnWidths(columns, width, forceIdx, allowBleed);\n    } else if (this.columnMode === ColumnMode.flex) {\n      adjustColumnWidths(columns, width);\n    }\n\n    return columns;\n  }\n\n  /**\n   * Recalculates the dimensions of the table size.\n   * Internally calls the page size and row count calcs too.\n   *\n   */\n  recalculateDims(): void {\n    const dims = this.dimensionsHelper.getDimensions(this.element);\n    this._innerWidth = Math.floor(dims.width);\n\n    if (this.scrollbarV) {\n      let height = dims.height;\n      if (this.headerHeight) height = height - this.headerHeight;\n      if (this.footerHeight) height = height - this.footerHeight;\n      this.bodyHeight = height;\n    }\n\n    this.recalculatePages();\n  }\n\n  /**\n   * Recalculates the pages after a update.\n   */\n  recalculatePages(): void {\n    this.pageSize = this.calcPageSize();\n    this.rowCount = this.calcRowCount();\n  }\n\n  /**\n   * Body triggered a page event.\n   */\n  onBodyPage({ offset }: any): void {\n    // Avoid pagination caming from body events like scroll when the table\n    // has no virtualization and the external paging is enable.\n    // This means, let's the developer handle pagination by my him(her) self\n    if (this.externalPaging && !this.virtualization) {\n      return;\n    }\n\n    this.offset = offset;\n\n    this.page.emit({\n      count: this.count,\n      pageSize: this.pageSize,\n      limit: this.limit,\n      offset: this.offset\n    });\n  }\n\n  /**\n   * The body triggered a scroll event.\n   */\n  onBodyScroll(event: MouseEvent): void {\n    this._offsetX.next(event.offsetX);\n    this.scroll.emit(event);\n    this.cd.detectChanges();\n  }\n\n  /**\n   * The footer triggered a page event.\n   */\n  onFooterPage(event: any) {\n    this.offset = event.page - 1;\n    this.bodyComponent.updateOffsetY(this.offset);\n\n    this.page.emit({\n      count: this.count,\n      pageSize: this.pageSize,\n      limit: this.limit,\n      offset: this.offset\n    });\n\n    if (this.selectAllRowsOnPage) {\n      this.selected = [];\n      this.select.emit({\n        selected: this.selected\n      });\n    }\n  }\n\n  /**\n   * Recalculates the sizes of the page\n   */\n  calcPageSize(val: any[] = this.rows): number {\n    // Keep the page size constant even if the row has been expanded.\n    // This is because an expanded row is still considered to be a child of\n    // the original row.  Hence calculation would use rowHeight only.\n    if (this.scrollbarV && this.virtualization) {\n      const size = Math.ceil(this.bodyHeight / (this.rowHeight as number));\n      return Math.max(size, 0);\n    }\n\n    // if limit is passed, we are paging\n    if (this.limit !== undefined) {\n      return this.limit;\n    }\n\n    // otherwise use row length\n    if (val) {\n      return val.length;\n    }\n\n    // other empty :(\n    return 0;\n  }\n\n  /**\n   * Calculates the row count.\n   */\n  calcRowCount(val: any[] = this.rows): number {\n    if (!this.externalPaging) {\n      if (!val) return 0;\n\n      if (this.groupedRows) {\n        return this.groupedRows.length;\n      } else if (this.treeFromRelation != null && this.treeToRelation != null) {\n        return this._internalRows.length;\n      } else {\n        return val.length;\n      }\n    }\n\n    return this.count;\n  }\n\n  /**\n   * The header triggered a contextmenu event.\n   */\n  onColumnContextmenu({ event, column }: any): void {\n    this.tableContextmenu.emit({ event, type: ContextmenuType.header, content: column });\n  }\n\n  /**\n   * The body triggered a contextmenu event.\n   */\n  onRowContextmenu({ event, row }: any): void {\n    this.tableContextmenu.emit({ event, type: ContextmenuType.body, content: row });\n  }\n\n  /**\n   * The header triggered a column resize event.\n   */\n  onColumnResize({ column, newValue }: any): void {\n    /* Safari/iOS 10.2 workaround */\n    if (column === undefined) {\n      return;\n    }\n\n    let idx: number;\n    const cols = this._internalColumns.map((c, i) => {\n      c = { ...c };\n\n      if (c.$$id === column.$$id) {\n        idx = i;\n        c.width = newValue;\n\n        // set this so we can force the column\n        // width distribution to be to this value\n        c.$$oldWidth = newValue;\n      }\n\n      return c;\n    });\n\n    this.recalculateColumns(cols, idx);\n    this._internalColumns = cols;\n\n    this.resize.emit({\n      column,\n      newValue\n    });\n  }\n\n  /**\n   * The header triggered a column re-order event.\n   */\n  onColumnReorder({ column, newValue, prevValue }: any): void {\n    const cols = this._internalColumns.map(c => {\n      return { ...c };\n    });\n\n    if (this.swapColumns) {\n      const prevCol = cols[newValue];\n      cols[newValue] = column;\n      cols[prevValue] = prevCol;\n    } else {\n      if (newValue > prevValue) {\n        const movedCol = cols[prevValue];\n        for (let i = prevValue; i < newValue; i++) {\n          cols[i] = cols[i + 1];\n        }\n        cols[newValue] = movedCol;\n      } else {\n        const movedCol = cols[prevValue];\n        for (let i = prevValue; i > newValue; i--) {\n          cols[i] = cols[i - 1];\n        }\n        cols[newValue] = movedCol;\n      }\n    }\n\n    this._internalColumns = cols;\n\n    this.reorder.emit({\n      column,\n      newValue,\n      prevValue\n    });\n  }\n\n  /**\n   * The header triggered a column sort event.\n   */\n  onColumnSort(event: any): void {\n    // clean selected rows\n    if (this.selectAllRowsOnPage) {\n      this.selected = [];\n      this.select.emit({\n        selected: this.selected\n      });\n    }\n\n    this.sorts = event.sorts;\n\n    // this could be optimized better since it will resort\n    // the rows again on the 'push' detection...\n    if (this.externalSorting === false) {\n      // don't use normal setter so we don't resort\n      this.sortInternalRows();\n    }\n\n    // auto group by parent on new update\n    this._internalRows = groupRowsByParents(\n      this._internalRows,\n      optionalGetterForProp(this.treeFromRelation),\n      optionalGetterForProp(this.treeToRelation)\n    );\n\n    // Always go to first page when sorting to see the newly sorted data\n    this.offset = 0;\n    this.bodyComponent.updateOffsetY(this.offset);\n    this.sort.emit(event);\n  }\n\n  /**\n   * Toggle all row selection\n   */\n  onHeaderSelect(event: any): void {\n    if (this.bodyComponent && this.selectAllRowsOnPage) {\n      // before we splice, chk if we currently have all selected\n      const first = this.bodyComponent.indexes.first;\n      const last = this.bodyComponent.indexes.last;\n      const allSelected = this.selected.length === last - first;\n\n      // remove all existing either way\n      this.selected = [];\n\n      // do the opposite here\n      if (!allSelected) {\n        this.selected.push(...this._internalRows.slice(first, last));\n      }\n    } else {\n      // before we splice, chk if we currently have all selected\n      const allSelected = this.selected.length === this.rows.length;\n      // remove all existing either way\n      this.selected = [];\n      // do the opposite here\n      if (!allSelected) {\n        this.selected.push(...this.rows);\n      }\n    }\n\n    this.select.emit({\n      selected: this.selected\n    });\n  }\n\n  /**\n   * A row was selected from body\n   */\n  onBodySelect(event: any): void {\n    this.select.emit(event);\n  }\n\n  /**\n   * A row was expanded or collapsed for tree\n   */\n  onTreeAction(event: any) {\n    const row = event.row;\n    // TODO: For duplicated items this will not work\n    const rowIndex = this._rows.findIndex(r => r[this.treeToRelation] === event.row[this.treeToRelation]);\n    this.treeAction.emit({ row, rowIndex });\n  }\n\n  ngOnDestroy() {\n    this._subscriptions.forEach(subscription => subscription.unsubscribe());\n  }\n\n  /**\n   * listen for changes to input bindings of all DataTableColumnDirective and\n   * trigger the columnTemplates.changes observable to emit\n   */\n  private listenForColumnInputChanges(): void {\n    this._subscriptions.push(\n      this.columnChangesService.columnInputChanges$.subscribe(() => {\n        if (this.columnTemplates) {\n          this.columnTemplates.notifyOnChanges();\n        }\n      })\n    );\n  }\n\n  private sortInternalRows(): void {\n    this._internalRows = sortRows(this._internalRows, this._internalColumns, this.sorts);\n  }\n}\n", "<div role=\"table\" visibilityObserver (visible)=\"recalculate()\">\n  <datatable-header\n    role=\"rowgroup\"\n    *ngIf=\"headerHeight\"\n    [sorts]=\"sorts\"\n    [sortType]=\"sortType\"\n    [scrollbarH]=\"scrollbarH\"\n    [innerWidth]=\"_innerWidth\"\n    [offsetX]=\"_offsetX | async\"\n    [dealsWithGroup]=\"groupedRows !== undefined\"\n    [columns]=\"_internalColumns\"\n    [headerHeight]=\"headerHeight\"\n    [reorderable]=\"reorderable\"\n    [targetMarkerTemplate]=\"targetMarkerTemplate\"\n    [sortAscendingIcon]=\"cssClasses.sortAscending\"\n    [sortDescendingIcon]=\"cssClasses.sortDescending\"\n    [sortUnsetIcon]=\"cssClasses.sortUnset\"\n    [allRowsSelected]=\"allRowsSelected\"\n    [selectionType]=\"selectionType\"\n    (sort)=\"onColumnSort($event)\"\n    (resize)=\"onColumnResize($event)\"\n    (reorder)=\"onColumnReorder($event)\"\n    (select)=\"onHeaderSelect($event)\"\n    (columnContextmenu)=\"onColumnContextmenu($event)\"\n  >\n  </datatable-header>\n  <datatable-body\n    role=\"rowgroup\"\n    [groupRowsBy]=\"groupRowsBy\"\n    [groupedRows]=\"groupedRows\"\n    [rows]=\"_internalRows\"\n    [groupExpansionDefault]=\"groupExpansionDefault\"\n    [scrollbarV]=\"scrollbarV\"\n    [scrollbarH]=\"scrollbarH\"\n    [virtualization]=\"virtualization\"\n    [loadingIndicator]=\"loadingIndicator\"\n    [externalPaging]=\"externalPaging\"\n    [rowHeight]=\"rowHeight\"\n    [rowCount]=\"rowCount\"\n    [offset]=\"offset\"\n    [trackByProp]=\"trackByProp\"\n    [columns]=\"_internalColumns\"\n    [pageSize]=\"pageSize\"\n    [offsetX]=\"_offsetX | async\"\n    [rowDetail]=\"rowDetail\"\n    [groupHeader]=\"groupHeader\"\n    [selected]=\"selected\"\n    [innerWidth]=\"_innerWidth\"\n    [bodyHeight]=\"bodyHeight\"\n    [selectionType]=\"selectionType\"\n    [emptyMessage]=\"messages.emptyMessage\"\n    [rowIdentity]=\"rowIdentity\"\n    [rowClass]=\"rowClass\"\n    [selectCheck]=\"selectCheck\"\n    [displayCheck]=\"displayCheck\"\n    [summaryRow]=\"summaryRow\"\n    [summaryHeight]=\"summaryHeight\"\n    [summaryPosition]=\"summaryPosition\"\n    (page)=\"onBodyPage($event)\"\n    (activate)=\"activate.emit($event)\"\n    (rowContextmenu)=\"onRowContextmenu($event)\"\n    (select)=\"onBodySelect($event)\"\n    (scroll)=\"onBodyScroll($event)\"\n    (treeAction)=\"onTreeAction($event)\"\n  >\n  </datatable-body>\n  <datatable-footer\n    *ngIf=\"footerHeight\"\n    [rowCount]=\"rowCount\"\n    [pageSize]=\"pageSize\"\n    [offset]=\"offset\"\n    [footerHeight]=\"footerHeight\"\n    [footerTemplate]=\"footer\"\n    [totalMessage]=\"messages.totalMessage\"\n    [pagerLeftArrowIcon]=\"cssClasses.pagerLeftArrow\"\n    [pagerRightArrowIcon]=\"cssClasses.pagerRightArrow\"\n    [pagerPreviousIcon]=\"cssClasses.pagerPrevious\"\n    [selectedCount]=\"selected.length\"\n    [selectedMessage]=\"!!selectionType && messages.selectedMessage\"\n    [pagerNextIcon]=\"cssClasses.pagerNext\"\n    (page)=\"onFooterPage($event)\"\n  >\n  </datatable-footer>\n</div>\n", "import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ScrollbarHelper } from './services/scrollbar-helper.service';\nimport { DimensionsHelper } from './services/dimensions-helper.service';\nimport { ColumnChangesService } from './services/column-changes.service';\nimport { DataTableFooterTemplateDirective } from './components/footer/footer-template.directive';\nimport { VisibilityDirective } from './directives/visibility.directive';\nimport { DraggableDirective } from './directives/draggable.directive';\nimport { ResizeableDirective } from './directives/resizeable.directive';\nimport { OrderableDirective } from './directives/orderable.directive';\nimport { LongPressDirective } from './directives/long-press.directive';\nimport { ScrollerComponent } from './components/body/scroller.component';\nimport { DatatableComponent } from './components/datatable.component';\nimport { DataTableColumnDirective } from './components/columns/column.directive';\nimport { DataTableHeaderComponent } from './components/header/header.component';\nimport { DataTableHeaderCellComponent } from './components/header/header-cell.component';\nimport { DataTableBodyComponent } from './components/body/body.component';\nimport { DataTableFooterComponent } from './components/footer/footer.component';\nimport { DataTablePagerComponent } from './components/footer/pager.component';\nimport { ProgressBarComponent } from './components/body/progress-bar.component';\nimport { DataTableBodyRowComponent } from './components/body/body-row.component';\nimport { DataTableRowWrapperComponent } from './components/body/body-row-wrapper.component';\nimport { DatatableRowDetailDirective } from './components/row-detail/row-detail.directive';\nimport { DatatableGroupHeaderDirective } from './components/body/body-group-header.directive';\nimport { DatatableRowDetailTemplateDirective } from './components/row-detail/row-detail-template.directive';\nimport { DataTableBodyCellComponent } from './components/body/body-cell.component';\nimport { DataTableSelectionComponent } from './components/body/selection.component';\nimport { DataTableColumnHeaderDirective } from './components/columns/column-header.directive';\nimport { DataTableColumnCellDirective } from './components/columns/column-cell.directive';\nimport { DataTableColumnCellTreeToggle } from './components/columns/tree.directive';\nimport { DatatableFooterDirective } from './components/footer/footer.directive';\nimport { DatatableGroupHeaderTemplateDirective } from './components/body/body-group-header-template.directive';\nimport { DataTableSummaryRowComponent } from './components/body/summary/summary-row.component';\n\n@NgModule({\n  imports: [CommonModule],\n  providers: [ScrollbarHelper, DimensionsHelper, ColumnChangesService],\n  declarations: [\n    DataTableFooterTemplateDirective,\n    VisibilityDirective,\n    DraggableDirective,\n    ResizeableDirective,\n    OrderableDirective,\n    LongPressDirective,\n    ScrollerComponent,\n    DatatableComponent,\n    DataTableColumnDirective,\n    DataTableHeaderComponent,\n    DataTableHeaderCellComponent,\n    DataTableBodyComponent,\n    DataTableFooterComponent,\n    DataTablePagerComponent,\n    ProgressBarComponent,\n    DataTableBodyRowComponent,\n    DataTableRowWrapperComponent,\n    DatatableRowDetailDirective,\n    DatatableGroupHeaderDirective,\n    DatatableRowDetailTemplateDirective,\n    DataTableBodyCellComponent,\n    DataTableSelectionComponent,\n    DataTableColumnHeaderDirective,\n    DataTableColumnCellDirective,\n    DataTableColumnCellTreeToggle,\n    DatatableFooterDirective,\n    DatatableGroupHeaderTemplateDirective,\n    DataTableSummaryRowComponent\n  ],\n  exports: [\n    DatatableComponent,\n    DatatableRowDetailDirective,\n    DatatableGroupHeaderDirective,\n    DatatableRowDetailTemplateDirective,\n    DataTableColumnDirective,\n    DataTableColumnHeaderDirective,\n    DataTableColumnCellDirective,\n    DataTableColumnCellTreeToggle,\n    DataTableFooterTemplateDirective,\n    DatatableFooterDirective,\n    DataTablePagerComponent,\n    DatatableGroupHeaderTemplateDirective\n  ]\n})\nexport class NgxDatatableModule {\n  /**\n   * Configure global configuration via INgxDatatableConfig\n   * @param configuration\n   */\n  static forRoot(configuration: INgxDatatableConfig): ModuleWithProviders<NgxDatatableModule> {\n    return {\n      ngModule: NgxDatatableModule,\n      providers: [{ provide: 'configuration', useValue: configuration }]\n    };\n  }\n}\n\n/**\n * Interface definition for INgxDatatableConfig global configuration\n */\nexport interface INgxDatatableConfig {\n  messages: {\n    emptyMessage: string; // Message to show when array is presented, but contains no values\n    totalMessage: string; // Footer total message\n    selectedMessage: string; // Footer selected message\n  };\n}\n", "export enum ClickType {\n  single = 'single',\n  double = 'double'\n}\n", "if (typeof document !== 'undefined' && !document.elementsFromPoint) {\n  document.elementsFromPoint = elementsFromPoint;\n}\n\n/*tslint:disable*/\n/**\n * Polyfill for `elementsFromPoint`\n *\n * https://developer.mozilla.org/en-US/docs/Web/API/Document/elementsFromPoint\n * https://gist.github.com/iddan/54d5d9e58311b0495a91bf06de661380\n * https://gist.github.com/oslego/7265412\n */\nexport function elementsFromPoint(x: number, y: number) {\n  const elements = [];\n  const previousPointerEvents = [];\n  let current: any; // TODO: window.getComputedStyle should be used with inferred type (Element)\n  let i;\n  let d;\n\n  //if (document === undefined) return elements;\n\n  // get all elements via elementFromPoint, and remove them from hit-testing in order\n  while ((current = document.elementFromPoint(x, y)) && elements.indexOf(current) === -1 && current != null) {\n    // push the element and its current style\n    elements.push(current);\n    previousPointerEvents.push({\n      value: current.style.getPropertyValue('pointer-events'),\n      priority: current.style.getPropertyPriority('pointer-events')\n    });\n\n    // add \"pointer-events: none\", to get to the underlying element\n    current.style.setProperty('pointer-events', 'none', 'important');\n  }\n\n  // restore the previous pointer-events values\n  for (i = previousPointerEvents.length; (d = previousPointerEvents[--i]); ) {\n    elements[i].style.setProperty('pointer-events', d.value ? d.value : '', d.priority);\n  }\n\n  // return our results\n  return elements;\n}\n/*tslint:enable*/\n", "/*\n * Public API Surface of ngx-datatable\n */\n\n// components\nexport * from './lib/ngx-datatable.module';\nexport * from './lib/components/datatable.component';\nexport * from './lib/components/header/header.component';\nexport * from './lib/components/header/header-cell.component';\nexport * from './lib/components/body/body.component';\nexport * from './lib/components/body/body-cell.component';\nexport * from './lib/components/body/body-row.component';\nexport * from './lib/components/body/progress-bar.component';\nexport * from './lib/components/body/scroller.component';\nexport * from './lib/components/body/body-row-wrapper.component';\nexport * from './lib/components/body/selection.component';\nexport * from './lib/components/body/body-group-header.directive';\nexport * from './lib/components/body/body-group-header-template.directive';\nexport * from './lib/components/body/summary/summary-row.component';\nexport * from './lib/components/footer/footer.component';\nexport * from './lib/components/footer/pager.component';\nexport * from './lib/components/footer/footer.directive';\nexport * from './lib/components/footer/footer-template.directive';\nexport * from './lib/components/columns/column.directive';\nexport * from './lib/components/columns/column-header.directive';\nexport * from './lib/components/columns/column-cell.directive';\nexport * from './lib/components/columns/tree.directive';\nexport * from './lib/components/row-detail/row-detail.directive';\nexport * from './lib/components/row-detail/row-detail-template.directive';\n\n// directives\nexport * from './lib/directives/draggable.directive';\nexport * from './lib/directives/long-press.directive';\nexport * from './lib/directives/orderable.directive';\nexport * from './lib/directives/resizeable.directive';\nexport * from './lib/directives/visibility.directive';\n\n// services\nexport * from './lib/services/scrollbar-helper.service';\nexport * from './lib/services/dimensions-helper.service';\nexport * from './lib/services/column-changes.service';\n\n// types\nexport * from './lib/types/column-mode.type';\nexport * from './lib/types/sort.type';\nexport * from './lib/types/sort-direction.type';\nexport * from './lib/types/selection.type';\nexport * from './lib/types/click.type';\nexport * from './lib/types/table-column.type';\nexport * from './lib/types/sort-prop-dir.type';\nexport * from './lib/types/contextmenu.type';\n\n// utils\nexport * from './lib/utils/id';\nexport * from './lib/utils/column';\nexport * from './lib/utils/column-prop-getters';\nexport * from './lib/utils/camel-case';\nexport * from './lib/utils/keys';\nexport * from './lib/utils/math';\nexport * from './lib/utils/prefixes';\nexport * from './lib/utils/selection';\nexport * from './lib/utils/translate';\nexport * from './lib/utils/throttle';\nexport * from './lib/utils/sort';\nexport * from './lib/utils/row-height-cache';\nexport * from './lib/utils/column-helper';\nexport * from './lib/utils/elm-from-point';\nexport * from './lib/utils/tree';\n", "/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],
  "mappings": "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",
  "names": ["_c0", "_c1", "DataTableBodyCellComponent_label_1_Template", "rf", "ctx", "_r5", "ctx_r2", "onColumnSort", "$event", "DatatableComponent_datatable_header_1_Template_datatable_header_resize_0_listener", "ctx_r4", "onColumnResize", "DatatableComponent_datatable_header_1_Template_datatable_header_reorder_0_listener", "ctx_r5", "onColumnReorder", "DatatableComponent_datatable_header_1_Template_datatable_header_select_0_listener", "ctx_r6", "onHeaderSelect", "DatatableComponent_datatable_header_1_Template_datatable_header_columnContextmenu_0_listener", "ctx_r7", "onColumnContextmenu", "ctx_r0", "sortType", "scrollbarH", "_innerWidth", "groupedRows", "undefined", "_internalColumns", "headerHeight", "reorderable", "targetMarkerTemplate", "cssClasses", "sortAscending", "sortDescending", "sortUnset", "allRowsSelected", "selectionType", "DatatableComponent_datatable_footer_4_Template", "_r9", "ctx_r8", "onFooterPage", "ctx_r1", "pageSize", "offset", "footerHeight", "footer", "messages", "totalMessage", "pagerLeftArrow", "pagerRightArrow", "pagerPrevious", "selected", "length", "selectedMessage", "pagerNext", "ScrollbarHelper", "constructor", "document", "width", "getWidth", "outer", "createElement", "style", "visibility", "msOverflowStyle", "body", "appendChild", "widthNoScroll", "offsetWidth", "overflow", "inner", "widthWithScroll", "parentNode", "removeChild", "DOCUMENT", "factory", "ɵfac", "Injectable", "Inject", "DimensionsHelper", "getDimensions", "element", "getBoundingClientRect", "ColumnChangesService", "columnInputChanges", "Subject", "columnInputChanges$", "asObservable", "onInputChange", "next", "DataTableFooterTemplateDirective", "template", "TemplateRef", "selectors", "Directive", "selector", "VisibilityDirective", "zone", "isVisible", "visible", "EventEmitter", "ngOnInit", "runCheck", "ngOnDestroy", "clearTimeout", "timeout", "onVisibilityChange", "run", "emit", "check", "offsetHeight", "nativeElement", "runOutsideAngular", "setTimeout", "ElementRef", "NgZone", "hostVars", "hostBindings", "VisibilityDirective_HostBindings", "HostBinding", "Output", "DraggableDirective", "dragX", "dragY", "dragStart", "dragging", "dragEnd", "isDragging", "ngOnChanges", "changes", "currentValue", "dragModel", "onMousedown", "_destroySubscription", "onMouseup", "event", "classList", "remove", "subscription", "model", "isDragElm", "target", "contains", "preventDefault", "mouseDownPos", "x", "clientX", "y", "clientY", "mouseup", "fromEvent", "subscribe", "ev", "mouseMoveSub", "pipe", "takeUntil", "move", "add", "left", "top", "unsubscribe", "inputs", "dragEventTarget", "outputs", "features", "Input", "ResizeableDirective", "renderer", "resizeEnabled", "resize", "resizing", "ngAfterViewInit", "renderer2", "resizeHandle", "addClass", "destroyNode", "closed", "clientWidth", "isHandle", "initialWidth", "mouseDownScreenX", "screenX", "stopPropagation", "e", "movementX", "newWidth", "overMinWidth", "minWidth", "underMaxWidth", "maxWidth", "Renderer2", "ResizeableDirective_HostBindings", "host", "HostListener", "OrderableDirective", "differs", "reorder", "targetChanged", "differ", "find", "create", "ngAfterContentInit", "updateSubscriptions", "draggables", "bind", "forEach", "d", "diffs", "diff", "createMapDiffs", "previousValue", "onDragStart", "onDragging", "onDragEnd", "forEachAddedItem", "forEachRemovedItem", "positions", "i", "dragger", "toArray", "elm", "parseInt", "offsetLeft", "toString", "prop", "right", "index", "prevPos", "isTarget", "lastDraggingIndex", "prevIndex", "newIndex", "initialIndex", "targets", "elementsFromPoint", "pos", "el", "reduce", "acc", "curr", "$$id", "KeyValueDiffers", "contentQueries", "OrderableDirective_ContentQueries", "dirIndex", "_t", "ContentChildren", "descendants", "LongPressDirective", "pressEnabled", "duration", "longPressStart", "longPressing", "longPressEnd", "mouseX", "mouseY", "press", "pressing", "isLongPress", "isLongPressing", "onMouseDown", "which", "pressModel", "mouseEvent", "onMouseMove", "loop", "xThres", "Math", "abs", "yThres", "endPress", "LongPressDirective_HostBindings", "ScrollerComponent", "ngZone", "scrollbarV", "scroll", "scrollYPos", "scrollXPos", "prevScrollYPos", "prevScrollXPos", "_scrollEventListener", "parentElement", "onScrolled", "addEventListener", "removeEventListener", "setOffset", "offsetY", "scrollTop", "dom", "currentTarget", "requestAnimationFrame", "scrollLeft", "updateOffset", "direction", "hostAttrs", "ScrollerComponent_HostBindings", "encapsulation", "changeDetection", "Component", "class", "ChangeDetectionStrategy", "OnPush", "scrollHeight", "scrollWidth", "DatatableGroupHeaderTemplateDirective", "DatatableGroupHeaderDirective", "rowHeight", "toggle", "_templateInput", "_templateQuery", "toggleExpandGroup", "group", "type", "value", "expandAllGroups", "collapseAllGroups", "DatatableGroupHeaderDirective_ContentQueries", "ContentChild", "read", "static", "emptyStringGetter", "getterForProp", "numericIndexGetter", "indexOf", "deepValueGetter", "shallowValueGetter", "row", "obj", "fieldName", "path", "current", "split", "optionalGetterForProp", "groupRowsByParents", "rows", "from", "to", "nodeById", "l", "node", "TreeNode", "uniqIDs", "arr", "item", "toValue", "push", "parent", "fromValue", "children", "resolvedRows", "flatten", "level", "treeStatus", "f", "recursive", "child", "apply", "Array", "prototype", "slice", "call", "arguments", "camelCase", "str", "replace", "trim", "toLowerCase", "a", "b", "c", "toUpperCase", "deCamelCase", "match", "id", "random", "pow", "setColumnDefaults", "columns", "treeColumnFound", "column", "isNullOrUndefined", "name", "$$valueGetter", "String", "hasOwnProperty", "resizeable", "sortable", "draggable", "canAutoResize", "isTreeColumn", "translateTemplates", "templates", "result", "temp", "col", "props", "Object", "getOwnPropertyNames", "headerTemplate", "cellTemplate", "summaryFunc", "summaryTemplate", "ColumnMode", "SelectionType", "SortType", "ContextmenuType", "DataTableColumnHeaderDirective", "DataTableColumnCellDirective", "DataTableColumnCellTreeToggle", "DataTableColumnDirective", "columnChangesService", "isFirstChange", "_cellTemplateInput", "_cellTemplateQuery", "_headerTemplateInput", "_headerTemplateQuery", "treeToggleTemplate", "_treeToggleTemplateInput", "_treeToggleTemplateQuery", "DataTableColumnDirective_ContentQueries", "frozenLeft", "frozenRight", "flexGrow", "comparator", "checkboxable", "headerCheckboxable", "headerClass", "cellClass", "treeLevelIndent", "DatatableRowDetailTemplateDirective", "DatatableRowDetailDirective", "toggleExpandRow", "expandAllRows", "collapseAllRows", "DatatableRowDetailDirective_ContentQueries", "DatatableFooterDirective", "DatatableFooterDirective_ContentQueries", "pagerLeftArrowIcon", "pagerRightArrowIcon", "pagerPreviousIcon", "pagerNextIcon", "columnsByPin", "cols", "ret", "center", "columnGroupWidths", "groups", "all", "columnTotalWidth", "total", "floor", "totalWidth", "has", "parseFloat", "columnsTotalWidth", "columnsByPinArr", "val", "colsByPinArr", "colsByPin", "RowHeightCache", "treeArray", "clearCache", "initCache", "details", "detailRowHeight", "externalVirtual", "rowCount", "rowIndexes", "rowExpansions", "isFn", "isDetailFn", "isNaN", "Error", "n", "currentRowHeight", "expanded", "get", "update", "getRowIndex", "scrollY", "calcRowIndex", "atRowIndex", "byRowHeight", "query", "atIndex", "sum", "queryBetween", "atIndexA", "atIndexB", "dataLength", "highestBit", "blockSize", "nextPos", "cache", "testStyle", "prefix", "styles", "window", "getComputedStyle", "documentElement", "join", "pre", "RegExp", "lowercase", "css", "js", "substr", "getVendorPrefixedName", "property", "transform", "backfaceVisibility", "hasCSSTransforms", "hasCSS3DTransforms", "ua", "navigator", "userAgent", "isSafari", "test", "translateXY", "ProgressBarComponent", "decls", "vars", "consts", "ProgressBarComponent_Template", "selectRows", "comparefn", "selectedIndex", "splice", "selectRowsBetween", "reverse", "greater", "lesser", "range", "start", "end", "Keys", "DataTableSelectionComponent", "activate", "select", "selectRow", "selectEnabled", "chkbox", "checkbox", "multi", "multiClick", "shiftKey", "getRowSelectedIdx", "ctrlKey", "metaKey", "selectCheck", "filter", "onActivate", "keyCode", "return", "onKeyboardFocus", "shouldFocus", "up", "down", "isCellSelection", "cell", "cellElement", "focusRow", "rowElement", "focusCell", "cellIndex", "nextRowElement", "getPrevNextRow", "focus", "focusElement", "previousElementSibling", "nextElementSibling", "nextCellElement", "getElementsByClassName", "getRowSelected", "rowId", "rowIdentity", "findIndex", "r", "ngContentSelectors", "DataTableSelectionComponent_Template", "SortDirection", "DataTableBodyCellComponent", "cd", "treeAction", "isFocused", "onCheckboxChangeFn", "onCheckboxChange", "activateFn", "cellContext", "isSelected", "rowIndex", "onTreeAction", "_element", "_group", "checkValueUpdates", "markForCheck", "_rowHeight", "_isSelected", "_expanded", "_rowIndex", "_column", "_row", "sorts", "_sorts", "calcSortDir", "status", "_treeStatus", "columnCssClasses", "cls", "res", "keys", "k", "sortDir", "asc", "desc", "height", "ngDoCheck", "clear", "userPipe", "sanitizedValue", "stripHtml", "onFocus", "onBlur", "onClick", "onDblClick", "onKeyDown", "isTargetCell", "isAction", "sort", "s", "dir", "html", "calcLeftMargin", "levelIndent", "ChangeDetectorRef", "viewQuery", "DataTableBodyCellComponent_Query", "ViewContainerRef", "DataTableBodyCellComponent_blur_HostBindingHandler", "DataTableBodyCellComponent_click_HostBindingHandler", "DataTableBodyCellComponent_dblclick_HostBindingHandler", "DataTableBodyCellComponent_keydown_HostBindingHandler", "NgIf", "NgTemplateOutlet", "displayCheck", "ViewChild", "DataTableBodyRowComponent", "scrollbarHelper", "_groupStyles", "_rowDiffer", "_columns", "recalculateColumns", "buildStylesByGroup", "innerWidth", "colByPin", "_columnGroupWidths", "offsetX", "_offsetX", "cssClass", "rowClass", "columnsTotalWidths", "trackByGroups", "colGroup", "columnTrackingFn", "calcStylesByGroup", "widths", "bodyWidth", "totalDiff", "offsetDiff", "isTargetRow", "onMouseenter", "_columnsByPin", "DataTableBodyRowComponent_HostBindings", "DataTableBodyRowComponent_mouseenter_HostBindingHandler", "NgForOf", "NgStyle", "SkipSelf", "defaultSumFunc", "cells", "cellsWithValues", "some", "noopSumFunc", "DataTableSummaryRowComponent", "summaryRow", "updateInternalColumns", "updateValues", "map", "cellsFromSingleColumn", "sumFunc", "getSummaryFunction", "DataTableRowWrapperComponent", "rowContextmenu", "groupContext", "rowContext", "rowDiffer", "onContextmenu", "getGroupHeaderStyle", "DataTableRowWrapperComponent_HostBindings", "rowDetail", "groupHeader", "DataTableRowWrapperComponent_Template", "DataTableBodyComponent", "page", "detailToggle", "rowHeightsCache", "indexes", "WeakMap", "getDetailRowHeight", "rowTrackingFn", "idx", "trackByProp", "_pageSize", "recalcLayout", "_rows", "_offset", "virtualization", "_rowCount", "bodyHeight", "_bodyHeight", "listener", "toggleRowExpansion", "toggleAllRows", "updateIndexes", "updateRows", "updateOffsetY", "scroller", "onBodyScroll", "updatePage", "first", "ceil", "last", "maxRowsPerGroup", "set", "g", "_idx", "getRowHeight", "getGroupHeight", "getRowAndDetailHeight", "getRowExpanded", "getRowsStyles", "getBottomSummaryRowStyles", "position", "hideIndicator", "loadingIndicator", "externalPaging", "max", "min", "refreshRowHeightCache", "Set", "getAdjustedViewPortIndex", "viewPortFirstRowIndex", "offsetScroll", "rowExpandedIdx", "getRowExpandedIdx", "currentIndex", "stylesByGroup", "groupExpansionDefault", "DataTableBodyComponent_Query", "emptyMessage", "groupRowsBy", "summaryPosition", "summaryHeight", "nextSortDir", "single", "orderByComparator", "Date", "isFinite", "sortRows", "dirs", "rowToIndexMap", "Map", "cachedDirs", "valueGetter", "compareFn", "rowA", "rowB", "cachedDir", "propA", "propB", "comparison", "DataTableHeaderCellComponent", "columnContextmenu", "sortFn", "onSort", "selectFn", "_allRowsSelected", "sortClass", "calcSortClass", "isCheckboxable", "newValue", "prevValue", "sortAscendingIcon", "sortDescendingIcon", "sortUnsetIcon", "DataTableHeaderCellComponent_HostBindings", "targetMarkerContext", "DataTableHeaderComponent", "_styleByGroup", "destroyed", "setStylesByGroup", "_headerHeight", "onLongPressStart", "onLongPressEnd", "headerWidth", "onColumnResized", "onColumnReordered", "getColumn", "onTargetChanged", "oldColumn", "newColumn", "concat", "leftColumnCount", "centerColumnCount", "calcNewSorts", "detectChanges", "DataTableHeaderComponent_HostBindings", "dealsWithGroup", "throttle", "func", "wait", "options", "context", "args", "previous", "later", "leading", "now", "remaining", "trailing", "throttleable", "innerDecorator", "key", "descriptor", "configurable", "enumerable", "getter", "defineProperty", "getTotalFlexGrow", "totalFlexGrow", "adjustColumnWidths", "allColumns", "expectedWidth", "columnsWidth", "colsByGroup", "scaleColumns", "attr", "hasMinWidth", "remainingWidth", "widthPerFlexPoint", "forceFillColumnWidths", "startIdx", "allowBleed", "defaultColWidth", "columnsToResize", "$$oldWidth", "additionWidthPerColumn", "exceedsWindow", "contentWidth", "getContentWidth", "columnsProcessed", "remainingWidthLimit", "newSize", "removeProcessedColumns", "DataTablePagerComponent", "change", "_count", "_page", "_size", "size", "pages", "calcPages", "count", "totalPages", "canPrevious", "canNext", "prevPage", "selectPage", "nextPage", "startPage", "endPage", "maxSize", "isMaxSized", "num", "number", "text", "DataTablePagerComponent_Template", "DataTableFooterComponent", "selectedCount", "curPage", "footerTemplate", "DataTableFooterComponent_Template", "NgClass", "DatatableComponent", "dimensionsHelper", "configuration", "columnMode", "standard", "externalSorting", "swapColumns", "selectAllRowsOnPage", "tableContextmenu", "BehaviorSubject", "_subscriptions", "_groupRowsBy", "_internalRows", "sortInternalRows", "treeFromRelation", "treeToRelation", "recalculate", "groupArrayBy", "limit", "_limit", "isFixedHeader", "isFixedRow", "isVertScroll", "isVirtualized", "isHorScroll", "isSelectable", "isCheckboxSelection", "isSingleSelection", "isMultiSelection", "isMultiClickSelection", "columnTemplates", "_columnTemplates", "translateColumns", "bodyComponent", "rowsOnPage", "v", "listenForColumnInputChanges", "originalArray", "groupBy", "addGroup", "recalculatePages", "recalculateDims", "onWindowResize", "forceIdx", "force", "flex", "dims", "calcPageSize", "calcRowCount", "onBodyPage", "header", "content", "onRowContextmenu", "prevCol", "movedCol", "allSelected", "onBodySelect", "notifyOnChanges", "DatatableComponent_ContentQueries", "DatatableComponent_Template_datatable_body_activate_2_listener", "DatatableComponent_Template_datatable_body_rowContextmenu_2_listener", "DatatableComponent_Template_datatable_body_select_2_listener", "DatatableComponent_Template_datatable_body_scroll_2_listener", "DatatableComponent_Template_datatable_body_treeAction_2_listener", "dependencies", "AsyncPipe", "__decorate", "ViewEncapsulation", "None", "Optional", "headerComponent", "NgxDatatableModule", "forRoot", "ngModule", "providers", "provide", "useValue", "declarations", "imports", "CommonModule", "exports", "NgModule", "ClickType", "elements", "previousPointerEvents", "elementFromPoint", "getPropertyValue", "priority", "getPropertyPriority", "setProperty"]
}
