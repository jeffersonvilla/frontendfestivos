{
  "version": 3,
  "sources": ["../../../../../../../src/material/progress-spinner/progress-spinner.ts", "../../../../../../../src/material/progress-spinner/progress-spinner.html", "../../../../../../../src/material/progress-spinner/module.ts", "../../../../../../../src/material/progress-spinner/progress-spinner_public_index.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  Optional,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanColor, mixinColor, ThemePalette} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {coerceNumberProperty, NumberInput} from '@angular/cdk/coercion';\n\n// Boilerplate for applying mixins to MatProgressBar.\nconst _MatProgressSpinnerBase = mixinColor(\n  class {\n    constructor(public _elementRef: ElementRef) {}\n  },\n  'primary',\n);\n\n/** Possible mode for a progress spinner. */\nexport type ProgressSpinnerMode = 'determinate' | 'indeterminate';\n\n/** Default `mat-progress-spinner` options that can be overridden. */\nexport interface MatProgressSpinnerDefaultOptions {\n  /** Default color of the spinner. */\n  color?: ThemePalette;\n  /** Diameter of the spinner. */\n  diameter?: number;\n  /** Width of the spinner's stroke. */\n  strokeWidth?: number;\n  /**\n   * Whether the animations should be force to be enabled, ignoring if the current environment is\n   * using NoopAnimationsModule.\n   */\n  _forceAnimations?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-progress-spinner`. */\nexport const MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS =\n  new InjectionToken<MatProgressSpinnerDefaultOptions>('mat-progress-spinner-default-options', {\n    providedIn: 'root',\n    factory: MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY,\n  });\n\n/** @docs-private */\nexport function MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY(): MatProgressSpinnerDefaultOptions {\n  return {diameter: BASE_SIZE};\n}\n\n/**\n * Base reference size of the spinner.\n */\nconst BASE_SIZE = 100;\n\n/**\n * Base reference stroke width of the spinner.\n */\nconst BASE_STROKE_WIDTH = 10;\n\n@Component({\n  selector: 'mat-progress-spinner, mat-spinner',\n  exportAs: 'matProgressSpinner',\n  host: {\n    'role': 'progressbar',\n    'class': 'mat-mdc-progress-spinner mdc-circular-progress',\n    // set tab index to -1 so screen readers will read the aria-label\n    // Note: there is a known issue with JAWS that does not read progressbar aria labels on FireFox\n    'tabindex': '-1',\n    '[class._mat-animation-noopable]': `_noopAnimations`,\n    '[class.mdc-circular-progress--indeterminate]': 'mode === \"indeterminate\"',\n    '[style.width.px]': 'diameter',\n    '[style.height.px]': 'diameter',\n    '[style.--mdc-circular-progress-size]': 'diameter + \"px\"',\n    '[style.--mdc-circular-progress-active-indicator-width]': 'diameter + \"px\"',\n    '[attr.aria-valuemin]': '0',\n    '[attr.aria-valuemax]': '100',\n    '[attr.aria-valuenow]': 'mode === \"determinate\" ? value : null',\n    '[attr.mode]': 'mode',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatProgressSpinner extends _MatProgressSpinnerBase implements CanColor {\n  /** Whether the _mat-animation-noopable class should be applied, disabling animations.  */\n  _noopAnimations: boolean;\n\n  /** The element of the determinate spinner. */\n  @ViewChild('determinateSpinner') _determinateCircle: ElementRef<HTMLElement>;\n\n  constructor(\n    elementRef: ElementRef<HTMLElement>,\n    @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode: string,\n    @Inject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS)\n    defaults?: MatProgressSpinnerDefaultOptions,\n  ) {\n    super(elementRef);\n    this._noopAnimations =\n      animationMode === 'NoopAnimations' && !!defaults && !defaults._forceAnimations;\n\n    if (defaults) {\n      if (defaults.color) {\n        this.color = this.defaultColor = defaults.color;\n      }\n\n      if (defaults.diameter) {\n        this.diameter = defaults.diameter;\n      }\n\n      if (defaults.strokeWidth) {\n        this.strokeWidth = defaults.strokeWidth;\n      }\n    }\n  }\n\n  /**\n   * Mode of the progress bar.\n   *\n   * Input must be one of these values: determinate, indeterminate, buffer, query, defaults to\n   * 'determinate'.\n   * Mirrored to mode attribute.\n   */\n  @Input() mode: ProgressSpinnerMode =\n    this._elementRef.nativeElement.nodeName.toLowerCase() === 'mat-spinner'\n      ? 'indeterminate'\n      : 'determinate';\n\n  /** Value of the progress bar. Defaults to zero. Mirrored to aria-valuenow. */\n  @Input()\n  get value(): number {\n    return this.mode === 'determinate' ? this._value : 0;\n  }\n  set value(v: NumberInput) {\n    this._value = Math.max(0, Math.min(100, coerceNumberProperty(v)));\n  }\n  private _value = 0;\n\n  /** The diameter of the progress spinner (will set width and height of svg). */\n  @Input()\n  get diameter(): number {\n    return this._diameter;\n  }\n  set diameter(size: NumberInput) {\n    this._diameter = coerceNumberProperty(size);\n  }\n  private _diameter = BASE_SIZE;\n\n  /** Stroke width of the progress spinner. */\n  @Input()\n  get strokeWidth(): number {\n    return this._strokeWidth ?? this.diameter / 10;\n  }\n  set strokeWidth(value: NumberInput) {\n    this._strokeWidth = coerceNumberProperty(value);\n  }\n  private _strokeWidth: number;\n\n  /** The radius of the spinner, adjusted for stroke width. */\n  _circleRadius(): number {\n    return (this.diameter - BASE_STROKE_WIDTH) / 2;\n  }\n\n  /** The view box of the spinner's svg element. */\n  _viewBox() {\n    const viewBox = this._circleRadius() * 2 + this.strokeWidth;\n    return `0 0 ${viewBox} ${viewBox}`;\n  }\n\n  /** The stroke circumference of the svg circle. */\n  _strokeCircumference(): number {\n    return 2 * Math.PI * this._circleRadius();\n  }\n\n  /** The dash offset of the svg circle. */\n  _strokeDashOffset() {\n    if (this.mode === 'determinate') {\n      return (this._strokeCircumference() * (100 - this._value)) / 100;\n    }\n    return null;\n  }\n\n  /** Stroke width of the circle in percent. */\n  _circleStrokeWidth() {\n    return (this.strokeWidth / this.diameter) * 100;\n  }\n}\n\n/**\n * @deprecated Import Progress Spinner instead. Note that the\n *    `mat-spinner` selector isn't deprecated.\n * @breaking-change 16.0.0\n */\n// tslint:disable-next-line:variable-name\nexport const MatSpinner = MatProgressSpinner;\n", "<ng-template #circle>\n  <svg [attr.viewBox]=\"_viewBox()\" class=\"mdc-circular-progress__indeterminate-circle-graphic\"\n       xmlns=\"http://www.w3.org/2000/svg\" focusable=\"false\">\n    <circle [attr.r]=\"_circleRadius()\"\n            [style.stroke-dasharray.px]=\"_strokeCircumference()\"\n            [style.stroke-dashoffset.px]=\"_strokeCircumference() / 2\"\n            [style.stroke-width.%]=\"_circleStrokeWidth()\"\n            cx=\"50%\" cy=\"50%\"/>\n  </svg>\n</ng-template>\n\n<!--\n  All children need to be hidden for screen readers in order to support ChromeVox.\n  More context in the issue: https://github.com/angular/components/issues/22165.\n-->\n<div class=\"mdc-circular-progress__determinate-container\" aria-hidden=\"true\" #determinateSpinner>\n  <svg [attr.viewBox]=\"_viewBox()\" class=\"mdc-circular-progress__determinate-circle-graphic\"\n       xmlns=\"http://www.w3.org/2000/svg\" focusable=\"false\">\n    <circle [attr.r]=\"_circleRadius()\"\n            [style.stroke-dasharray.px]=\"_strokeCircumference()\"\n            [style.stroke-dashoffset.px]=\"_strokeDashOffset()\"\n            [style.stroke-width.%]=\"_circleStrokeWidth()\"\n            class=\"mdc-circular-progress__determinate-circle\"\n            cx=\"50%\" cy=\"50%\"/>\n  </svg>\n</div>\n<!--TODO: figure out why there are 3 separate svgs-->\n<div class=\"mdc-circular-progress__indeterminate-container\" aria-hidden=\"true\">\n  <div class=\"mdc-circular-progress__spinner-layer\">\n    <div class=\"mdc-circular-progress__circle-clipper mdc-circular-progress__circle-left\">\n      <ng-container [ngTemplateOutlet]=\"circle\"></ng-container>\n    </div>\n    <div class=\"mdc-circular-progress__gap-patch\">\n      <ng-container [ngTemplateOutlet]=\"circle\"></ng-container>\n    </div>\n    <div class=\"mdc-circular-progress__circle-clipper mdc-circular-progress__circle-right\">\n      <ng-container [ngTemplateOutlet]=\"circle\"></ng-container>\n    </div>\n  </div>\n</div>\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressSpinner, MatSpinner} from './progress-spinner';\nimport {CommonModule} from '@angular/common';\n\n@NgModule({\n  imports: [CommonModule],\n  exports: [MatProgressSpinner, MatSpinner, MatCommonModule],\n  declarations: [MatProgressSpinner, MatSpinner],\n})\nexport class MatProgressSpinnerModule {}\n", "/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],
  "mappings": "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",
  "names": ["_c0", "MatProgressSpinner_ng_template_0_Template", "rf", "ctx", "ctx_r0", "_strokeCircumference", "_circleStrokeWidth", "_MatProgressSpinnerBase", "mixinColor", "constructor", "_elementRef", "MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS", "InjectionToken", "providedIn", "factory", "MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY", "diameter", "BASE_SIZE", "BASE_STROKE_WIDTH", "MatProgressSpinner", "elementRef", "animationMode", "defaults", "mode", "nativeElement", "nodeName", "toLowerCase", "_value", "_diameter", "_noopAnimations", "_forceAnimations", "color", "defaultColor", "strokeWidth", "value", "v", "Math", "max", "min", "coerceNumberProperty", "size", "_strokeWidth", "_circleRadius", "_viewBox", "viewBox", "PI", "_strokeDashOffset", "ElementRef", "ANIMATION_MODULE_TYPE", "ɵcmp", "selectors", "viewQuery", "MatProgressSpinner_Query", "hostVars", "hostBindings", "MatProgressSpinner_HostBindings", "_r1", "dependencies", "NgTemplateOutlet", "styles", "encapsulation", "changeDetection", "Component", "exportAs", "host", "inputs", "ChangeDetectionStrategy", "OnPush", "ViewEncapsulation", "None", "template", "Optional", "Inject", "_determinateCircle", "ViewChild", "Input", "MatSpinner", "MatProgressSpinnerModule", "declarations", "imports", "CommonModule", "exports", "MatCommonModule", "NgModule", "args"]
}
